         MACRO ,
&NAME    BEGIN &ID=YES,&WKDSECT=,&WKCSECT=,&REG0=,&REG1=,&PREFIX=,     X
               &NOPARM=,&SP=1,&PARSEP=,&PARSWKA=,&REGS=YES,&PARSERR=,  X
               &CHECKID=,&BASE=R12,&PDLREG=R11,&PDLNAME=IKJPARMD,      X
               &PCL=,&ZEROIZE=,&INITRTN=,&SAVESUF=,&SAVEPRE=,          X
               &CPPLPTR=,&USING=,&ISA=,&CELL=,&ESDPRFX=,&LOAD=
.*
         GBLB  &STBEG                   START/BEGIN PRESENT
         GBLB  &RCPRCP,&RCPIOPL(2),&RCPCP,&RCPRENT,&RCPPPL(2)
         GBLB  &RCPDFPL(2),&RCPDFPB(2)  DEFAULT PARM LIST/BLOCK
         GBLA  &#COPYSZ                 COPYRIGHT NOTICE SIZE
         GBLA  &RCPSWS(10)              ENVIRONMENT SWITCHES
         GBLA  &RCPBGN#                 COUNTER OF TIMES BEGIN ISSUED
         GBLB  &RCPECT(2),&RCPUPT(2),&RCPPSCB(2),&RCPS99(2),&RCPCPPL(2)
         GBLB  &RCPSTPB(2),&RCPPTPB(2),&RCPGTPB(2),&RCPPGPB(2)
         GBLB  &RCPLSD(2)
         GBLB  &RCPBRGS
         GBLC  &RCPSPN,&RCPPRE,&RCPWKDS,&RCPWKCS
         LCLA  &I,&J,&L
         LCLB  &ESDDATE
         LCLC  &P,&CHARVAR,&C
         LCLC  &R2
         #COPY SET                      COPYRIGHT NOTICE
&STBEG   SETB  1                        START/BEGIN PRESENT
&J       SETA  N'&SYSLIST
&R2      SETC  'R2'
&RCPBGN# SETA  &RCPBGN#+1               INCREMENT BEGIN MACRO COUNT
         AIF   ('&REG1' EQ '').TRCP
&R2      SETC  '&REG1'
.TRCP    AIF   (NOT &RCPRCP).TESTOPT TEST FOR 2ND ENTRY TO MACRO
&RCPIOPL(1) SETB 0
&RCPCP   SETB  0
&RCPRENT SETB  0
&RCPPPL(1) SETB 0
&RCPECT(1) SETB 0
&RCPUPT(1) SETB 0
&RCPPSCB(1) SETB 0
&RCPSTPB(1) SETB 0
&RCPPTPB(1) SETB 0
&RCPPGPB(1) SETB 0
&RCPGTPB(1) SETB 0
&RCPDFPL(1) SETB 0
&RCPSWS(1) SETA 0
&RCPSWS(2) SETA 0
&RCPSWS(3) SETA 0
&RCPSWS(4) SETA 0
&RCPSWS(5) SETA 0
&RCPSWS(6) SETA 0
&RCPSWS(7) SETA 0
&RCPSWS(8) SETA 0
&RCPSWS(9) SETA 0
&RCPWKDS SETC  ''
&RCPWKCS SETC  ''
&RCPPRE  SETC  ''
.TESTOPT ANOP  ,
&RCPRCP  SETB  1
.NEXTOPT AIF  (&I GE &J).ENDOPT
&I       SETA  &I+1
&C       SETC  '&SYSLIST(&I)'
         AIF   ('&C' NE 'CP').T1
&RCPCP   SETB  1
         AGO   .NEXTOPT
.T1      AIF   ('&C' NE 'TERMIO').T2
&RCPIOPL(1) SETB 1
         AGO   .NEXTOPT
.T2      AIF   ('&C' NE 'PARSE' AND '&C' NE 'PARS').T3
&RCPPPL(1) SETB 1
         AGO   .NEXTOPT
.T3      AIF   ('&C' NE 'RENT').T4
&RCPRENT SETB  1
         AGO   .NEXTOPT
.T4      AIF   ('&C' NE 'DYNALOC').T5
&RCPS99(1) SETB 1
         AGO   .NEXTOPT
.T5      AIF   ('&C' NE 'PUTL' AND '&C' NE 'PUTLINE').T6
&RCPPTPB(1) SETB 1
&RCPIOPL(1) SETB 1
         AGO   .NEXTOPT
.T6      AIF   ('&C' NE 'GETL' AND '&C' NE 'GETLINE').T7
&RCPIOPL(1) SETB 1
&RCPGTPB(1) SETB 1
         AGO   .NEXTOPT
.T7      AIF   ('&C' NE 'STACK' AND '&C' NE 'FLUSH').T8
&RCPIOPL(1) SETB 1
&RCPSTPB(1) SETB 1
         AGO   .NEXTOPT
.T8      AIF   ('&C' NE 'PUTGET').T9
&RCPIOPL(1) SETB 1
&RCPPGPB(1) SETB 1
         AGO   .NEXTOPT
.T9      AIF   ('&C' NE 'ECT').T10
&RCPECT(1) SETB 1
ECTSWS   DCLSW GENERIC=ECT
         AGO   .NEXTOPT
.T10     AIF   ('&C' NE 'UPT').T11
&RCPUPT(1) SETB 1
UPTSWS   DCLSW GENERIC=UPT
         AGO   .NEXTOPT
.T11     AIF   ('&C' NE 'PSCB').T12
&RCPPSCB(1) SETB 1
PSCBATR1 DCLSW GENERIC=PSCB
         AGO   .NEXTOPT
.T12     AIF   ('&C' NE 'LSD').T13
&RCPLSD(1) SETB 1
         AGO   .NEXTOPT
.T13     AIF   ('&C' NE 'ESDDATE').T14
&ESDDATE SETB  1
         AGO   .NEXTOPT
.T14     AIF   ('&C' NE 'NOSAVEAREA').T15
&RCPSWS(1) SETA 1                       INDICATE NO SAVEAREA
         AGO   .NEXTOPT
.T15     AIF   ('&C' NE 'NOSAVE').T16
&RCPSWS(1) SETA 2                       INDICATE NOSAVE
         AGO   .NEXTOPT
.T16     AIF   ('&C' NE 'DFLT' AND '&C' NE 'DEFAULT').T17
&RCPDFPL(1) SETB 1
         AGO   .NEXTOPT
.T17     AIF   ('&C' NE 'PROC').T18
&RCPSWS(2) SETA 1
         AGO   .NEXTOPT
.T18     AIF   ('&C' NE 'PROC(MAIN)').T19
&RCPSWS(2) SETA 2
         AGO   .NEXTOPT
.T19     AIF   ('&C' NE 'LIFO' AND '&ISA' EQ '').T20
&RCPSWS(3) SETA 1
         AGO   .NEXTOPT
.T20     ANOP  ,
         AIF   ('&C' EQ '').NEXTOPT    IGNORE NULL OPERANDS
.INVOPT  MNOTE 4,'''&C'' Operand Invalid. Ignored'
         AGO   .NEXTOPT
.ENDOPT  ANOP  ,
.TESTPRE AIF   (K'&PREFIX GT 0).TPRELEN
&P       SETC  'RCP'
         AIF   (&RCPBGN# EQ 1).SETPRE
&P       SETC  'XX&RCPBGN#'(K'&RCPBGN#,3)
         AGO   .SETPRE
.TPRELEN AIF   (K'&PREFIX LE 3).PREFOK
         MNOTE 1,'Prefix Must Be 1 To 3 Characters Long. First 3 Used'
&P       SETC  '&PREFIX'(1,3)
         AGO   .SETPRE
.PREFOK  ANOP  ,
&P       SETC  '&PREFIX'
.SETPRE  ANOP  ,
&RCPPRE  SETC  '&P'                     SET GLOBAL BEGIN PREFIX
.TESTNM  AIF   ('&NAME' NE '').NAMEOK
         MNOTE 8,'Name Operand Required'
         MEXIT ,
.NAMEOK  ANOP  ,
&NAME    CSECT ,
         AIF   ('&REGS' NE 'YES' OR &RCPBRGS).NOREGS

&RCPBRGS SETB  1
         #REGS ,
.NOREGS  ANOP  ,
         EJECT ,
         AIF   (NOT &ESDDATE).TPRFX
&C       SETC  '@'
         AIF   ('&ESDPRFX' EQ '').ESDOK  IF ESDPRFX= NOT OVERRIDDEN
.TPRFX   AIF    ('&ESDPRFX' EQ '').ENDESD  IF ESDPRFX NOT SPEC, SKIP
&C       SETC  '&ESDPRFX'               GET ESD DATE PREFIX
         AIF    (K'&C LT 3).ESDOK          CHECK LENGTH (MUST BE < 3)
         MNOTE 4,'First Two Chars Of ESD Date Prefix Used'
&C       SETC  '&ESDPRFX'(1,2)          GET 1ST 2 CHARS
.ESDOK   ANOP  ,
&C       SETC  '&C'.'&SYSDATE'(1,2).'&SYSDATE'(4,2).'&SYSDATE'(7,2)
&C       EQU   &NAME                    PROVIDE EXTERNAL SYMBOL
         ENTRY &C                       CONTAINING ASSEMBLY DATE

.ENDESD  ANOP  ,
&RCPPRE  SETC  '&P'
.TESTID  AIF   ('&ID' EQ '' OR '&ID' EQ 'NO').STM
         AIF   ('&ID' EQ 'YES' OR '&ID' EQ '*').STANDID
         AIF   ('&ID'(1,1) EQ '''').QID
&L       SETA  K'&ID+21
         AIF   (&L/2 EQ (&L+1)/2).L1EVEN
&L       SETA  &L+1+&#COPYSZ
.L1EVEN  B     &L.(,R15)                BRANCH AROUND ID
&L       SETA  K'&ID+16+&#COPYSZ
         DC    AL1(&L)                  LENGTH OF ID
         DC    C'&ID'                   MODULE ID
         AGO   .DATE
.QID     ANOP  ,
&L       SETA  K'&ID+19
         AIF   (&L/2 EQ (&L+1)/2).L2EVEN
&L       SETA  &L+1+&#COPYSZ
.L2EVEN  B     &L.(0,R15)               BRANCH AROUND ID
&L       SETA  K'&ID+14+&#COPYSZ
         DC    AL1(&L)                  LENGTH OF ID
         DC    C&ID                     MODULE ID
.DATE    DC    CL8' &SYSTIME'           TIME OF ASSEMBLY
         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY
         #COPY GEN                      COPYRIGHT NOTICE
         AGO   .STM
.STANDID ANOP  ,
&L       SETA  30+&#COPYSZ
         B     &L.(0,R15)               BRANCH AROUND ID
&L       SETA  &L-5
         DC    AL1(&L)                  LENGTH OF ID
         DC    CL8'&NAME'               MODULE NAME
         DC    CL8' &SYSTIME'           TIME OF ASSEMBLY
         DC    CL9'&SYSDATE'            DATE OF ASSEMBLY
         #COPY GEN                      COPYRIGHT NOTICE
*
.STM     STM   R14,R12,12(R13)          SAVE CALLER'S REGISTERS
         AIF   ('BASE(1)' NE '').BASEOK
         LA    R12,0(0,R15)             LOAD BASE REGISTER WITH EP
         USING &NAME,R12                ESTABLISH ADDRESSABLITY
         AGO   .BASEEND
.BASEOK  LA    &BASE(1),0(0,R15)        LOAD BASE REGISTER WITH EP
         USING &NAME,&BASE(1)           ESTABLISH ADDRESSABILITY
         AIF   ('&BASE(2)' EQ '').BASEEND
         LA    &BASE(2),2048(0,&BASE(1))
         LA    &BASE(2),2048(0,&BASE(2))
         USING &NAME+4096,&BASE(2)
         AIF   ('&BASE(3)' EQ '').BASEEND
         LA    &BASE(3),2048(0,&BASE(2))
         LA    &BASE(3),2048(0,&BASE(3))
         USING &NAME+8192,&BASE(3)
.BASEEND AIF   (&RCPSWS(1) GT 0).NOSAVER  TEST FOR NOSAVEAREA OPT
         AIF   (&RCPSWS(2) GT 0).PROC  TEST FOR PROC OPTION
         AIF   ('&WKDSECT' NE '').RENTOPT
         AIF   ('&WKCSECT' NE '').CSOPT
         AIF   (NOT &RCPCP AND NOT &RCPRENT).INLINE
&RCPWKDS SETC  '&P.DSECT'
         AGO   .DSGET
.NOSAVER AIF   ('&WKCSECT&WKDSECT' NE '').NSWK
.NSTCP   AIF   (&RCPCP).NSCP
.NSCONT  AGO   .CONTINU
.NSWK    MNOTE 8,'WKCSECT= And WKDSECT= Not Compatible With NOSAVEAREA X
               Option'
         AGO   .NSTCP
.NSCP    MNOTE 8,'CP Option Not Compatible With NOSAVEAREA Option'
         AGO   .NSCONT
.PROC    RCPPROC WKCSECT=&WKCSECT,WKDSECT=&WKDSECT,                    X
               REG1=&REG1,REG0=&REG0,ISA=&ISA,SAVEPRE=&SAVEPRE,        X
               SAVESUF=&SAVESUF,SP=&SP
         AGO   .SETRC0
.INLINE  LR    R15,R13                  SAVE CALLERS SAVE AREA ADDRESS
         CNOP  0,4
         LA    R13,*+8
         B     *+76                     BRANCH AROUND
         DC    18F'0'                   SAVE AREA
         ST    R15,4(0,R13)             CHAIN SAVE
         ST    R13,8(0,R15)             AREAS TOGETHER
         AGO   .USING
.RENTOPT ANOP  ,
&RCPWKDS SETC  '&WKDSECT'
&RCPWKCS SETC  ''

.DSGET   ANOP  ,
         AIF   ('&SAVEPRE' NE '' OR '&SAVESUF' NE '').RCPSAVE
         RCPDS ,
         DS    9D                       RESERVE SPACE FOR SAVE AREA
&P.RCODE DS    F                        RETURN CODE
         RCPDS ,

         AGO   .DSGET2
.RCPSAVE RCPSAVE &SAVEPRE,&SAVESUF
.DSGET2  AIF   ('&REG1' EQ '').TESTR0
&R2      SETC  '&REG1'
.TESTR0  AIF   ('&REG0' EQ '').GETMAIN
         LR    &REG0,R0                 SAVE REGISTER 0 CONTENTS
.GETMAIN LR    &R2,R1                   SAVE REGISTER 1 CONTENTS
         GETMAIN RU,LV=&P.WKLEN,SP=&SP,LOC=BELOW
&RCPSPN  SETC  '&SP'
&RCPRCP  SETB  1
         AIF   ('&ZEROIZE' NE 'YES').NZERO
         LR    R14,R1                   SAVE WORK AREA POINTER
         LR    R0,R1                    R0 POINTS TO WORK AREA
         L     R1,=A(&P.WKLEN)          R1 HAS LENGTH OF WORK AREA
         SR    R15,R15                  R15 HAS PAD BYTE & ZERO LENGTH
         MVCL  R0,R14                   CLEAR WORK AREA
         LR    R1,R14                   RESTORE W/A POINTER
.NZERO   ST    R13,4(0,R1)              CHAIN SAVE
         ST    R1,8(0,R13)              AREAS TOGETHER
         LR    R13,R1                   LOAD SAVE AREA ADDRESS
         USING &RCPWKDS,R13             ESTABLISH ADDRESSABILITY TO IT
         AGO   .SETRC0

.CSOPT   ANOP  ,
&RCPRCP  SETB  1
&RCPWKDS SETC  ''
&RCPWKCS SETC  '&WKCSECT'
         RCPDS ,
         DS    9D                       RESERVE SPACE FOR SAVE AREA
&P.RCODE DC    F'0'                     RETURN CODE
         RCPDS ,

         LR    R15,R13                  SAVE CALLER'S SAVE AREA ADRRESS
         L     R13,=A(&WKCSECT)         AND PICK UP ADDRESS OF NEW ONE
         USING &WKCSECT,R13             ESTABLISH ADDRESSABILITY TO IT
         ST    R15,4(0,R13)             CHAIN SAVE
         ST    R13,8(0,R15)             AREAS TOGETHER
.SETRC0  XC    &P.RCODE,&P.RCODE        SET RETURN CODE TO ZERO
         AIF   ('&INITRTN' EQ '').BUILD
         AIF   ('&INITRTN(2)' EQ '').INITBAL
         AIF   ('&INITRTN(2)'(1,1) EQ '(').INITREG
         B     &INITRTN(1)             BRANCH TO INITIALIZATION ROUTINE
&CHARVAR SETC  '&INITRTN(2)'
&CHARVAR DS    0H                       PROVIDE RETURN ADDRESS
         AGO   .BUILD
.INITREG ANOP  ,
&C       SETC  '&INITRTN(2)'(2,K'&INITRTN(2)-2)
         BAL   &C,&INITRTN(1)           BAL TO INITIALIZATION RTN
         AGO   .BUILD
.INITBAL BAL   R14,&INITRTN(1)          BAL TO INITIALIZATION ROUTINE
.BUILD   AIF   ('&LOAD' EQ '').NOLOAD
         EJECT ,
***********************************************************************
**       LOAD SOME MODULES NEEDED BY THIS ROUTINE                    **
***********************************************************************

         LR    R14,R1                   PRESERVE REGISTER 1
&I       SETA  0
.LOADLOP ANOP  ,
&I       SETA  &I+1
         AIF   (&I GT N'&LOAD).ENDLOAD
         AIF   (&I EQ 1 OR &I EQ &I/2*2).DOLOAD

.DOLOAD  MNOTE '         RCPLOAD &LOAD(&I)'
         RCPLOAD &LOAD(&I)

         AGO   .LOADLOP
.ENDLOAD LR    R1,R14                   RESTORE REGISTER 1
.NOLOAD  ANOP  ,
         AIF   (NOT &RCPCP).USING
         AIF   (&RCPCPPL(2)).BPCPPL
         EJECT ,
&RCPCPPL(2) SETB 1
         IKJCPPL
&NAME    CSECT ,

.BPCPPL  ANOP  ,
         RCPDS ,
&P.CPPL  DS    A                        SAVE ADDRESS OF CPPL HERE
&P.ECB   DS    F                        I/O SERVICE ROUTINE ECB
         RCPDS ,

         AIF   ('&RCPWKDS' NE '').TCPPLP
         LR    &R2,R1                   LOAD PARM ADDRESS
.TCPPLP  AIF   ('&CPPLPTR' EQ '').STCPPL
         AIF   (N'&CPPLPTR EQ 2).OKCPPLP
         MNOTE 8,'Invalid CPPLPTR Options'
         AGO   .STCPPL
.OKCPPLP L     &CPPLPTR(1),&CPPLPTR(2)(&R2) LOAD CPPL ADDRESS
         ST    &CPPLPTR(1),&P.CPPL      SAVE CPPL ADDRESS
         USING CPPL,&CPPLPTR(1)         ADDRESS CPPL DSECT
         AGO   .XCECB
.STCPPL  ST    &R2,&P.CPPL              SAVE CPPL ADDRESS
         USING CPPL,&R2                 ADDRESS CPPL
.XCECB   XC    &P.ECB,&P.ECB            ZERO ATTENTION ECB
         AIF   ('&CHECKID(1)' EQ '').BIOPL
         RCPCKID &CHECKID
.BIOPL   AIF   (NOT &RCPIOPL(1)).BDFPL
         RCPIOPL ,
.BDFPL   AIF   (NOT &RCPDFPL(1)).BPARS
         RCPDFPL ,
.BPARS   AIF   (NOT &RCPPPL(1)).CONTINU
         RCPPPL PCL=&PCL,NOPARM=&NOPARM,PARSEP=&PARSEP,                X
               PARSWKA=&PARSWKA,PARSERR=&PARSERR,PDLREG=&PDLREG,       X
               PDLNAME=&PDLNAME
.CONTINU ANOP  ,
.USING   AIF   ('&USING' EQ '').EXIT

&L       SETA  1
&I       SETA  N'&USING
.USING2  AIF   (&L GT &I).EXIT
         AIF   ('&USING(&L)' EQ '' OR '&USING(&L+1)' EQ '').USINGE
         USING &USING(&L),&USING(&L+1)
&L       SETA  &L+2
         AGO   .USING2
.USINGE  MNOTE 4,'Required Operand(s) Missing On USING Keyword'
&L       SETA  &L+2
         AGO   .USING2
.EXIT    EJECT ,
         MEND  ,
