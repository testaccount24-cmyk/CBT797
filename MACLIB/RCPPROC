         MACRO ,
         RCPPROC &WKCSECT=,&WKDSECT=,                                  X
               &REG1=,&REG0=,&ISA=,&SAVEPRE=,                          X
               &SAVESUF=,&SP=
         GBLA  &RCPSWS(10)
         GBLC  &RCPPRE,&RCPWKCS,&RCPWKDS
         GBLC  &RCPSPN
         LCLC  &P,&C
         RCPDEBUG
&P       SETC  '&RCPPRE'
         AIF   ('&WKCSECT' EQ '').TDS
&RCPWKCS SETC  '&WKCSECT'
         AGO   .SETCS2
.TDS     AIF   ('&WKDSECT' EQ '').SYSECT
&RCPWKDS SETC  '&WKDSECT'
         AGO   .SETCS
.SYSECT  ANOP  ,
&RCPWKDS SETC  '&SYSECT'
.SET1    AIF   (K'&RCPWKDS LT 8).LOK
&RCPWKDS SETC  '&RCPWKDS'(1,4)'&RCPWKDS'(6,3)'1'
         AGO   .SETCS
.LOK     ANOP  ,
&RCPWKDS SETC  '&RCPWKDS.1'
.SETCS   ANOP  ,
&RCPWKCS SETC  ''
.SETCS2  ANOP  ,
&RCPSWS(4) SETA &RCPSWS(2)-1 SET W/A TO BE FREED OPT IF PROC(MAIN)
         AIF   ('&ISA' EQ '').NISA
&RCPSWS(3) SETA 1                       SET LIFO FLAG IF ISA SPEC
.NISA    ANOP  ,
         SPACE 2
         RCPDS ,
         DS    9D                       SAVE AREA
&P.RCODE DS    F                        RETURN CODE
         RCPMCA ,
         RCPDS ,
         SPACE 2
         AIF   ('&REG1' EQ '').TR0
         LR    &REG1,R1                 SAVE CONTENTS OF REG 1
.TR0     AIF   ('&REG0' EQ '').TP
         LR    &REG0,R0                 SAVE CONTENTS OF REG 0
.TP      AIF   (&RCPSWS(2) EQ 2).PROCMN   PROCMAIN OPTION
         AIF   (&RCPSWS(3) EQ 1).PL     LIFO OPTION
         L     R15,0(0,R13)             R15 -> MODULE COMM AREA
         L     R15,&P.XDS-&P.MCA(0,R15) LOAD EXTERNAL DUMMY SECT ADDR
         A     R15,&P.QCON              GET OFFSET TO WORK AREA
         ST    R15,8(0,R13)             CHAIN SAVE
         ST    R13,4(0,R15)              AREAS TOGETHER
         MVC   0(4,R15),0(R13)          COPY POINTER TO COMM AREA
         LR    R13,R15                  LOAD WORK AREA ADDRESS
         USING &RCPWKCS&RCPWKDS,R13
         MEXIT ,
.PL      ANOP  ,
***********************************************************************
*        GET WORKAREA FROM LIFO STACK                                 *
***********************************************************************
         #GET  LV=&P.WKLEN
         ST    R1,8(0,R13)              CHAIN SAVE
         ST    R13,4(0,R1)               AREAS TOGETHER
         MVC   0(4,R1),0(R13)           PROPAGATE MODULE COMM AREA ADDR
         LR    R13,R1                   LOAD WORK AREA ADDRESS
         USING &RCPWKCS&RCPWKDS,R13
         MEXIT ,
.PROCMN  L     R0,&P.CXD                LOAD WORK AREA LENGTH
 MNOTE *,'       GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE'
         GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE
         SR    R15,R15                  FROM LENGTH IS ZERO
         LR    R14,R1                   SAVE WORK AREA ADDRESS
         L     R1,&P.CXD                LOAD WORK AREA LENGTH
         LR    R0,R14                   TO ADDRESS
         MVCL  R0,R14                   CLEAR THE WORK AREA
         LR    R1,R14                   RESTORE WORK AREA POINTER
&RCPSPN  SETC  '&SP'
         LR    R15,R13                  SAVE CALLER'S SAVE AREA ADDR
         LR    R13,R1                   LOAD EXT DUMMY SECTION ADDR
         AL    R13,&P.QCON              ADD OFFSET TO WORK AREA
         ST    R13,8(0,R15)             CHAIN SAVE
         ST    R15,4(0,R13)              AREAS TOGETHER
         USING &RCPWKCS&RCPWKDS,R13
         ST    R1,&P.XDS                STORE DUMMY SECTION ADDR IN    X
                                         MODULE COMMUNICATIONS AREA
         LA    R15,&P.MCA               STORE COMMUNICATIONS AREA ADDR
         ST    R15,0(0,R13)              IN WORD 1 OF SAVE AREA
         AIF   (&RCPSWS(3) EQ 0 AND '&ISA' EQ '').EXIT
&RCPSWS(3) SETA 1                       SET LIFO IN CASE ONLY ISA SPEC
&C       SETC  '&ISA'
         AIF   ('&ISA' NE '').TK
&C       SETC  '8192'
         AGO   .NK
.TK      AIF   ('&C'(K'&C,1) NE 'K').NK
&C       SETC  '&C'(1,K'&C-1)'*1024'
.NK      EJECT ,
***********************************************************************
**       INITIALIZE MODULE COMMUNICATIONS AREA WITH POINTERS         **
**       TO LIFO STACK AND LIFO GET/FREE ROUTINES                    **
***********************************************************************
         SPACE 1
         MVC   &P.A#GET,=A(#####GET)   MOVE LIFO GET AND FREE
         MVC   &P.A#FRE,=A(####FREE)    ROUTINE ADDRESSES TO MCA
         L     R15,=Q(#####ISA)        COMPUTE LIFO STACK
         AL    R15,&P.XDS               PSEUDO REGISTER OFFSET
         ST    R15,&P.#S                 AND INITIALIZE POINTERS
         ST    R15,&P.#N                  IN MODULE COMMUNICATIONS AREA
         L     R14,=A(&C)              LOAD SIZE OF INITIAL STACK AREA
         ST    R14,&P.#L               STORE THIS IN MCA
         ALR   R15,R14                  THEN COMPUTE STACK END ADDRESS
         ST    R15,&P.#E                 AND STORE THIS INTO MCA
         EJECT ,
***********************************************************************
**       LIFO STACK GET/FREE ROUTINES                                **
***********************************************************************
         SPACE 1
#####ISA DXD   CL(&C)                   DEFINE PSEUDO REGISTER FOR ISA
         SPACE 1
         PUSH  USING
         DROP  ,
         USING &P.MCA,R1                R1 POINTS TO MCA
#####GET RSECT ,                        LIFO GET ROUTINE
#####GET AMODE ANY
#####GET RMODE ANY
         USING #####GET,R15             R0 CONTAINS LENGTH NEEDED
         A     R0,&P.F7                 ROUND REQUEST UP TO
         N     R0,&P.F8                 A DOUBLEWORD BOUNDARY
         A     R0,&P.#N                 PT TO NEXT FREE LIFO SLOT
         CL    R0,&P.#E                 IF WE'VE GONE PAST THE END OF
         BH    &P.GA                    THE STACK, GIVE UP AND ABEND
         L     R15,&P.#N                PT TO ALLOCATED SLOT
         ST    R0,&P.#N                 SAVE ADDRESS OF NEXT SLOT
         LR    R1,R15                   MOVE SLOT POINTER
         BR    R14                      RETURN TO CALLER, R1 @ SLOT
*        ABEND 1000,DUMP                STACK TOO SMALL, USE ISA=
&P.GA    LA    R1,1000                  LOAD ABEND CODE
         O     R1,&P.X8                 TURN ON DUMP FLAG
         SVC   13                       ISSUE ABEND SVC
         SPACE 1
         ENTRY ####FREE                 LIFO FREE ROUTINE
         USING ####FREE,R15             R0 CONTAINS ADDRESS
####FREE CL    R0,&P.#S                 ENSURE THE ADDRESS
         BL    &P.FA                    TO BE FREE'ED
         CL    R0,&P.#E                 IS WITHIN THE BOUNDARIES
         BH    &P.FA                    OF THE CURRENT STACK ELEMENT
         A     R0,&P.F7                 FORCE AREA TO BE FREE'ED TO
         N     R0,&P.F8                 DOUBLEWORD BNDRY FOR NEXT GUY
         ST    R0,&P.#N                 SAVE @ NEXT FREE LIFO SLOT
         BR    R14                      RETURN TO CALLER
*        ABEND 1001,DUMP                INVALID AREA ADDRESS
&P.FA    LA    R1,1001                  LOAD ABEND CODE
         O     R1,&P.X8                 TURN ON DUMP FLAG
         SVC   13                       ISSUE ABEND SVC
         SPACE 1
         CNOP  0,4                      GET FULLWORD BOUNDARY
&P.F7    DC    F'7'                     CONSTANTS TO ROUND REQUEST UP
&P.F8    DC    F'-8'                    TO A DOUBLEWORD BOUNDARY
&P.X8    DC    X'80000000'              DUMP FLAG FOR ABEND
         POP   USING                    KILL ADDRESSABILITY
         SPACE 1
&SYSECT  CSECT ,                        RESUME MAIN PROGRAM CSECT
.EXIT    MEND  ,
