         MACRO
&NAME    GOIF  &SW,&ON=,&OFF=,&ONES=,&ZERO=,&MIXED=,&ANY=,&NOTZERO=,   X
               &NOTONE=,&NOTONES=,&BOTH=,&NONE=,&ALL=,&NOTALL=
.*********************************************************************
.*                                                                   *
.*     THIS MACRO TESTS A SWITCH OR SWITCHES AND BRANCHES IF A TEST  *
.*     IS SATISFIED. THE SWITCH(ES) MUST HAVE PREVIOUSLY BEEN        *
.*     DECLARED BY A DCLSW MACRO. AN INNER MACRO RCPLOCSW IS INVOKED *
.*     TO CHECK THIS OUT AND TO RETURN THE NAME OF THE SWITCH BYTE   *
.*     IN GLOBAL SETC VARIABLE &RCPDSW1. THE SWITCH BIT NAME IS      *
.*     RETURNED IN GLOBAL SETC &RCPDSW2. IF MORE THAN 1 SWITCH WAS   *
.*     SPECIFIED, THEY ARE ALL CONCATENATED WITH INTERVENING PLUS    *
.*     SIGNS. IN CASE A SWITCH WAS NOT DECLARED, RCPLOCSW ISSUES AN  *
.*     MNOTE AND SETS &RCPDSW1 TO NULL.                              *
.*                                                                   *
.*********************************************************************
         GBLA  &RCPDSW0                NO OF RETURNED SW BYTES
         GBLB  &RCPDSW3(20)            INVERT INDICATOR
         GBLB  &GOIFREL                USE RELATIVE
         GBLB  &STF(24)                #START/#STACK FLAGS
         GBLC  &RCPDSW1(20),&RCPDSW2(20)    BYTE NAMES AND BIT NAMES
         LCLC  &OP
         RCPLOCSW &SW                  CHECK AND LOCATE SWITCH BYTE
&OP      SETC  'J'                     ASSUME RELATIVE ADDR
         AIF   (&STF(19)).REL1         RELATIVE ADDRESSING
         AIF   (&GOIFREL).REL1         TEST OLD FLAG TOO
&OP      SETC  'B'                     SET FOR BASE REG USE
.REL1    ANOP  ,
         AIF   (&RCPDSW0 EQ 0).ERROR    NO SWS FOUND
         AIF   (&RCPDSW0 GT 1).GOIFM    MORE THAN ONE SW BYTE
         AIF   (N'&SW GT 1).GT1         BRANCH IF > 1 SWITCH
&NAME    TM    &RCPDSW1(1),&RCPDSW2(1)  TEST SWITCH
         AGO   .TON
.GT1     ANOP  ,
&NAME    TM    &RCPDSW1(1),&RCPDSW2(1)  TEST SWITCHES
.TON     AIF   ('&ON' NE '').ON
         AIF   ('&ONES' NE '').ONES
         AIF   ('&BOTH' NE '').BOTH
         AIF   ('&ALL' NE '').ALL
.TOFF    AIF   ('&OFF' NE '').OFF
         AIF   ('&ZERO' NE '').ZERO
         AIF   ('&NONE' NE '').NONE
.TMIX    AIF   ('&MIXED' NE '').MIX
.TANY    AIF   ('&ANY' NE '').ANY
.TNZ     AIF   ('&NOTZERO' NE '').NZ
.TNO     AIF   ('&NOTONE' NE '').NO
.TNOS    AIF   ('&NOTONES' NE '').NOS
         MEXIT ,
.ON      AIF   ('&ON'(1,1) EQ '(').ONR
         &OP.O &ON                      BRANCH IF ON
         AGO   .TOFF
.ONR     BOR   &ON(1)                   BRANCH IF ON
         AGO   .TOFF
.ONES    AIF   ('&ONES'(1,1) EQ '(').ONESR
         &OP.O &ONES                    BRANCH IF ONES
         AGO   .TOFF
.ONESR   BOR   &ONES(1)                 BRANCH IF ONES
         AGO   .TOFF
.BOTH    AIF   ('&BOTH'(1,1) EQ '(').BOTHR
         &OP.O &BOTH                    BRANCH IF BOTH ON
         AGO   .TOFF
.BOTHR   BOR   &BOTH(1)                 BRANCH IF BOTH ON
         AGO   .TOFF
.ALL     AIF   ('&ALL'(1,1) EQ '(').ALLR
         &OP.O &ALL                     BRANCH IF ALL ON
         AGO   .TOFF
.ALLR    BOR   &ALL(1)                  BRANCH IF ALL ON
         AGO   .TOFF
.OFF     AIF   ('&OFF'(1,1) EQ '(').OFFR
         &OP.Z &OFF                     BRANCH IF OFF
         AGO   .TMIX
.OFFR    BZR   &OFF(1)                  BRANCH IF OFF
         AGO   .TMIX
.ZERO    AIF   ('&ZERO'(1,1) EQ '(').ZEROR
         &OP.Z &ZERO                    BRANCH IF ZERO
         AGO   .TMIX
.ZEROR   BZR   &ZERO(1)                 BRANCH IF ZERO
         AGO   .TMIX
.NONE    AIF   ('&NONE'(1,1) EQ '(').NONER
         &OP.Z &NONE                    BRANCH IF NONE ON
         AGO   .TMIX
.NONER   BZR   &NONE(1)                 BRANCH IF NONE ON
         AGO   .TMIX
.MIX     AIF   ('&MIXED'(1,1) EQ '(').MIXR
         &OP.M &MIXED                   BRANCH IF MIXED
         AGO   .TANY
.MIXR    BMR   &MIXED(1)                BRANCH IF MIXED
         AGO   .TANY
.ANY     AIF   ('&ANY'(1,1) EQ '(').ANYR
         &OP.NZ &ANY                    BRANCH IF ANY ON
         AGO   .TNZ
.ANYR    BNZR  &ANY(1)                  BRANCH IF ANY ON
         AGO   .TNZ
.NZ      AIF   ('&NOTZERO'(1,1) EQ '(').NZR
         &OP.NZ &NOTZERO                BRANCH IF NOT ZERO
         AGO   .TNO
.NZR     BNZR  &NOTZERO(1)              BRANCH IF NOT ZERO
         AGO   .TNO
.NO      AIF   ('&NOTONE'(1,1) EQ '(').NOR
         &OP.NO &NOTONE                 BRANCH IF NOT ONE
         AGO   .EXIT
.NOR     BNOR  &NOTONE(1)               BRANCH IF NOT ONE
         AGO   .EXIT
.NOS     AIF   ('&NOTONES'(1,1) EQ '(').NOSR
         &OP.NO &NOTONES                BRANCH IF NOT ONES
         AGO   .EXIT
.NOSR    BNOR  &NOTONES(1)              BRANCH IF NOT ONES
         AGO   .EXIT
.GOIFM   ANOP  ,
         AIF   ('&NOTZERO' NE '').GOIFMX
&NAME    GOIFM ON=&ON&ALL&BOTH&ONES,NOTALL=&NOTALL&NOTONES&NOTONE,     X
               ANY=&ANY,OFF=&OFF&NONE,MIXED=&MIXED
         MEXIT ,
.GOIFMX  ANOP  ,
         MNOTE 8,'NOTZERO= IS NOT SUPPORTED FOR MORE THAN ONE SWITCH'
         MEXIT ,
.ERROR   AIF   ('&NAME' EQ '').EXIT
&NAME    DS    0H
.EXIT    MEND  ,
