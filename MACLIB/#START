         MACRO ,
&NAME    #START ,                       #START MACRO                   X
               &AMODE=,                 ADDRESSING MODE                X
               &APARS=5,                RESERVE 5 APAR SLOTS           X
               &BASE=,                  1 OR MORE BASE REGISTERS       X
               &BNDRY=,                 WHAT GETMAIN TO LOOK LIKE      X
               &CAPREG=,                REGISTER TO SAVE CAP WORD      X
               &CONSTANT=,              REQUEST A CONSTANT SECTION     X
               &CONPREF=,               REQUEST A LABELLED USING       X
               &COPY=NO,                GENERATE COPYRIGHT             X
               &COPYYR=,                COPYRIGHT YEAR                 X
               &CSECT=YES,              GENERATE A CSECT STATEMENT     X
               &ENTRY=YES,              GENERATE AN ENTRY STATEMENT    X
               &ENUC=,                  EXTENDED NUCLEUS NAME          X
               &EXTKEY=,                SVC EXECUTION KEY              X
               &ID=,                    GENERATE ID INFORMATION        X
               &ISA=,                   INITIAL STACK AREA SIZE        X
               &LEVEL=,                 MODULE LEVEL (SMP ID)          X
               &LINK=YES,               LINK USED 'BALR 14,15'         X
               &LOC=,                   WHERE TO GETMAIN FROM          X
               &OPSYN=YES,              USE #RELBR IF REQUIRED         X
               &PATCH=,                 PATCH AREA REQUIRED            X
               &PREFIX=,                PREFIX FOR GENERATED SYMBOLS   X
               &REG0=,                  REGISTER 0 TO BE SAVED         X
               &REG1=,                  REGISTER 1 TO BE SAVED         X
               &REGS64=NO,              RTN USES 64 BIT REGS           X
               &#REGS=BAL,              TYPE OF REGISTER EQUATES       X
               &RMODE=,                 RESIDENCY MODE                 X
               &RSECT=NO,               READ-ONLY CONTROL SECTION      X
               &SAVE=YES,               SAVE REGISTERS (YES/NO)        X
               &SP=,                    SUBPOOL FOR WORK DSECT         X
               &SPLEVEL=,               MVS LEVEL (1/2)                X
               &STORAGE=N,              USE STORAGE OR GETMAIN         X
               &SVAREA=YES,             SAVE AREA REQUIRED (YES/NO)    X
               &SVC=,                   ROUTINE IS/IS NOT AN SVC       X
               &USING=,                 AREAS TO BE MAPPED             X
               &WKCSECT=,               NAME OF WORK CSECT             X
               &WKDSECT=                NAME OF WORK DSECT
.*
.* DEFINE SYMBOLS NEEDED
.*
         GBLA  &STWAC                   COUNTER FOR DEFERED WA DEFINES
         GBLA  &#COPYSZ
         GBLB  &USINGRELATIVE           RELATIVE BASE
         GBLB  &STBEG                   START/BEGIN PRESENT
         GBLB  &STWA                    INDICATES CSECT HAS A WORK AREA
         GBLB  &STF(24)                 CONTROL FLAG BITS, AS FOLLOWS:
         GBLB  &GOIFREL                 USE RELATIVE
.*                                       (01) - PROC OPTION CODED
.*                                       (02) - MAIN OPTION CODED
.*                                       (03) - LIFO OPTION CODED
.*                                       (04) - WKCSECT OPTION CODED
.*                                       (05) - WKDSECT OPTION CODED
.*                                       (06) - #START HAS BEEN CODED
.*                                       (07) - ROUTINE IS AN SVC
.*                                       (08) - WORK FIELDS WANTED
.*                                       (09) - SVAREA=NO OPTION
.*                                       (10) - SAVE=YES OPTION
.*                                       (11) - RSECT=YES OPTION
.*                                       (12) - SVC=(YES,BRANCH)
.*                                       (13) - ENUC CAPPING
.*                                       (14) - PATCH AREA REQUEST
.*                                       (15) - MODID LABEL GENERATED
.*                                       (16) - CONSTANT SECTION
.*                                       (17) - STORAGE=YES
.*                                       (18) - EXTKEY=
.*                                       (19) - RELATIVE ADDR
.*                                       (20) - CONSTANT SECT
.*                                       (21) - LABELED USING  FOR
.*                                              CONSTANT CSECT
.*                                       (22) - 64 BIT REGS
.*                                       (23) - #BAKR USED
         GBLC  &#COPYYR
         GBLC  &STACREG                 CAPWORD SAVE REGISTER
         GBLC  &STAGREG                 GET/FREEMAIN FORMAT
         GBLC  &STAMODE                 MODULE'S CAPPED AMODE
         GBLC  &STAXKEY                 SVC EXECUTION KEY
         GBLC  &STISASZ                 LIFO ISA SIZE
         GBLC  &STLEVEL                 MODULE LEVEL
         GBLC  &STNAME                  MAIN CSECT NAME
         GBLC  &STPREF                  PREFIX CHARACTERS
         GBLC  &STSPN                   SUBPOOL NUMBER
         GBLC  &STWAD(1000)             WORK AREA DEFERED STACK
         GBLC  &STWANAM                 WORK AREA NAME
         GBLC  &SYSSPLV                 SPLEVEL
         GBLC  &STA_CONSTANT_SECTION    NAME OF CONSTANT SECTION
         GBLC  &STA_CONSTANT_BASE       BASE OF CONSTANT SECTION
         GBLC  &STA_CONSTANT_LABEL      LABELLED CSECT
         GBLC  &STRMODE                 RMODE USED
         GBLC  &STMODEA                 AMODE USED
         GBLB  &STAMODE31               AMODE 31 (#STACK)
         LCLA  &A,&B,&C,&D,&E,&Q        LOCAL
         LCLB  &F,&G,&H,&I,&J,&QQ,&R2,&R3,&R4,&RRREGS WORK
         LCLB  &CR2,&CR3,&CR4      FOR CONSTANT SECT REGS
         LCLC  &CB                 CONSTANT BASE
         LCLC  &K,&L,&M,&N,&O,&P,&W     SYMBOLS
.*
.* INITIALIZE SYMBOLS, SET UP PREFIX, PICK UP ALL OPERANDS
.*
&USINGRELATIVE SETB 0               DEFAULT NOT RELATIVE
&GOIFREL SETB  0
&STAXKEY SETC  '&EXTKEY'
&STLEVEL SETC  '&LEVEL'
&STMODEA SETC  ''
&STRMODE SETC  ''
         SPLEVEL TEST                   GET ORIGINAL SPLEVEL
&STAGREG SETC  'RU'                     GET/FREEMAIN FORMAT
         AIF   ('&LOC' EQ '').ST00100
&W       SETC  ',LOC=&LOC'
.ST00100 ANOP  ,
.*
&STWAC   SETA  1                        INITIALIZE WORK FIELD STACK
&STBEG   SETB  1                        START/BEGIN PRESENT
&STWA    SETB  0                        CLEAR ALL GLOBAL SYMBOLS
&STF(1)  SETB  0
&STF(2)  SETB  0
&STF(3)  SETB  0
&STF(4)  SETB  0
&STF(5)  SETB  0
&STF(6)  SETB  1                        FLAG TO SAY  #START
&STF(7)  SETB  0
&STF(9)  SETB  0
&STF(10) SETB  0
&STF(11) SETB  0
&STF(13) SETB  0
&STF(14) SETB  ('&PATCH' EQ 'YES' OR '&PATCH' EQ 'Y')
&STF(14) SETB  (&STF(14) OR ('&PATCH' EQ '' AND '&WKDSECT' NE ''))
&STF(17) SETB  ('&STORAGE'(1,1) EQ 'Y')
&STF(18) SETB  ('&STAXKEY' NE '')
&STF(19) SETB  ('&BASE' EQ 'REL' OR '&BASE' EQ 'RELATIVE' OR &STF(19))
&STF(22) SETB  ('&REGS64' EQ 'Y' OR '&REGS64' EQ 'YES')
&STF(23) SETB  0                    NOT #BAKR
         AIF   (NOT &STF(19)).NRBS
&USINGRELATIVE SETB 1               USING RELATIVE BASE
&GOIFREL SETB  1
.NRBS    ANOP   ,
         AIF   (&STF(21)).ST00110
&STA_CONSTANT_LABEL  SETC '&CONPREF'
&STF(21) SETB  ('&CONPREF' NE '')
.ST00110 ANOP  ,
&#COPYYR SETC  ''                       PASS YEAR TO #COPY
         AIF   ('&COPYYR' EQ '').ST00300
&#COPYYR SETC  '&COPYYR'                PASS YEAR TO #COPY
.ST00300 ANOP  ,
&STWANAM SETC  ''
&STAMODE SETC  ''
&STACREG SETC  '&CAPREG'
&QQ      SETB  ('&COPY' NE 'NO')        COPYRIGHT SWITCH
         #COPY SET                      SET COPYRIGHT LENGTH
.*
.*
         AIF   ('&NAME' EQ '').ST99010  ERROR - MISSING CSECT NAME
         AIF   ('&CSECT'(1,1) EQ 'N').ST00400
&STNAME  SETC  '&NAME'                  SAVE MAIN CSECT NAME
.ST00400 ANOP  ,
.*
         AIF   ('&ENUC' EQ '' OR '&SYSSPLV' NE '2').ST00500
&STNAME  SETC  '&ENUC'                  SAVE MAIN CSECT NAME
.ST00500 ANOP  ,
         AIF   ('&WKDSECT&WKCSECT' EQ '').ST00600
         AIF   ('&SAVE' NE 'YES').ST99040
         AIF   ('&SVAREA' NE 'YES').ST99050
.ST00600 ANOP  ,
.*
&K       SETC  '&STNAME.XXX'(1,3)
         AIF   ('&CSECT'(1,1) EQ 'Y').ST00700
&K       SETC  '&NAME.XXX'(1,3)
         AIF   ('&WKDSECT&WKCSECT' EQ '').ST00700
&K       SETC  '&WKDSECT&WKCSECT.XXX'(1,3)
.ST00700 ANOP  ,
&STF(12) SETB  ('&SVC' EQ '(YES,BRANCH)')
&G       SETB  ('&SVC' EQ 'YES' OR '&SVC' EQ '(YES)' OR &STF(12))
         AIF   ('&SVC' NE '').ST00800
&F       SETB  ('&K' EQ 'IGC' OR '&K' EQ 'IGG' OR '&K' EQ 'IGX')
.ST00800 ANOP  ,
&STF(7)  SETB  (&F OR &G)               SET SVC SWITCH
.*
         AIF   (NOT &STF(7)).ST01100
         AIF   ('&WKCSECT' EQ '').ST00900
         IHBERMAC 1020,WKCSECT,SVC
&J       SETB  1
.ST00900 ANOP  ,
         AIF   ('&BASE' EQ '' OR &STF(19)).ST01000
         IHBERMAC 1020,BASE,SVC
&J       SETB  1
.ST01000 ANOP  ,
         AIF   (&J).MEND
.*
.ST01100 ANOP  ,
         AIF   ('&PREFIX' EQ '').ST01300   NO PREFIX, CONTINUE
         AIF   (K'&PREFIX GT 3).ST01200    PREFIX NEEDS TO BE CUT
&STPREF  SETC  '&PREFIX'                ESTABLISH PREFIX
         AGO   .ST01400                 CONTINUE
.ST01200 ANOP  ,
&STPREF  SETC  '&PREFIX'(1,3)           TRUNCATE PREFIX
         AGO   .ST01400                 CONTINUE
.ST01300 ANOP  ,
&STPREF  SETC  '&K'                     SET PREFIX TO CSECT 3 CHAR
.ST01400 ANOP  ,
&P       SETC  '&STPREF'                MAKE PREFIX EASIER TO WORK WITH
.*
&STSPN   SETC  '253'                    SET DEFAULT SUBPOOL FOR SVC
         AIF   (&STF(7)).ST01500        USE SUBPOOL 253 FOR SVC
&STSPN   SETC  '1'                      SET DEFAULT SUBPOOL TO 1
.ST01500 ANOP  ,
         AIF   ('&SP' EQ '').ST01600    NO SUBPOOL CODED, CONTINUE
&STSPN   SETC  '&SP'                    PICK UP SUBPOOL
.ST01600 ANOP  ,
.*
&A       SETA  N'&SYSLIST               PICK UP NUMBER OF PARAMETERS
&B       SETA  0                        INDEX OF PARAMETER
.ST01700 ANOP  ,
&B       SETA  &B+1                     POINT TO NEXT PARAMETER
         AIF   (&B GT &A).ST02000       GOT ALL POSITIONAL PARAMETERS
&K       SETC  '&SYSLIST(&B)'           PICK UP PARMATER
         AIF   ('&K' NE 'PROC').ST01800 NOT PROC PARAMETER, CONT
&STF(1)  SETB  1                        INDICATE PROC PARAMETER
         AGO   .ST01700                 CONTINUE WITH NEXT PARAMETER
.ST01800 ANOP  ,
         AIF   ('&K' NE 'PROC(MAIN)').ST01900   NOT MAIN PARM, CONT
&STF(1)  SETB  1                        INDICATE PROC PARAMETER
&STF(2)  SETB  1                        INDICATE MAIN PARAMETER
         AGO   .ST01700                 CONTINUE WITH NEXT PARAMETER
.ST01900 ANOP  ,
         AIF   ('&K' NE 'LIFO').ST01700 NOT LIFO PARM, CONTINUE
&STF(3)  SETB  1                        INDICATE LIFO PARAMETER
         AGO   .ST01700                 CONTINUE  WITH NEXT PARAMETER
.ST02000 ANOP  ,
         AIF   ('&WKDSECT' EQ '').ST02100   NO WORK DSECT, CONTINUE
&STF(5)  SETB  1                        INDICATE WORK AREA IS A DSECT
&STWA    SETB  1                        INDICATE WORK AREA IS PRESENT
&STWANAM SETC  '&WKDSECT'               SAVE WORK AREA NAME
.ST02100 ANOP  ,
         AIF   ('&WKCSECT' EQ '').ST02200   NO WORK CSECT, CONTINUE
         AIF   (&STF(1)).ST99030        ERROR - PROC
         AIF   (&STF(5)).ST99020        ERROR - WKDSECT
&STF(4)  SETB  1                        INDICATE WORK AREA IS A CSECT
&STWA    SETB  1                        INDICATE WORK AREA IS PRESENT
&STWANAM SETC  '&WKCSECT'               SAVE WORK AREA NAME
.*
         AIF   ('&SP' EQ '').ST02200    NO SUBPOOL PARAMETER, CONTINUE
         IHBERMAC 1016,SP,WKCSECT
.*
.ST02200 ANOP  ,
.*       REGS64 ONLY VALID WITH PROC OR PROC,LIFO, BUT NOT
.*       PROC(MAIN)
         AIF   (&STF(22) AND (NOT &STF(1))).ST99090
         AIF   (&STF(22) AND &STF(2)).ST99090
.*
         AIF   ('&ISA' EQ '').ST02300   NO ISA PARM, CONTINUE
         AIF   (&STF(2) AND &STF(3)).ST02300   PROC(MAIN) AND LIFO?
         MNOTE 4,'ST1002I - ISA IGNORED WITHOUT PROC(MAIN) AND LIFO'
.ST02300 ANOP  ,
         AIF   (NOT &STF(1)).ST02400    NOT PROC OPTION, CONTINUE
         AIF   (&STF(5)).ST02400        WKDSECT OPTION, CONTINUE
&STWANAM SETC  '&P.WA'                  GENERATE WORK AREA NAME
&STWA    SETB  1                        INDICATE A WORK AREA PRESENT
&STF(5)  SETB  1                        INDICATE WKDSECT OPTION
.*
.* NOW START WITH PRELIMINARIES, ETC
.*
.ST02400 ANOP  ,
         AIF   ('&SPLEVEL' EQ '').ST02500
         AIF   ('&SPLEVEL' EQ '&SYSSPLV').ST02500
         SPLEVEL SET=&SPLEVEL
.*
.ST02500 ANOP  ,
         AIF   ('&RSECT'(1,1) EQ 'Y').ST02700
         AIF   ('&CSECT'(1,1) EQ 'N').ST02600
&STNAME  CSECT ,                        #START MACRO
         AIF   (T'&CONSTANT EQ 'O').ST02800
&STF(20) SETB  1                   SET FLAG FOR CONSTANT SECTION
&STA_CONSTANT_SECTION SETC '$CN'.'&STNAME'(4,*)
&STA_CONSTANT_BASE SETC '&CONSTANT'
&STNAME  CSECT ,                        #START MACRO
         AGO   .ST02800
.ST02600 ANOP  ,
&NAME    DS    0D                       #START MACRO
         AIF   ('&ENTRY'(1,1) EQ 'N').ST02800
         ENTRY &NAME
         AGO   .ST02800
.ST02700 ANOP  ,
&STNAME  RSECT ,                        #START MACRO
         AIF   (T'&CONSTANT EQ 'O').ST02800
&STF(20) SETB  1                   SET FLAG FOR CONSTANT SECTION
&STA_CONSTANT_SECTION SETC '$CN'.'&STNAME'(4,*)
&STA_CONSTANT_BASE SETC '&CONSTANT'
&STNAME  RSECT ,                        #START MACRO
&STF(11) SETB  1
.*
.ST02800 ANOP  ,
&CB      SETC  '&STA_CONSTANT_BASE'
         AIF   ('&ENUC' EQ '').ST03200
         AIF   ('&AMODE' EQ '').ST02900
         IHBERMAC 1016,AMODE,ENUC
.ST02900 ANOP  ,
         AIF   ('&RMODE' EQ '').ST03000
         IHBERMAC 1016,RMODE,ENUC
.ST03000 ANOP  ,
&STNAME  AMODE 31
&STNAME  RMODE ANY
&STMODEA SETC  '31'
&STRMODE SETC  'ANY'
         AIF   ('&SYSSPLV' NE '2').ST03600
&STF(13) SETB  1                        FLAG FOR BSM RETURN
         SPACE 1
&NAME    RSECT ,                        FRONT-END MODULE FOR CODE
&NAME    AMODE ANY                      TO RESIDE IN EXTENDED NUCLEUS
&NAME    RMODE 24                       WHICH IS BRANCH-ENTERABLE
         L     R15,8(0,R15)             LOAD ADDRESS OF REAL MODULE
         BSM   R14,R15                  BRANCH AND HANDLE AMODE
         DC    H'0'
         DC    A(&STNAME+X'80000000')   ADDRESS OF REAL MODULE
         SPACE 1
         AIF   (&STF(11)).ST03100
&STNAME  CSECT ,                        RESUME MAIN CSECT
         AGO   .ST03600
.ST03100 ANOP  ,
&STNAME  RSECT ,                        RESUME MAIN RSECT
         AGO   .ST03600
.ST03200 ANOP  ,
         AIF   ('&AMODE' EQ '').ST03400
         AIF   ('&AMODE' EQ 'CAP24' OR '&AMODE' EQ 'CAP31').ST03300
&STAMODE31 SETB (('&AMODE' EQ 'ANY') OR ('&AMODE' EQ '31'))
&STNAME  AMODE &AMODE
&STMODEA SETC  '&AMODE'
         AGO   .ST03400
.ST03300 ANOP  ,
&STAMODE SETC  '&AMODE'(4,2)            SAVE CAPPED AMODE
&STAMODE31 SETB ('&STAMODE' EQ '31')
&STNAME  AMODE ANY
&STMODEA SETC  'ANY'
         AIF   ('&RMODE' NE '').ST03500
&STNAME  RMODE 24
&STRMODE SETC  '24'
         AGO   .ST03600
.ST03400 ANOP  ,
         AIF   ('&RMODE' EQ '').ST03600
.ST03500 ANOP  ,
&STNAME  RMODE &RMODE
&STRMODE SETC  '&RMODE'
.ST03600 ANOP  ,
         #REGS TYPE=&#REGS
         AIF   (&STF(7)).ST07900        GO TO SVC SECTION
.*
         SPACE 1
         AIF   ('&ID' EQ 'YES').ST03700
         AIF   ('&ID' EQ 'NO').ST04400
         AIF   ('&CSECT'(1,1) NE 'N').ST03700
         J     *+14                     SKIP SUB-ROUTINE NAME
         DC    AL1(8)                   LENGTH OF SUB-ROUTINE NAME
         DC    CL8'&NAME'               SUB-ROUTINE NAME
*
         AGO   .ST04400
.ST03700 ANOP  ,
&Q       SETA  30+&#COPYSZ*&QQ
         AIF   ('&LEVEL' EQ '').ST03800
&Q       SETA  &Q+8                     ALLOW FOR LEVEL
.ST03800 ANOP  ,
         AIF   ('&APARS' EQ '').ST03900
&Q       SETA  &Q+(&APARS*4)            ALLOW FOR APARS
.ST03900 ANOP  ,
         B     &Q.(0,R15)               BRANCH AROUND PROGRAM ID
*
&Q       SETA  &Q-5-&#COPYSZ*&QQ
         DC    AL1(&Q)                  LENGTH OF PROGRAM ID
         AIF   (&STF(15)).ST04000       BIF LABEL GENERATED
&P.MODID DC    CL8'&NAME '              MODULE NAME
&STF(15) SETB  1                        SET LABEL GENERATED
         AGO   .ST04100                 GEN REST OF MODID
.ST04000 ANOP  ,
         DC    CL8'&NAME '              MODULE NAME
.ST04100 ANOP  ,
         DC    CL8' &SYSTIME '          TIME OF ASSEMBLY
         DC    CL9'&SYSDATC'            DATE OF ASSEMBLY
         AIF   ('&LEVEL' EQ '').ST04200
         DC    CL8'&LEVEL'              MODULE LEVEL
.*
.ST04200 ANOP  ,
         AIF   ('&APARS' EQ '').ST04300
         DC    &APARS.CL4' '            APAR SLOTS
.*
.ST04300 ANOP  ,
         AIF   ('&COPY' EQ 'NO').ST04400
         #COPY GEN                      COPYRIGHT NOTICE
*
.ST04400 ANOP  ,
         AIF   ('&SAVE' NE 'YES').ST04500
         STM   R14,R12,12(R13)          SAVE CALLER'S REGISTERS
&STF(10) SETB  1
.*
.ST04500 ANOP  ,
         AIF   (NOT &STF(19)).ST04510 RELATIVE BASE
         #RELBR OPSYN=&OPSYN
.ST04510 ANOP  ,
         AIF   (NOT &STF(20)).ST04520 NOT CONSTANT
&CR2     SETB  (&CR2 OR '&CB' EQ '2' OR '&CB' EQ 'R2')
&CR3     SETB  (&CR3 OR '&CB' EQ '3' OR '&CB' EQ 'R3')
&CR4     SETB  (&CR4 OR '&CB' EQ '4' OR '&CB' EQ 'R4')
         #CON  #START
&STA_CONSTANT_LABEL USING &STA_CONSTANT_SECTION,&STA_CONSTANT_BASE
         #RBL  &STA_CONSTANT_BASE,&STA_CONSTANT_SECTION
.ST04520 ANOP  ,
         AIF   (&STF(19)).ST05500 RELATIVE BASE
         AIF   ('&BASE' NE '').ST04800   BASE SPECIFIED, CONTINUE
.*
         AIF   (&STF(1) OR &STF(3) OR &STF(4) OR &STF(5)).ST04600
         AGO   .ST05500                 BASE WILL BE R13 (LATER)
.ST04600 ANOP  ,
         AIF   ('&LINK' EQ 'NO').ST04700 'BALR 14,15'?
         LA    R12,0(0,R15)             LOAD BASE REGISTER WITH EPA
         USING &NAME,R12
         AGO   .ST05500                 CONTINUE
.ST04700 ANOP  ,
         BALR  R12,0                    GET
&P.BASE  DS    0H                       . BASE
         USING &P.BASE,R12              . REGISTER
         AGO   .ST05500                 CONTINUE
.*
.ST04800 ANOP  ,
         AIF   ('&LINK' EQ 'NO').ST04900 'BALR 14,15'?
         LA    &BASE(1),0(0,R15)        LOAD BASE REGISTER WITH EPA
         AIF   ('&BASE'(1,1) EQ '(').ST05100
         USING &NAME,&BASE
         AGO   .ST05000                 CONTINUE
.ST04900 ANOP  ,
         BALR  &BASE(1),0               GET
&P.BASE  DS    0H                       . BASE
         AIF   ('&BASE'(1,1) EQ '(').ST05100
         USING &P.BASE,&BASE            . REGISTER
.ST05000 ANOP  ,
&R2      SETB  (&R2 OR '&BASE' EQ '2' OR '&BASE' EQ 'R2')
&R3      SETB  (&R3 OR '&BASE' EQ '3' OR '&BASE' EQ 'R3')
&R4      SETB  (&R4 OR '&BASE' EQ '4' OR '&BASE' EQ 'R4')
         AGO   .ST05500                 ONLY ONE BASE REG
.ST05100 ANOP  ,
&K       SETC  '&BASE'(2,K'&BASE-2)     REMOVE PARENS
         AIF   ('&LINK' EQ 'NO').ST05200 'BALR 14,15'?
         USING &NAME,&K
         AGO   .ST05300                 CONTINUE
.ST05200 ANOP  ,
         USING &P.BASE,&K
.ST05300 ANOP  ,
&A       SETA  1
.ST05400 ANOP  ,
&R2      SETB  (&R2 OR '&BASE(&A)' EQ '2' OR '&BASE(&A)' EQ 'R2')
&R3      SETB  (&R3 OR '&BASE(&A)' EQ '3' OR '&BASE(&A)' EQ 'R3')
&R4      SETB  (&R4 OR '&BASE(&A)' EQ '4' OR '&BASE(&A)' EQ 'R4')
&A       SETA  &A+1
         AIF   ('&BASE(&A)' EQ '').ST05500   NO MORE, CONTINUE
         LA    &BASE(&A),2048(0,&BASE(&A-1))
         LA    &BASE(&A),2048(0,&BASE(&A))
         AGO   .ST05400
.*
.ST05500 ANOP  ,
         AIF   (&STF(1) OR &STF(3) OR &STF(4) OR &STF(5)).ST05900
         AIF   ('&SVAREA' NE 'YES').ST05800
.*
.* FOLLOWING IS FOR NO FRILLS INLINE SAVE AREA
.*
         LR    R14,R13                  SAVE CALLERS SAVE AREA ADDRESS
         CNOP  0,4
         LA    R13,*+8-&NAME.(0,R15)    POINT TO SAVE AREA
         B     72(0,R13)                BR AROUND SAVE AREA
         AIF   (&STF(19)).ST05600  BASE IS RELATIVE
         AIF   ('&BASE' NE '').ST05600
         USING *,R13                    ADDRESSABILITY
.ST05600 ANOP  ,
&K       SETC  ''
         AIF   ('&STAMODE' EQ '').ST05700
&K       SETC  '&P.CAPWD'
.ST05700 ANOP  ,
&K       DC    18F'0'                   SAVE AREA
         ST    R14,4(0,R13)             CHAIN SAVE
         ST    R13,8(0,R14)             AREAS TOGETHER
         AGO   .ST07600                 CONTINUE
.*
.* FOLLOWING IS FOR SVAREA=NO OPTION
.*
.ST05800 ANOP  ,
&STF(9)  SETB  1                        REMEMBER FOR #STOP
         AIF   ('&BASE' NE '').ST07600
         USING &NAME,R15                ADDRESSABILITY
         AGO   .ST07600                 CONTINUE
.*
.* FOLLOWING IS FOR WKCSECT OPTION
.*
.ST05900 ANOP  ,
         AIF   (&STF(1) OR &STF(5)).ST06000   PROC OR WKDSECT, CONT
         LR    R15,R13                  SAVE CALLER'S SAVE AREA ADRRESS
         AIF   (NOT &STF(19)).ST05910 RELATIVE BRANCHING?
         #RBL  R13,&WKCSECT        LOAD ADDRESS OF SAVE
         AGO   .ST05920
.ST05910 ANOP  ,
         L     R13,=A(&WKCSECT)         AND PICK UP ADDRESS OF NEW ONE
.ST05920 ANOP  ,
         USING &WKCSECT,R13             ESTABLISH ADDRESSABILITY
         ST    R15,4(0,R13)             CHAIN SAVE
         ST    R13,8(0,R15)             AREAS TOGETHER
         XC    &P.RCODE,&P.RCODE        CLEAR RETURN CODE FIELD
         AGO   .ST07600                 CONTINUE
.*
.* FOLLOWING IS FOR WKDSECT OPTION WHEN NO PROC(MAIN) OR PROC OPTIONS
.*
.ST06000 ANOP  ,
         AIF   (&STF(1) OR &STF(2)).ST06300   PROC OR MAIN, CONTINUE
&RRREGS  SETB  1                        REGS WILL BE ALTERED
         AIF   (NOT &STF(18)).ST06050
         IPK   ,                        GET CURRENT PROTECT KEY
         LR    R4,R2                    COPY TO TEMPORARY REGISTER
         MNOTE '         MODESET EXTKEY=&STAXKEY'
         MODESET EXTKEY=&STAXKEY
.ST06050 ANOP  ,
         AIF   (&STF(17)).ST06100
         MNOTE '         GETMAIN &STAGREG,LV=&P.WALEN&W,SP=&STSPN'
         GETMAIN &STAGREG,LV=&P.WALEN,LOC=&LOC,SP=&STSPN,BNDRY=&BNDRY
         AGO   .ST06200
.ST06100 ANOP  ,
.*       ADD SUPPORT FOR CALLRKY TO HANDLE SP=230 PROPERLY
         MNOTE '         STORAGE OBTAIN,LENGTH=&P.WALEN,LOC=&LOC,SP=&STX
               SPN,BNDRY=&BNDRY,CALLRKY=YES'
         STORAGE OBTAIN,LENGTH=&P.WALEN,LOC=&LOC,SP=&STSPN,            X
               BNDRY=&BNDRY,CALLRKY=YES
.ST06200 ANOP  ,
.*       REMOVE USE OF R2 AS PART OF AR MODE SUPPORT
         ST    R1,8(0,R13)              CHAIN TO PREVIOUS
         LR    R0,R1                    R0 -> WORK AREA
         #RBL  R1,&P.WALEN              R1 = LENGTH OF WORK ARE
         SR    R15,R15                  R15 HAS PAD BYTE & ZERO LENGTH
         MVCL  R0,R14                   CLEAR WORK AREA
         L     R1,8(0,R13)              R1 -> WORK AREA
         ST    R13,4(0,R1)              BACK CHAIN SAVE AREA
         LR    R13,R1                   PT TO WORK AREA AND SAVE AREA
         USING &WKDSECT,R13             ESTABLISH ADDRESSABILITY TO IT
         AGO   .ST07600                 CONTINUE
.*
.* FOLLOWING IS FOR PROC OPTION WITHOUT MAIN OR LIFO OPTION
.*
.ST06300 ANOP  ,
&N       SETC  '&STWANAM'               PICK UP WORK AREA NAME
.ST06400 ANOP  ,
         AIF   (&STF(2) OR &STF(3)).ST06500   MAIN OR LIFO, CONTINUE
         L     R15,0(0,R13)             PT TO COMMUNICATIONS AREA
         L     R15,&P.#O-&P.MCA(0,R15)  PT TO EXTERNAL DUMMY SECTION
         #RLIF R1,&P.QCON               GET OFFSET TO WORK AREA
         AR    R15,R1                   GET OFFSET TO WORK AREA
         ST    R15,8(0,R13)             CHAIN SAVE AREAS
         ST    R13,4(0,R15)             AREAS TOGETHER
         MVC   0(4,R15),0(R13)          COPY POINTER TO COMM AREA
         LR    R13,R15                  PT TO WORK AREA AND SAVE AREA
         USING &N,R13                   ESTABLISH ADDRESSABILITY TO IT
         XC    &P.RCODE,&P.RCODE        CLEAR RETURN CODE FIELD
         AIF   (NOT &STF(22)).ST06450   NOT REGS64
         STMH  R0,R12,&P.HISAVE         SAVE HIGH WORDS
.ST06450 ANOP  ,
         AGO   .ST07600                 CONTINUE
.*
.* FOLLOWING IS FOR PROC(MAIN) OPTION, WHEN NO LIFO OPTION
.*
.ST06500 ANOP  ,
         AIF   (&STF(3)).ST06900        LIFO OPTION, CONTINUE
         AIF   (NOT &STF(18)).ST06600
         IPK   ,                        GET CURRENT PROTECT KEY
         LR    R4,R2                    COPY TO TEMPORARY REGISTER
         MNOTE '         MODESET EXTKEY=&STAXKEY'
         MODESET EXTKEY=&STAXKEY
.ST06600 ANOP  ,
&RRREGS  SETB  1                        REGS WILL BE ALTERED
         AIF   (&R2).ST99060            REGISTER 2 NOT SUPPORTED BASE
         AIF   (&R3).ST99070            REGISTER 3 NOT SUPPORTED BASE
         AIF   (&R4).ST99080            REGISTER 4 NOT SUPPORTED BASE
         AIF   (&CR2).ST99060           REGISTER 2 NOT SUPPORTED BASE
         AIF   (&CR3).ST99070           REGISTER 3 NOT SUPPORTED BASE
         AIF   (&CR4).ST99080           REGISTER 4 NOT SUPPORTED BASE
         #RLIF R3,&P.GSIZE              R0 HAS LENGTH OF WORK AREA CXD
         AIF   (&STF(17)).ST06700
         MNOTE '         GETMAIN &STAGREG,LV=(R3)&W,SP=&STSPN,BNDRY=PAGX
               E'
         GETMAIN &STAGREG,LV=(R3),LOC=&LOC,SP=&STSPN,BNDRY=PAGE
         AGO   .ST06800
.ST06700 ANOP  ,
.*       ADD SUPPORT FOR CALLRKY TO HANDLE SP=230 PROPERLY
         MNOTE '         STORAGE OBTAIN,LENGTH=(R3),LOC=&LOC,SP=&STSPN,X
               BNDRY=PAGE,CALLRKY=YES'
         STORAGE OBTAIN,LENGTH=(R3),LOC=&LOC,SP=&STSPN,BNDRY=PAGE,     X
               CALLRKY=YES
.ST06800 ANOP  ,
.*       REMOVE USE OF R2 AS PART OF AR MODE SUPPORT
         ST    R1,8(0,R13)              CHAIN TO PREVIOUS
         LR    R0,R1                    R0 -> WORK AREA
         LR    R1,R3                    R1 = WORK AREA LENGTH
         SR    R15,R15                  R15 HAS PAD BYTE & ZERO LENGTH
         MVCL  R0,R14                   CLEAR WORK AREA
         L     R1,8(0,R13)              R1 -> WORK AREA
         LR    R15,R13                  SAVE CALLER'S SAVE AREA ADDRESS
         LR    R13,R1                   PT TO EXTERNAL DUMMY SECTION @
         #RLIF R14,&P.QCON              PICK
         AR    R13,R14                  PT TO WORK AREA
         ST    R15,4(0,R13)             BACK CHAIN SAVE AREA
         USING &N,R13                   ESTABLISH ADDRESSABILITY TO IT
         XC    &P.RCODE,&P.RCODE        CLEAR RETURN CODE FIELD
         ST    R1,&P.#O                 STORE DUMMY SECTION @ IN MCA
         LA    R15,&P.MCA               PT TO MCA
         ST    R15,0(0,R13)             STORE IT IN WORD 1 OF SAVE AREA
         AGO   .ST07600                 CONTINUE
.*
.* FOLLOWING IS FOR PROC AND LIFO OPTIONS, WITHOUT MAIN OPTION
.*
.ST06900 ANOP  ,
         AIF   (&STF(2)).ST07000        MAIN OPTION, CONTINUE
&RRREGS  SETB  1                        REGS WILL BE ALTERED
.*       REMOVE USE OF R2 AS PART OF AR MODE SUPPORT
         #RBL  R3,&P.WALEN              R3 = LENGTH OF WORK
         LR    R0,R3                    R0 TOO
         L     R1,0(R13)                PT TO MCA
         L     R15,&P.#GET-&P.MCA(R1) PT TO LIFO GET ROUTINE
         BALR  R14,R15                  GET WORK AREA FROM LIFO STACK
         ST    R1,8(R13)                CHAIN SAVE AREA
         LR    R0,R1                    R0 -> WORK AREA
         LR    R1,R3                    R1 = WORK AREA LENGTH
         SR    R15,R15                  R15 HAS PAD BYTE & ZERO LENGTH
         MVCL  R0,R14                   CLEAR WORK AREA
         L     R1,8(R13)                R1 -> WORK AREA
         ST    R13,4(R1)                BACK CHAIN SAVE AREA
         L     R0,0(R13)                PROPOGATE MCA ADDRESS
         ST    R0,0(R1)                 .
         AIF   ('&SAVE' NE 'YES').ST06990 SKIP IF SAVE=NO
         AIF   ('&SVAREA' NE 'YES').ST06990
         AIF   (NOT &RRREGS).ST06990
.*
.* DELAY RELOADING R13 AND MAPPING IT ...
.*
         AIF   (NOT &STF(18)).ST06975
         ST    R4,&P.IPK             SAVE ORIGINAL PROTECT KEY
.ST06975 ANOP  ,
         LM    R14,R4,12(R13)         RESTORE REGISTERS
         L     R13,8(R13)             R1 -> NEW WORK AREA
         USING &N,R13            ESTABLISH ADDRESSABILITY TO IT
         AIF   (NOT &STF(22)).ST06950   NOT REGS64
         STMH  R0,R12,&P.HISAVE         SAVE HIGH WORDS
.ST06950 ANOP  ,
         AGO   .ST07750               CONTINUE
.*
.ST06990 ANOP  ,
         LR    R13,R1                   PT TO WORK AREA
         USING &N,R13                   ESTABLISH ADDRESSABILITY TO IT
         AIF   (NOT &STF(22)).ST06993   NOT REGS64
         STMH  R0,R12,&P.HISAVE         SAVE HIGH WORDS
.ST06993 ANOP  ,
         AIF   (NOT &STF(18)).ST06996
         ST    R4,&P.IPK             SAVE ORIGINAL PROTECT KEY
.ST06996 ANOP  ,
         AGO   .ST09900               CONTINUE
.*
.* AND NOW FOR THE FINALE, THIS IS FOR PROC, MAIN, AND LIFO OPTIONS
.*
.ST07000 ANOP  ,
&RRREGS  SETB  1                        REGS WILL BE ALTERED
&STISASZ SETC  '16*1024'                SET DEFAULT ISA SIZE
         AIF   ('&ISA' EQ '').ST07200   NO ISA PARAMETER, CONTINUE
         AIF   ('&ISA'(K'&ISA,1) EQ 'K').ST07100   ISA SIZE IS IN K
&STISASZ SETC  '&ISA'                   PICK UP ISA SIZE
         AGO   .ST07200                 CONTINUE
.ST07100 ANOP  ,
&STISASZ SETC  '&ISA'(1,K'&ISA-1)'*1024' CONVERT K TO 1024 BYTES
.ST07200 ANOP  ,
         AIF   (NOT &STF(18)).ST07300
         IPK   ,                        GET CURRENT PROTECT KEY
         LR    R4,R2                    COPY TO TEMPORARY REGISTER
         MNOTE '         MODESET EXTKEY=&STAXKEY'
         MODESET EXTKEY=&STAXKEY
.ST07300 ANOP  ,
         AIF   (&R2).ST99060            R2 USED ? YES, BAD BASE
         AIF   (&R3).ST99070            R3 USED ? YES, BAD BASE
         AIF   (&R4).ST99080            R4 USED ? YES, BAD BASE
         AIF   (&CR2).ST99060           R2 USED ? YES, BAD BASE
         AIF   (&CR3).ST99070           R3 USED ? YES, BAD BASE
         AIF   (&CR4).ST99080           R4 USED ? YES, BAD BASE
         #RLIF R3,&P.GSIZE              R3 HAS LENGTH OF WORK AREA
         AIF   (&STF(17)).ST07400
         MNOTE '         GETMAIN &STAGREG,LV=(R3)&W,SP=&STSPN,BNDRY=PAGX
               E'
         GETMAIN &STAGREG,LV=(R3),LOC=&LOC,SP=&STSPN,BNDRY=PAGE
         AGO   .ST07500
.ST07400 ANOP  ,
.*       ADD SUPPORT FOR CALLRKY TO HANDLE SP=230 PROPERLY
         MNOTE '         STORAGE OBTAIN,LENGTH=(R3),LOC=&LOC,SP=&STSPN,X
               BNDRY=PAGE,CALLRKY=YES'
         STORAGE OBTAIN,LENGTH=(R3),LOC=&LOC,SP=&STSPN,BNDRY=PAGE,     X
               CALLRKY=YES
.ST07500 ANOP  ,
.*       REMOVE USE OF R2 AS PART OF AR MODE SUPPORT
         ST    R1,8(0,R13)              CHAIN SAVE AREA
         LR    R0,R1                    R0 -> WORK AREA
         LR    R1,R3                    R1 = WORK AREA LENGTH
         SR    R15,R15                  R15 HAS PAD BYTE & ZERO LENGTH
         MVCL  R0,R14                   CLEAR WORK AREA
         L     R1,8(0,R13)              R1 -> WORK AREA
         ST    R13,4(0,R1)              BACK CHAIN SAVE AREA
         LR    R13,R1                   LOAD WORK AREA ADDRESS
         USING &N,R13                   ESTABLISH ADDRESSABILITY TO IT
*
* INITIALIZE MODULE COMMUNICATIONS AREA WITH POINTERS TO LIFO STACK
* AND LIFO GET/FREE ROUTINES
*
         ST    R1,&P.#O                 STORE DYNAMIC STORAGE ADDRESS
         AIF   (&STF(19)).ST07510       IN RELATIVE MODE
         A     R1,=A(&P.WALEN)          DETERMINE STACK ORIGIN
         AGO   .ST07520
.ST07510 ANOP  ,
         #RBL  R1,&P.WALEN
         A     R1,&P.#O                 DETERMINE STACK ORIGIN
.ST07520 ANOP  ,
         ST    R1,&P.#S                 STACK ORIGIN POINTER
         ST    R1,&P.#N                 CURRENT STACK POINTER
         LA    R15,&P.MCA               PT TO MCA
         ST    R15,0(0,R13)             STORE IN WORD 1 OF SAVE AREA
         #RLIF R14,&P.GSIZE             LOAD SIZE OF INITIAL STACK AREA
         AR    R14,R13                  COMPUTE STACK END ADDRESS
         ST    R14,&P.#E                STORE IT INTO MCA
         AIF   (&STF(19)).ST07530
         MVC   &P.#GET(8),=V(#####GET,####FREE)
         AGO   .ST07540
.ST07530 ANOP  ,
         CNOP  0,4
         BRAS  R14,*+12            GET ADDRESS OF VCONS
         DC    V(#####GET,####FREE)
         MVC   &P.#GET(8),0(R14)   MOVE VCONS TO SAVE
.ST07540 ANOP  ,
.*
.* RESTORE REGISTERS WHICH HAVE BEEN CORRUPTED
.*
.ST07600 ANOP  ,
         AIF   (NOT &STF(18)).ST07700
         ST    R4,&P.IPK                SAVE ORIGINAL PROTECT KEY
.ST07700 ANOP  ,
         AIF   ('&SAVE' NE 'YES').ST09900 SKIP IF SAVE=NO SPECIFIED
         AIF   ('&SVAREA' NE 'YES').ST09900
         AIF   (NOT &RRREGS).ST09900
         L     R1,4(0,R13)              PT TO CALLER'S SAVE AREA
         LM    R14,R4,12(R1)            RESTORE REGISTERS
.ST07750 ANOP  ,
         AIF   (&CR2).ST99060           REGISTER 2 NOT SUPPORTED
         AIF   (&CR3).ST99070           REGISTER 3 NOT SUPPORTED
         AIF   (&CR4).ST99080           REGISTER 4 NOT SUPPORTED
.*
.* RESYNCH BASE REGISTERS R2 OR R3 NEEDED ?
.*
         AIF   (NOT (&R2 OR &R3 OR &R4)).ST09900
.*
         LA    &BASE(1),0(,R15)         SET BASE REGISTER AGAIN
&A       SETA  2
.ST07800 ANOP  ,
         AIF   ('&BASE(&A)' EQ '').ST09900   NO MORE, CONTINUE
         LA    &BASE(&A),2048(0,&BASE(&A-1))
         LA    &BASE(&A),2048(0,&BASE(&A))
&A       SETA  &A+1
         AGO   .ST07800
.*
.*       SVC LINKAGE IS GENERATED HERE
.*
.ST07900 ANOP  ,
***********************************************************************
*                                                                     *
         AIF   (&G).ST08000
*        THE 'SVC' OPTION OF #START HAS BEEN DEFAULTED TO             *
*        FOR THIS CSECT NAME.  (CODE 'SVC=NO' TO SUPPRESS IT).        *
         AGO   .ST08100
.ST08000 ANOP  ,
*        THE 'SVC' OPTION OF #START HAS BEEN SELECTED                 *
.ST08100 ANOP  ,
*                                                                     *
***********************************************************************
*                                                                     *
*    THE PROLOG AND EPILOG CODE WILL BE GENERATED ACCORDING TO MVS    *
*    SVC LINKAGE STANDARDS.  WHEN THE SVC GETS CONTROL THE            *
*    REGISTERS ARE PRE-SET IN A DIFFERENT FASHION THAN FOR NORMAL     *
*    LINKAGE.  REGS 6 AND 15 DIFFER DEPENDING ON TYPE OF ENTRY:       *
*    CASE (A) IS FOR TYPES 1,2,3,6, AND THE FIRST LOAD OF A TYPE      *
*    4.  CASE (B) REFERS TO THE SUBSEQUENT LOADS OF A TYPE-4 SVC      *
*    (ENTERED VIA XCTL).                                              *
*                                                                     *
*          0,1   SAME INFO AS WHEN THE SVC WAS ISSUED                 *
*          2     UNPREDICTABLE                                        *
*          3     ADDRESS OF THE CVT                                   *
*          4     ADDRESS OF THE CURRENT TCB                           *
*          5     ADDRESS OF THE CURRENT REQUEST BLOCK (RB)            *
*          6     (A) - ENTRY POINT ADDRESS OF THE SVC ROUTINE         *
*                (B) - UNPREDICTABLE                                  *
*          7     ADDRESS OF THE CURRENT ASCB                          *
*          8-12  UNPREDICTABLE                                        *
*          13    SAME INFO AS WHEN THE SVC WAS ISSUED (SEE BELOW)     *
*          14    RETURN ADDRESS                                       *
*          15    (A) - SAME INFO AS WHEN THE SVC WAS ISSUED           *
*                (B) - ENTRY POINT ADDRESS OF THE SVC ROUTINE         *
*                                                                     *
*   **NOTE**  REGISTER 13 MAY OR MAY NOT POINT TO A SAVE AREA.  IN    *
*             ANY CASE, SVC ROUTINES MUST NEVER ATTEMPT TO SAVE       *
*             REGISTERS THERE BECAUSE (1) THE SAVE AREA MAY BE IN     *
*             USE ALREADY AND (2) THE SVC RUNS IN KEY ZERO AND        *
*             COULD OVERLAY DATA.  THE SYSTEM HAS SAVED ALL THE       *
*             CALLERS REGISTERS FOR YOU, AND WILL RESTORE ALL         *
*             EXCEPT R0, R1, AND R15.                                 *
*                                                                     *
*    WHEN THE PROLOG IS COMPLETE, ALL THE REGISTERS WILL BE LOADED    *
*    AS DESCRIBED ABOVE, EXCEPT FOR REGISTERS 12 AND 13.              *
*    REGISTER 12 WILL BE SET UP AS THE BASE REGISTER FOR THE MODULE.  *
         AIF   (NOT &STWA).ST08200
*    REGISTER 13 WILL POINT TO THE GETMAINED SAVE/WORK AREA.          *
         AGO   .ST08300
.ST08200 ANOP  ,
*    REGISTER 13 WILL BE SET TO ZEROS.                                *
.ST08300 ANOP  ,
         AIF   (NOT &STWA).ST08400
         AIF   (K'&NAME GT 6 OR &STF(12)).ST08400
*                                                                     *
*   THE CODE GENERATED HERE USES SVC-TYPE GETMAIN/FREEMAIN MACROS.    *
*   IT CANNOT BE USED WITH SVC TYPES 1 AND 6 BECAUSE THEY CANNOT      *
*   ISSUE ANY SVCS.  TYPE 1 MAY USE BRANCH-ENTRY SERVICES.            *
.ST08400 ANOP  ,
         AIF   (NOT &STF(12)).ST08500
*                                                                     *
*   THE CODE GENERATED HERE USES BRANCH ENTRY GETMAIN AND FREEMAIN    *
*   MACROS.  THIS SVC MUST BE TYPE 1, OR REQUEST THE LOCAL LOCK VIA   *
*   THE SVCTABLE.                                                     *
.ST08500 ANOP  ,
*                                                                     *
***********************************************************************
         EJECT ,
.*
         BASR  R12,0                    SET UP SVC BASE REGISTER
         USING *,R12
.*
         AGO   .ST08600
         USING CVTMAP,R3
         USING TCB,R4
         USING RBBASIC,R5
         USING ASCB,R7
         #DSECTS CVT,TCB,RB,ASCB,TYPE=DEFER MAP 'EM LATER, PLEASE
.*
.ST08600 ANOP  ,
         AIF   ('&ID' EQ 'NO').ST09100
         SPACE 1
&Q       SETA  30+&#COPYSZ*&QQ
         AIF   ('&LEVEL' EQ '').ST08700
&Q       SETA  &Q+8                     ALLOW FOR LEVEL
.ST08700 ANOP  ,
         AIF   ('&APARS' EQ '').ST08800
&Q       SETA  &Q+(&APARS*4)            ALLOW FOR APARS
.ST08800 ANOP  ,
         B     *+&Q                     BRANCH AROUND ID
&Q       SETA  &Q-5-&#COPYSZ*&QQ
         DC    AL1(&Q)                  LENGTH OF PROGRAM ID
         DC    CL8'&NAME '              MODULE NAME
         DC    CL8' &SYSTIME '          TIME OF ASSEMBLY
         DC    CL9'&SYSDATC '           DATE OF ASSEMBLY
         AIF   ('&LEVEL' EQ '').ST08900
         DC    CL8'&LEVEL'              MODULE LEVEL
.ST08900 ANOP  ,
         AIF   ('&APARS' EQ '').ST09000
         DC    &APARS.CL4' '            APAR SLOTS
.ST09000 ANOP  ,
         AIF   ('&COPY' EQ 'NO').ST09100
         #COPY GEN                      36-BYTE COPYRIGHT
         SPACE 1
.*
.ST09100 ANOP  ,
         AIF   (NOT &STF(18)).ST09200
         IPK   ,                        GET CURRENT PROTECT KEY
         LR    R4,R2                    COPY TO TEMPORARY REGISTER
         MNOTE '         MODESET EXTKEY=&STAXKEY'
         MODESET EXTKEY=&STAXKEY
.ST09200 ANOP  ,
         AIF   (&STWA).ST09300
.* REG 13 IS ZEROED.  IT MIGHT OTHERWISE BE USED AS A SAVE AREA
.* POINTER LEADING TO VERY SUBTLE INTEGRITY PROBLEMS.  CLEARING IT
.* ENSURES THAT AN 0C4 ABEND WILL OCCUR IF AN ATTEMPT IS MADE TO
.* SAVE VIA R13  (EVEN IN KEY ZERO).
         SR    R13,R13                  TAKE OUT INSURANCE
         AGO   .ST09900                 NO FRILLS ENTRY STYLE
.*
.ST09300 ANOP  ,
         AIF   (&STF(1) OR &STF(2)).ST09800
         LR    R2,R15                   SAVE REGS
         LR    R10,R0
         LR    R11,R1
         AIF   (&STF(17)).ST09500
         AIF   (&STF(12)).ST09400
         MNOTE '         GETMAIN &STAGREG,LV=&P.WALEN&W,SP=&STSPN'
         GETMAIN &STAGREG,LV=&P.WALEN,LOC=&LOC,SP=&STSPN
         AGO   .ST09600
.ST09400 ANOP  ,
         LR    R9,R14                   SAVE REG 14
         MNOTE '         GETMAIN &STAGREG,LV=&P.WALEN&W,SP=&STSPN,BRANCX
               H=YES'
         GETMAIN &STAGREG,LV=&P.WALEN,LOC=&LOC,SP=&STSPN,BRANCH=YES
         LR    R14,R9                   RESTORE REG 14
         L     R3,16                    RESTORE CVT POINTER
         AGO   .ST09600
.ST09500 ANOP  ,
.*       ADD SUPPORT FOR CALLRKY TO HANDLE SP=230 PROPERLY
         MNOTE '         STORAGE OBTAIN,LENGTH=&P.WALEN,LOC=&LOC,SP=&STX
               SPN,BNDRY=&BNDRY,CALLRKY=YES'
         STORAGE OBTAIN,LENGTH=&P.WALEN,LOC=&LOC,SP=&STSPN,            X
               BNDRY=&BNDRY,CALLRKY=YES
.ST09600 ANOP  ,
         LR    R13,R1                   R13 POINTS TO WORK AREA
         USING &WKDSECT,R13             ADDRESSABILITY
         LR    R0,R1
         AIF   (&STF(19)).ST09610       RELATIVE MODE
         L     R1,=A(&P.WALEN)          R1 = LENGTH OF WORK
         AGO   .ST09630
.ST09610 ANOP  ,
         #RBL  R1,&P.WALEN              R1 = LENGTH OF WORK
.ST09630 ANOP  ,
         SR    R9,R9
         MVCL  R0,R8                    CLEAR THE WORK AREA
         LR    R0,R10                   RELOAD REGS
         LR    R1,R11
         LR    R15,R2
         ST    R14,0(0,R13)             STASH RETURN ADDRESS
         AIF   (NOT &STF(18)).ST09700
         ST    R4,&P.IPK                SAVE ORIGINAL PROTECT KEY
.ST09700 ANOP  ,
         AGO   .ST09900
.*
.ST09800 ANOP  ,
         MNOTE 12,'OPTION NOT YET CODED'
         MEXIT ,
.*
.* FINISH UP WITH USING, REG0, REG1 PARMS
.*
.ST09900 ANOP  ,
         AIF   ('&USING' EQ '').ST10200 NO USING PARAMETER, CONT
&A       SETA  1                        COUNTER OF NUMBER OF OPERANDS
&B       SETA  N'&USING                 PICK UP # OF OPTIONS ON USING
.ST10100 ANOP  ,
         AIF   (&A GT &B).ST10200       NO MORE, CONTINUE
&K       SETC  '&USING(&A)'             PICK US ADDRESS
&L       SETC  '&USING(&A+1)'           PICK UP REGISTER
         AIF   ('&K' EQ '' OR '&L' EQ '').ST99000   MISSING PARMS
         USING &K,&L
&A       SETA  &A+2                     POINT TO NEXT SET
         AGO   .ST10100                 ON TO THE NEXT PAIR
.*
.ST10200 ANOP  ,
         AIF   ('&STAMODE' EQ '').ST10700
         AIF   (NOT &STF(19)).OLDCD DO NOT USE RELATIVE CODE
         SPACE 1
         AIF   ('&SYSSPLV' NE '1').ST10310
         L     R15,16                   POINT TO CVT
         TM    116(R15),128             IS THIS MVS/XA ?
         BZ    &P.CAP00                 NO, DO NOT CAP
.ST10310 ANOP  ,
         BRAS  R15,*+4
         LA    R15,&P.CAP00-*(R15)      POINT AFTER BSM
         AIF   ('&STAMODE' EQ '24').ST10410
         CNOP  0,4
         BRAS  R14,*+8                  OUR AMODE IS 31
         DC    X'80000000'
         O     R15,0(R14)               R14 POINTS TO 80000000
.ST10410 ANOP  ,
         CNOP  0,4
         BRAS  R14,*+8                  R14 POINTS TO NEXT INS
         DC    A(&P.RRR14)              INTO EPILOG
         L     R14,0(R14)               R14 -> &P.RRR14
         AGO   .RESCD
.OLDCD   ANOP  ,                   NON-RELATIVE
         LA    R14,&P.RRR14             POINT INTO CAP EPILOG
         AIF   ('&SYSSPLV' NE '1').ST10300
         L     R15,16                   POINT TO CVT
         TM    116(R15),128             IS THIS MVS/XA ?
         BZ    &P.CAP00                 NO, DO NOT CAP
.ST10300 ANOP  ,
         LA    R15,&P.CAP00             POINT AFTER BSM
         AIF   ('&STAMODE' EQ '24').ST10400
         O     R15,=X'80000000'         OUR AMODE IS 31
.ST10400 ANOP  ,
.RESCD   ANOP  ,
         BSM   R14,R15                  SAVE AND SET AMODE
         AIF   ('&STACREG' EQ '').ST10500
&P.CAP00 LR    &STACREG,R14             SAVE CAP WORD IN REG
         AGO   .ST10600
.ST10500 ANOP  ,
&P.CAP00 ST    R14,&P.CAPWD             SAVE CAP WORD
.*
.ST10600 ANOP  ,
         AIF   ('&REG0&REG1' EQ '').ST10900
         SPACE 1
.*
.ST10700 ANOP  ,
         AIF   ('&REG0' EQ '').ST10800  NO REG0, CONTINUE
         LR    &REG0,R0                 SAVE REGISTER 0
.ST10800 ANOP  ,
         AIF   ('&REG1' EQ '').ST10900  NO REG1  CONTINUE
         LR    &REG1,R1                 SAVE REGISTER 1
.ST10900 ANOP  ,
         MEXIT ,
.*
.ST99000 MNOTE 4,'ST1003I - REQUIRED OPERAND MISSING ON USING PARM'
         MEXIT ,
.ST99010 IHBERMAC 1006,NAME
         MEXIT ,
.ST99020 IHBERMAC 1304,WKCSECT,WKDSECT
         MEXIT ,
.ST99030 IHBERMAC 1020,WKCSECT,PROC
         MEXIT ,
.ST99040 MNOTE 12,'ST1004I - SAVE=&SAVE INVALID WITH WORKAREA'
         MEXIT ,
.ST99050 MNOTE 12,'ST1005I - SVAREA=&SVAREA INVALID WITH WORKAREA'
         MEXIT ,
.ST99060 MNOTE 12,'ST1006I - R2 NOT SUPPORTED AS BASE REGISTER'
         MEXIT ,
.ST99070 MNOTE 12,'ST1007I - R3 NOT SUPPORTED AS BASE REGISTER'
         MEXIT ,
.ST99080 MNOTE 12,'ST1007I - R4 NOT SUPPORTED AS BASE REGISTER'
         MEXIT ,
.ST99090 MNOTE 12,'REGS64 ONLY VALID WITH PROC OR PROC,LIFO'
         MEXIT ,
.MEND    MEND  ,
