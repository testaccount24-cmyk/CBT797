         MACRO ,
&NAME    #EXEC &REG,&INST,&D,&S,&X
         GBLA  &EXECUTN            CURRENT EXECUTE NUMBER
         GBLA  &EXECUTL            CURRENT EXECUTE STATEMENT NUMBER
         GBLC  &EXECUTI(255)       INSTRUCTION CODE
         GBLC  &EXECUTD(255)       DESTINATION
         GBLC  &EXECUTS(255)       SOURCE
         GBLC  &EXECNAM            EXECUTE INSTRUCTION NAME
         LCLA  &I,&J               WORK COUNTERS
         LCLB  &MINUS              "-RX" SPECIFIED
         LCLC  &INS,&OP1,&OP2      CURRENT INSTRUCTION & OPERANDS
         LCLC  &RRR                CURRENT REGISTER VALUE
.*--------------------------------------------------------------------*
.*                                                                    *
.* THIS MACRO ENABLES A PROGRAMMER TO EXECUTE AN INSTRUCTION          *
.* WITHOUT THE NECESSITY FOR REMEMBERING TO CODE THE INSTRUCTIONS     *
.* LATER ON IN THE PROGRAM.  FOR INSTANCE, IF A MVC INSTRUCTION IS    *
.* TO BE EXECUTED, WITH THE THE MACHINE LENGTH OF THE DESTINATION     *
.* WITHIN REGISTER 4, THE FOLLOWING SHOULD BE CODED.                  *
.*           LABEL    #EXEC R4,MVC,TARGET,SOURCE                      *
.* IF THE ACTUAL TARGET FIELD LENGTH IS LOCATED IN REGISTER 4, THE    *
.* FOLLOWING INSTRUCTION WILL CONVERT THE LENGTH TO THE MACHINE       *
.* LENGTH THEN EXECUTE THE INSTRUCTION.                               *
.*           LABEL    #EXEC -R4,MVC,TARGET,SOURCE                     *
.*                                                                    *
.* ONLY TWO OPERAND INSTRUCTIONS ARE SUPPORTED.                       *
.* THE MACRO ACCUMULATES ALL UNIQUE INSTRUCTIONS ENTERED, IGNORING    *
.* ANY DUPLICATES.                                                    *
.* WHEN #EXEC IS CODED WITH NO OPERANDS, IT EXPANDS INTO THE          *
.* NECESSARY INSTRUCTIONS.  EACH INSTRUCTION HAS A UNIQUE NAME IN     *
.* THE FORM @EXEC###, WHERE ### IS A NUMBER FROM 1-255.               *
.* THE EXPANSION PROCESS IS SIMILAR TO THAT OF AN LTORG STATEMENT     *
.* FOR LITERALS.  SEVERAL EXECUTE POOLS CAN BE CREATED, IN A SIMILAR  *
.* FASHION TO LITERAL POOLS.                                          *
.*                                                                    *
.*--------------------------------------------------------------------*
         AIF   (N'&SYSLIST EQ 0).EXPAND
         AIF   ('&INST' EQ '').EXPAND
.*       AIF   (N'&SYSLIST NE 4).ERROR2
.*
&RRR     SETC  '&REG'              SET REGISTER VALUE
&OP1     SETC  '&D'                SET FIRST OPERAND
&OP2     SETC  '&S'                SET SECOND OPERAND
.*
         AIF   (N'&SYSLIST GT 4).CHECK3
         AIF   ('&INST' EQ 'MVC' OR '&INST' EQ 'CLC').SS1
         AIF   ('&INST' EQ 'TR' OR '&INST' EQ 'TRT').SS1
         AIF   ('&INST' EQ 'MVZ' OR '&INST' EQ 'MVN').SS1
         AIF   ('&INST' EQ 'OC' OR '&INST' EQ 'NC').SS1
         AIF   ('&INST' EQ 'XC' OR '&INST' EQ 'ED').SS1
         AIF   ('&INST' EQ 'MVCIN' OR '&INST' EQ 'EDMK').SS1
.*
         AIF   ('&INST' EQ 'PACK' OR '&INST' EQ 'UNPK').SS2
         AIF   ('&INST' EQ 'MVO' OR '&INST' EQ 'ZAP').SS2
         AIF   ('&INST' EQ 'AP' OR '&INST' EQ 'CP').SS2
         AIF   ('&INST' EQ 'DP' OR '&INST' EQ 'MP').SS2
         AIF   ('&INST' EQ 'SP').SS2
         AGO   .TN
.CHECK3  ANOP
         AIF   (N'&SYSLIST GT 5).ERROR2
         AIF   ('&INST' EQ 'CLM' OR '&INST' EQ 'ICM').SS0
         AIF   ('&INST' EQ 'STCM').SS0
         AGO   .TN                 NOT SS, NEEDS NO LENGTH
.SS0     ANOP  ,
&OP1     SETC  '&D.,&S'
&OP2     SETC  '&X'
         AGO   .TN
.*
.*       IF THE DESTINATION ENDS IN A BRACKET, IT IS EITHER A REGISTER
.*       SPECIFICATION OR ALREADY HAS A LENGTH FIELD SPECIFIED, SO A
.*       LENGTH FIELD WILL NOT BE APPENDED
.*
.SS1     AIF   ('&OP1'(K'&OP1,1) EQ ')').TN
&OP1     SETC  '&D.(*-*)'          APPEND A LENGTH OF ZERO
         AGO   .TN
.*
.SS2     AIF   ('&OP2'(K'&OP2,1) EQ ')').TN
&OP2     SETC  '&S.(*-*)'          APPEND A LENGTH OF ZERO
.*
.TN      AIF   (&EXECUTN EQ 0).NEW IF FIRST TIME, DO NOT CHECK TABLE
.*
.LOOP    ANOP  ,
&I       SETA  &I+1
         AIF   (&I GT &EXECUTN).NEW
         AIF   ('&OP1' NE '&EXECUTD(&I)').LOOP
         AIF   ('&OP2' NE '&EXECUTS(&I)').LOOP
         AIF   ('&INST' NE '&EXECUTI(&I)').LOOP
&J       SETA  &I+&EXECUTL         ADD CURRENT EXECUTE STATEMENT NUMBER
         AGO   .GENEX
.*
.NEW     ANOP  ,
&EXECUTN SETA  &EXECUTN+1
         AIF   (&EXECUTN GT 255).ERROR
&EXECUTI(&EXECUTN) SETC '&INST'
&EXECUTD(&EXECUTN) SETC '&OP1'
&EXECUTS(&EXECUTN) SETC '&OP2'
&J       SETA  &EXECUTN+&EXECUTL   ADD CURRENT EXECUTE STATEMENT NUMBER
.GENEX   AIF   ('&RRR' EQ '').NAMEIT
&MINUS   SETB  0                   TURN OFF "-" FLAG
         AIF   ('&RRR'(1,1) NE '-').GENEX2
&MINUS   SETB  1                   TURN ON  "-" FLAG
&RRR     SETC  '&RRR'(2,K'&RRR-1)  REMOVE "-" FROM REGISTER VALUE
         SHI   &RRR,1              DECREMENT FOR EXECUTE COMMAND
.GENEX2  ANOP  ,
&NAME    EX    &RRR,@EXEC&J
.MEXIT   MEXIT ,
.*
.ERROR   MNOTE 8,'Number Of #EXEC Macros Exceeds Upper Limit (255)'
         MEXIT ,
.ERROR2  MNOTE 8,'Invalid Number Of Operands'
         MEXIT ,
.*
.*   IF &REG IS NULL, #EXEC WAS CALLED FROM WITHIN ANOTHER MACRO.
.*   THE GLOBAL SETC VARIABLE &EXECNAM IS SET TO THE INSTRUCTIONS
.*   LABEL FOR USE BY THE CALLING MACRO.
.*
.NAMEIT  ANOP  ,
&EXECNAM SETC  '@EXEC&J'                SET VARIABLE
         MEXIT ,
.*
.*   IF #EXEC WAS CODED, WITH NO OPERANDS, GENERATE EXECUTE COMMANDS.
.*
.EXPAND  ANOP  ,
&I       SETA  0                   INITIALIZE COUNTER
.LOOP1   ANOP  ,
&I       SETA  &I+1                ADD 1 TO COUNTER
         AIF   (&I GT &EXECUTN).EXIT1
&INS     SETC  '&EXECUTI(&I)'
&J       SETA  &I+&EXECUTL         ADD CURRENT EXECUTE STATEMENT NUMBER
@EXEC&J  &INS  &EXECUTD(&I),&EXECUTS(&I)
         AGO   .LOOP1
.EXIT1   ANOP  ,
&EXECUTL SETA  &EXECUTN+&EXECUTL   SET CURRENT EXECUTE STATEMENT NUMBER
&EXECUTN SETA  0                   RESET TABLE COUNTER
         MEND  ,
