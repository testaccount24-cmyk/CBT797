         MACRO ,
&NAME    DCLSW &INIT=0,&MF=,&GENERIC=
.**********************************************************************
.*                                                                    *
.*      THIS MACRO ALLOWS A PROGRAMMER TO DEFINE SWITCHES FOR LATER   *
.*      USE BY GOIF,SET,RESET & FLIP MACROS. IT ALSO GENERATES        *
.*      ASSEMBLY STATEMENTS DEFINING THE SWITCHES IF MF=L OR G (DFLT) *
.*      THERE ARE SEVERAL WAYS OF USING THIS MACRO                    *
.*                                                                    *
.*      TO DECLARE A SWITCH BYTE WITH UP TO 8 SWITCH BITS IN IT, CODE *
.*                                                                    *
.*      NAME    DCLSW  BIT1<,BIT2,BIT3>                               *
.*                                                                    *
.*      MISSING BITS CAN BE SPECIFIED BY CODING TWO ADJACENT COMMAS   *
.*                                                                    *
.*                                                                    *
.*      TO DECLARE SWITCH BITS WITHOUT CARE FOR THE BYTE IN WHICH     *
.*      THEY OCCUR, THE NAME FIELD SHOULD BE LEFT BLANK. A NAME       *
.*      IS GENERATED BY THE MACRO. MORE THAN 8 SWITCHES CAN BE        *
.*      SPECIFIED USING THIS FORM, NEW BYTES BEING DECLARED AS        *
.*      NEEDED. IF ANY SPARE BITS REMAIN IN THE BYTE, THESE WILL BE   *
.*      USED ON SUBSEQUENT CALLS OF THE MACRO WITH THE SAME OPTION.   *
.*      IF THE PROGRAMMER WANTS TO FORCE A NEW BYTE TO BE CREATED     *
.*      A SLASH SHOULD BE PLACED AT THE APPROPRAITE POINT, E.G.       *
.*             DCLSW BIT8,BIT9,/,BIT10      WILL FORCE                *
.*      BIT10 ONTO A NEW BYTE                                         *
.*                                                                    *
.*                                                                    *
.*                                                                    *
.*      IF A SET OF SWITCHES ALL BEGINNING WITH A CERTAIN PREFIX      *
.*      ARE TO BE DEFINED AS BELONGING TO ONE SWITCH GROUP,           *
.*      THE GENERIC KEYWORD SHOULD BE USED. FOR INSTANCE, IN THE UCB  *
.*      THERE IS A BYTE CALLED 'UCBTBYT1' CONTAINING 8 BITS WHICH     *
.*      ALL BEGIN WITH THE PREFIX 'UCB1'. TO DEFINE THIS, CODE        *
.*                                                                    *
.*      UCBTBYT1 DCLSW GENERIC=UCB1                                   *
.*                                                                    *
.*      IF THE SWITCH NAME IS THE SAME AS THE GENERIC PREFIX, IT      *
.*      MAY BE OMITTED. WITH THIS FORM, NO ASSEMBLY STATEMENTS ARE    *
.*      GENERATED AS THE SWITCH IS ASSUMED TO BE DECLARED ELSEWHERE.  *
.*      IF ANOTHER SWITCH IS EXPLICITLY DEFINED ELSEWHERE BY THE      *
.*      DCLSW MACRO WITHOUT THE GENERIC OPTION BUT WITH A PREFIX      *
.*      EQUAL TO THAT DEFINED WITH THE GENERIC OPTION, THE EXPLICIT   *
.*      DECLARATION WILL BE PICKED UP BY SET,GOIF,RESET & FLIP        *
.*      MACROS.                                                       *
.*                                                                    *
.*      FOUR MACRO FORMS CAN BE SPECIFIED.                            *
.*      MF=D   (DEFER DECLARATION)                                    *
.*      MF=E   (DO NOT GENERATE ASSEMBLY STATEMENTS. MUST BE          *
.*              DECLARED ELSEWHERE)                                   *
.*      MF=G   (DEFINE WITHIN WORK AREA CSECT/DSECT. SEE BEGIN MACRO) *
.*      MF=L   (DO ASSEMBLY DECLARATION INLINE)                       *
.*                                                                    *
.*      THE INITIAL DEFAULT IS MF=G, AND THE MF IS REMEMBERED FROM    *
.*      CALL TO MACRO CALL. I.E., IF MF=X IS OMITTED, THE LAST        *
.*      SPECIFIED MF IS USED, WITH MF=G FOR THE FIRST CALL.           *
.*                                                                    *
.*      MF=D DEFERS ASSEMBLY DECLARATION TO LATER IN THE PROGRAM.     *
.*        TO EXPAND A DEFERRED DECLARATION, CODE THE MACRO WITH NO    *
.*        POSITIONAL OPERANDS. THIS WILL EXPAND INTO A DECLARATION    *
.*        OF A SINGLE NAMED SWITCH GROUP IF THE NAME FIELD IS         *
.*        PRESENT, OR TO ALL DEFERRED SWITCHES IF THE NAME FIELD IS   *
.*        LEFT BLANK.   E.G.                                          *
.*                                                                    *
.*        SWITCH1  DCLSW BIT1,BIT2,,BIT4,MF=D   DEFINES A SWITCH      *
.*        *                              WITH 3 BITS, BUT DOES NOT    *
.*        *                              GENERATE ASSEMBLER.          *
.*        SWITCH1  DCLSW                 WOULD WOULD EXPAND INTO      *
.*       +SWITCH1  DC    AL1(0)          DECLARE SWITCH BYTE          *
.*       +BIT1     EQU   128             DECLARE SWITCH BIT           *
.*       +BIT2     EQU   64              DECLARE SWITCH BIT           *
.*       +BIT4     EQU   8               DECLARE SWITCH BIT           *
.*                                                                    *
.*       NOTE THE OMISSION OF BIT3, WITH THE OMISSION OF EQU FOR 32   *
.*       DCLSW WILL NOT INADVERTENTLY DECLARE A SWITCH TWICE,         *
.*       WHICH COULD HAPPEN IF A GLOBAL DECLARATION OF DEFERRED BITS  *
.*       WAS TO FOLLOW A DEFERRED DECLARATION OF A SINGLE SWITCH      *
.*       GROUP. MF=G IS USEFUL WHEN IT IS WISHED TO DECLARE A SWITCH  *
.*       GROUP IN THE MIDDLE OF A CONTROL BLOCK SOMEWHERE NEAR THE    *
.*       END OF THE ASSEMBLY. IN ORDER FOR GOIF,FLIP,SET & RESET      *
.*       TO RECOGNIZE A SWITCH, THE DCLSW MUST HAVE DECLARED THE      *
.*       SWITCH EARLIER ON IN THE ASSEMBLY. HENCE MF=D MUST BE USED.  *
.*       IF THE SWITCH DEFINITIONS ARE CONTAINED IN ANOTHER MACRO,    *
.*       DCLSW WITH MF=E WILL DEFINE THE SWITCH FOR GOIF,SET,FLIP &   *
.*       RESET, AND THE MAPPING MACRO WILL DECLARE THE SWITCH FOR     *
.*       ASSEMBLER.                                                   *
.*                                                                    *
.*       THE SWITCH BYTE CAN BE SET TO AN INITIAL VALUE BY CODING     *
.*       THE INIT= KEYWORD.                                           *
.*    E.G.                                                            *
.*          SW1     DCLSW BIT1,BIT2,BITX,INIT=(BIT1+BITX)             *
.*                                                                    *
.*          INIT= DEFAULTS TO 0. IT CANNOT BE SPECIFIED WITH          *
.*                               MF=E OR MF=D                         *
.*                                                                    *
.**********************************************************************
         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES
         GBLA  &RCPDSWX,&RCPDSWY       POINTERS FOR SPARE BITS
         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS
         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES
         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES
         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES
         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES
         GBLC  &RCPPRE                 BEGIN MACRO PREFIX
         GBLC  &RCPDSWF                MACRO FORMAT
         LCLA  &I,&J,&K,&L             LOCAL COUNTERS
         LCLB  &MFE,&MFG               MACRO FORM SWITCHES
         LCLC  &C
         AIF   ('&GENERIC' NE '').GENERIC  IF GENERIC REQD, GO DO IT
         AIF   ('&SYSLIST(1)' EQ '').DECLARE  IF NO SWITCHES, EXPANSION
.*                                        OF DEFERRED SWITCHES REQD
         AIF   ('&RCPDSWB(1)' NE '').START  SKIP IF NOT 1ST TIME THRU
&RCPDSWB(1) SETC '128'                  INITIALIZE BIT SETTINGS
&RCPDSWB(2) SETC '64'
&RCPDSWB(3) SETC '32'
&RCPDSWB(4) SETC '16'
&RCPDSWB(5) SETC '8'
&RCPDSWB(6) SETC '4'
&RCPDSWB(7) SETC '2'
&RCPDSWB(8) SETC '1'
&RCPDSWF SETC  'G'                     SET INITIAL DFLT MF=G
.START   AIF   ('&MF' EQ '').NOMF      IF MF NOT SPECIFIED, USE DFLT
         AIF   ('&MF' EQ 'D').MFOK     CHECK MF SPECIFICATION
         AIF   ('&MF' EQ 'G' OR '&MF' EQ 'E' OR '&MF' EQ 'L').MFOK
         MNOTE 4,'MF=&MF INVALID, MF=&RCPDSWF USED'
         AGO   .NOMF
.MFOK     ANOP
&RCPDSWF SETC   '&MF'                  SAVE NEW MF
.NOMF    ANOP
&MFE     SETB   ('&RCPDSWF' EQ 'E' OR '&RCPDSWF' EQ 'D')
.*                BIT &MFE INDICATES THAT NO ASSEMBLY STATEMENTS ARE
.*                TO BE GENERATED. VALID FOR MF=G AND MF=E
&MFG     SETB   ('&RCPDSWF' EQ 'G')
&J       SETA   N'&SYSLIST
         AIF   ('&NAME' EQ '').NONAME  IF NO NAME SPECIFIED, BRANCH
&RCPDSW# SETA  &RCPDSW#+1              INCREMENT SWITCH COUNTER
&K       SETA  &RCPDSW#*8              POINT TO 1 BELOW BIT NAME
.*                                     ARRAY ENTRY FOR THIS BYTE
&RCPDSWN(&RCPDSW#) SETC '&NAME'        SET SWITCH BYTE NAME
&RCPDSWD(&RCPDSW#) SETB ('&RCPDSWF' EQ 'D') SET DEFER BIT IF MF=D
         AIF   (&J LT 9).LT9SW         UP TO 8 SWITCH BITS ALLOWED
         MNOTE 8,'MORE THAN 8 SWITCHES DECLARED FOR A NAMED BYTE'
         MNOTE *,' - ONLY FIRST 8 USED'
&J       SETA  8                       SET MAX TO 8
.LT9SW   AIF   (NOT &MFG).LABEL        IF MFÂ¬=G, BYPASS RCPDS
         RCPDS                         ENTER WORK AREA DSECT
.LABEL   AIF   (&MFE).LOOP1            IF MF=D OR E, DO NOT DO DS
&NAME    DC    AL1(&INIT)              DECLARE SWITCH BYTE
.LOOP1   ANOP
&I       SETA  &I+1                    POINT TO NEXT POSIT PARAM
         AIF   (&I GT &J).EXITL1       IF DONE, EXIT LOOP1
&C       SETC  '&SYSLIST(&I)'          SAVE SWITCH NAME
         AIF   ('&C' EQ '').LOOP1      IF NULL, GO GET NEXT
&RCPDSWB(&I+&K) SETC '&C'              STORE IN BIT NAME ARRAY
         AIF   (&MFE).LOOP1            SKIP EQU IF MF=D OR E
&C       EQU   &RCPDSWB(&I)            DECLARE SWITCH BIT
         AGO   .LOOP1                  GET NEXT ENTRY
.EXITL1  AIF   (NOT &MFG).EXIT         EXIT IF MFÂ¬=G
         RCPDS                         RETURN TO PROGRAM CSECT
.EXIT    MEXIT
.**********************************************************************
.*                                                                    *
.*       THE FOLLOWING IS PERFORMED IF NO SWITCH BYTE NAME WAS        *
.*       SPECIFIED. A NAME IS GENERATED AND THE SWITCH BITS DECLARED  *
.*       IN IT. ANY SPARE FIELDS CAN BE USED BY FOLLOWING DCLSW       *
.*       MACROS. ONCE ALL 8 FIELDS HAVE BEEN USED UP, ANOTHER SWITCH  *
.*       BYTE IS OBTAINED AND NAMED. THE PROGRAMMER CAN REQUEST A NEW *
.*       BYTE BY PLACING A / IN PLACE OF A SWITCH NAME. &RCPDSWX      *
.*       POINTS TO THE CURRENT SWITCH BYTE AND &RCPDSWY HAS THE BIT   *
.*       POSITION WITHIN THAT BYTE (1-8)                              *
.*                                                                    *
.**********************************************************************
.NONAME  AIF   (&RCPDSWX EQ 0).NONAME1 IF 1ST TIME, GET NEW BYTE
&K       SETA  (&RCPDSWX-1)/8          GET SWITCH BYTE NO
&MFE     SETB  (&RCPDSWD(&K))          SET MFE SWITCH IF DEFER BIT ON
.LOOP2   AIF   (&I GE &J).EXIT
&I       SETA  &I+1
         AIF   ('&SYSLIST(&I)' EQ '/').NEWBYTE  SWITCH NAME OF '/'
.*                                     INDICATES NEW BYTE REQUESTED
&RCPDSWY SETA  &RCPDSWY+1              INCREMENT BIT NO
         AIF   (&RCPDSWY GT 8).NEWBYTE IF > 8, NEED NEW BYTE
.LOOP2C  ANOP
&RCPDSWX SETA  &RCPDSWX+1               ELSE INCREMENT BIT NAME PTR
         AIF   ('&SYSLIST(&I)' EQ '').LOOP2  IF NULL, GET NEXT
&RCPDSWB(&RCPDSWX) SETC '&SYSLIST(&I)'  STORE SW BIT NAME
         AIF   (&MFE).LOOP2             IF MF=E OR MF=D DON'T DO EQU
&C       SETC  '&SYSLIST(&I)'
&C       EQU   &RCPDSWB(&RCPDSWY)       DECLARE SWITCH BIT
         AGO   .LOOP2
.NONAME1 ANOP
&I       SETA  1                       POINT TO 1ST ELEMENT
.NEWBYTE ANOP
&RCPDSW# SETA  &RCPDSW#+1              INCREMENT SW BYTE NO
&RCPDSWX SETA  &RCPDSW#*8              GET SW BIT NO. ***
&RCPDSWY SETA  1                       SET BIT NO
&MFE     SETB  ('&RCPDSWF' EQ 'D')     SET MFE FLAG IF MF=D
.*                        MF=E IS INVALID FOR UNNAMED SW BYTES
&RCPDSWD(&RCPDSW#) SETB (&MFE)         SET DEFER BIT IN ARRAY
        AIF    ('&RCPPRE' EQ '').PREFNUL IF NO PREFIX ON BEGIN MACRO
&C      SETC   '&RCPPRE.SW&RCPDSW#'    SET SWITCH NAME
         AGO    .LOOP2D
.PREFNUL ANOP
&C       SETC  'SWITCH&RCPDSW#'        SET SWITCH NAME
.LOOP2D  ANOP
&RCPDSWN(&RCPDSW#) SETC '&C'           STORE SW BYTE NAME
         AIF   (&MFE).LOOP2E           IF MF=D, DON'T DO DC
         AIF   (NOT &MFG).LOOP2DC      IF MFÂ¬=G, SKIP RCPDS
         RCPDS                         ENTER WORK AREA
.LOOP2DC ANOP
&C       DC    AL1(&INIT)              DECLARE SWITCH
         AIF   (NOT &MFG).LOOP2E
         RCPDS                         RESUME PROGRAM CSECT
.LOOP2E  AIF   ('&SYSLIST(&I)' NE '/').LOOP2C  IF NOT SLASH, RESUME
&RCPDSWY SETA &RCPDSWY-1              GETS BUMPED UP LATER
         AGO   .LOOP2                  ELSE GET NEXT POSIT PARM
.******************************************************************
.*       IF NO SWITCH BIT NAMES WERE SPECIFIED, DECLARE FUNCTION  *
.*       IS REQUESTED. IF NO NAME FIELD SPECIFIED, DECLARE ALL    *
.*       SWITCHES WHOSE DEFER BIT IS ON, AND RESET THE DEFER BIT  *
.*       IF A NAME FIELD IS SPECIFIED, JUST DECLARE THAT SWITCH   *
.*       BYTE                                                     *
.******************************************************************
.DECLARE AIF ('&NAME' EQ '').DECALL   IF NO NAME, DO ALL
.DECL1   AIF   (&I GE &RCPDSW#).NOTDEC IF DONE ALL, SW NOT FOUND
&I       SETA  &I+1                    GET NEXT SWITCH
         AIF   ('&NAME' NE '&RCPDSWN(&I)').DECL1
         AIF   (NOT &RCPDSWD(&I)).NOTDEF  IF DEFER BIT NOT ON, ERROR
&J       SETA  &I                      SET J=I
&I       SETA  &I-1                    DECREMENT I
         AGO   .DECL2                  NOW CAN USE DECALL CODE
.NOTDEC  MNOTE 'SWITCH BYTE &NAME NOT PREVIOUSLY DECLARED'
         MEXIT
.NOTDEF  MNOTE 'DECLARATION OF SWITCH BYTE &NAME DID NOT HAVE MF=D'
         MEXIT
.DECALL  ANOP
&J       SETA  &RCPDSW#                SET SCAN UPPER LIMIT
.DECL2   AIF   (&I GE &J).EXIT
&I       SETA  &I+1
         AIF   (NOT &RCPDSWD(&I)).DECL2  SKIP IF DEFER BIT NOT ON
&RCPDSWD(&I) SETB 0                    RESET DEFER BIT
&C       SETC  '&RCPDSWN(&I)'          GET SWITCH BYTE NAME
&C       DC    AL1(&INIT)              DECLARE SWITCH BYTE
&K       SETA  &I*8                    POINT 1 BELOW 1ST SW BIT
&L       SETA  0
.DECL3   AIF   (&L GE 8).DECL2         DO FOR EACH BIT
&L       SETA  &L+1
&C       SETC  '&RCPDSWB(&K+&L)'       GET SW BIT NAME
         AIF   ('&C' EQ '').DECL3       AND SKIP IF NULL SW NAME
&C       EQU   &RCPDSWB(&L)            DECLARE SWITCH BIT
         AGO   .DECL3                  REPEAT FOR EACH BIT
.**********************************************************************
.*       FOR GENERIC= OPTION, ANOTHER SET OF ARRAYS IS MAINTAINED.    *
.*       THESE ARE SEARCHED LAST. WITH THIS OPTION, A PROGRAMMER CAN  *
.*       INFORM DCLSW THAT ALL SWITCHES BEGINNING WITH A CERTAIN      *
.*       PREFIX BELONG TO A PARTICULAR SWITCH BYTE. HOWEVER, NO       *
.*       VALIDITY CHECKING CAN BE PERFORMED AS THE INDIVIDUAL NAMES   *
.*       ARE NOT DECLARED. NO ASSEMBLER STATEMENTS ARE GENERATED      *
.*       WITH THIS OPTION.                                            *
.**********************************************************************
.GENERIC ANOP
&RCPGSW# SETA  &RCPGSW#+1              INCREMENT GENERIC SW NO
&RCPGSWN(&RCPGSW#) SETC '&NAME'        SET SWITCH NAME
&RCPGSWB(&RCPGSW#) SETC '&GENERIC'     SET GENERIC PREFIX
         AIF   ('&NAME' NE '').END     IF NAME SPECIFIED, EXIT
&RCPGSWN(&RCPGSW#) SETC '&GENERIC'      ELSE SET SW BYTE NAME = PREFIX
.END     MEND
