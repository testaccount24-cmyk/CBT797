         MACRO ,
&NAME    #CTGFL &FLDNAME,               NAME OF CTGFL TO BE BUILT      X
               &DATA=,                  ADDR OF DATA FOR FIELD         X
               &CHAIN=,                 ADDR OF CTGFL FOR TESTS        X
               &TYPE=REQUEST,           TYPE OF CTGFL (TEST OR REQ)    X
               &MF=L,                   MACRO FORMAT (LIST OR EXEC)    X
               &GROUP=,                 GROUP CODE OF FIELD            X
               &PREFIX=CTG              PREFIX FOR LABEL GENERATION
.*
.*       Note:
.*           The #CTGFL/#CTGPL & #GETFL macros are used in building
.*           SVC 26 parameter lists.
.*           The CSI is now available but at the time that these macros
.*           were developed this facility was not available.
.*           Use at your own risk.
.*
.*           Please refer to CBT File 689 for SVC 26 parameter list
.*           documentation.
.*
.*
.* DEFINE LOCAL SET SYMBOLS
.*
         LCLA  &I                       LOOP COUNTER
         LCLB  &REQ                     =1 IF THIS IS A REQUEST TYPE
         LCLB  &TST                     =1 IF THIS IS A TEST TYPE
         LCLC  &NOENT                   SET TO NUMBER OF FIELDS
         LCLC  &COND                    SET TO HEX VALUE FOR TEST
         LCLC  &CTBL(19)                TABLE TO TRANSLATE TEST CONDS
         LCLC  &LABEL                   DEFINITION OF LABEL
         LCLC  &IX                      SET TO &SYSNDX VALUE
         LCLC  &REG                     USED WHEN REG ADDR SPECD
.*
.* INITIALIZE SET SYMBOLS TO NONSTANDARD DEFAULTS
.*
&NOENT   SETC  '01'                     1 ENTRY IF NOT MULTITYPE
&IX      SETC  '&SYSNDX'                INITIALIZE SHORT INDEX
&LABEL   SETC  '&PREFIX'(1,4)           ONLY USE FOUR CHARS FROM PREF
&LABEL   SETC  '&LABEL.&IX'             GENERATE A UNIQUE LABEL
.*
&CTBL(1) SETC  'EQ'                     --+
&CTBL(2) SETC  'NE'
&CTBL(3) SETC  'GT'
&CTBL(4) SETC  'LT'
&CTBL(5) SETC  'GE'
&CTBL(6) SETC  'LE'                     THIS TABLE PROVIDES
&CTBL(7) SETC  'Z'
&CTBL(8) SETC  'ON'                     A REFERENCE TO DETERMINE
&CTBL(9) SETC  'MX'
&CTBL(11) SETC 'CTGFLDEQ'               TEST CONDITIONS FROM
&CTBL(12) SETC 'CTGFLDNE'
&CTBL(13) SETC 'CTGFLDGT'               INPUT MNEMONICS
&CTBL(14) SETC 'CTGFLDLT'
&CTBL(15) SETC 'CTGFLDGE'
&CTBL(16) SETC 'CTGFLDLE'
&CTBL(17) SETC 'CTGFLDZ'
&CTBL(18) SETC 'CTGFLDON'
&CTBL(19) SETC 'CTGFLDMX'               --+
.*
.*  PARSE THE FIELDNAME PARAMETER
.*
.FLD1    ANOP  ,
         AIF   ('&FLDNAME' EQ '').ERR1   ERROR IF NO FIELDNAME
         AIF   ('&FLDNAME' NE 'MULTITYP').FEND
&NOENT   SETC  '04'                     MULTITYP HAS 4 ENTRIES
.FEND    ANOP  ,
.*
.*  PARSE THE TYPE PARAMETER
.*
.TYPE1   ANOP  ,
         AIF   (N'&TYPE NE 1).TYPE2      CHECK FOR REQUEST TYPE
         AIF   ('&TYPE' NE 'REQUEST').ERR2
&REQ     SETB  1                         SET REQUEST TYPE FLAG
         AGO   .TEND                    END OF TYPE PARSE
.TYPE2   AIF   (N'&TYPE NE 2).ERR2       CHECK FOR (TEST,COND) TYPE
         AIF   ('&TYPE(1)' NE 'TEST').ERR2
&TST     SETB  1                         SET TEST TYPE FLAG
&I       SETA  1                        SET UP TO SEARCH COND TABLE
.TYPE3   AIF   ('&TYPE(2)' EQ '&CTBL(&I)').TYPE4   FOUND MNEMONIC
&I       SETA  &I+1                     INCREMENT COUNTER
         AIF   (&I GT 9).ERR5            MNEMONIC NOT FOUND => ERROR
         AGO   .TYPE3                   KEEP SEARCHING
.TYPE4   ANOP  ,
&I       SETA  &I+10                    INDEX INTO HEX CODE TABLE
&COND    SETC  '&CTBL(&I)'              SET COND CODE HEX VALUE
.TEND    ANOP  ,
.*
.*  PARSE THE DATA PARAMETER
.*
.DATA1   ANOP  ,
         AIF   ('&DATA' EQ '').DEND      CHECK IF DATA SUPPLIED
         AIF   (N'&DATA NE 2).ERR3       CHECK IF DATA VALID
.DEND    ANOP  ,
.*
.*  PARSE THE MF PARAMETER
.*
.MF1     ANOP  ,
         AIF   (N'&MF NE 1).MF2          CHECK FOR MF=?
         AIF   ('&MF' NE 'L').ERR4       NOT MF=L => ERROR
         AGO   .LFORM1                  PRODUCE LIST FORM OF CTGFL
.MF2     AIF   (N'&MF NE 2).ERR4         MF NOT (?,?) => ERROR
         AIF   ('&MF(1)' NE 'E').ERR4    MF NOT (E,?) => ERROR
         AGO   .EFORM1                  PRODUCE EXECUTE FORM OF CTGFL
.MEND    ANOP  ,
.*
.* GENERATE THE LIST FORM OF THE CTGFL
.*
.LFORM1  ANOP  ,
&NAME    DS    0F                       #CTGFL MACRO JAN 21 1980
         DC    X'&NOENT'                NO OF LEN/ADDR ENTRIES
         AIF   (&TST).LFORM2             FILL IN CONDITION FIELD
         DC    X'00'                    NOT A TEST CTGFL
         AGO   .LFORM3                  CONTINUE WITH CTGFL
.LFORM2  ANOP  ,
         DC    AL1(&COND)               TEST CONDITION
.LFORM3  ANOP  ,
         AIF   ('&GROUP' EQ '').LFORM4   NO GROUP CODE SPECD
         DC    C'&GROUP'                TYPE (GROUP) CODE
         AGO   .LFORM5
.LFORM4  ANOP  ,
         DS    C                        RESERVED
.LFORM5  ANOP  ,
         DS    X                        TEST RESULTS
         DS    XL4                      WORKAREA
         DC    A(&LABEL)                ADDR OF FIELDNAME
         AIF   ('&CHAIN' EQ '').LFORM6   NO CHAIN SPECIFIED
         DC    A(&CHAIN)                ADDR OF CTGFL FOR TESTS
         AGO   .LFORM7
.LFORM6  ANOP  ,
         DS    A                        RESERVED
.LFORM7  ANOP  ,
         AIF   ('&DATA' NE '').LFORM8    NO DATA SPECIFIED
&I       SETA  &NOENT*2                 NUMBER OF WORDS FOR DATA
         DS    &I.A                     LEN/ADDR OF DATA
         AGO   .LFORM9
.LFORM8  DC    A(&DATA(2))              DATA LENGTH
         DC    A(&DATA(1))              DATA ADDRESS
         AIF   ('&NOENT' EQ '01').LFORM9   NOT A MULTITYP CTGFL
         DS    6A                       LEN/ADDR FOR MULTITYP
.LFORM9  ANOP  ,
&LABEL   DC    CL8'&FLDNAME'            NAME OF THE FIELD
         MEXIT ,
.*
.* GENERATE THE EXECUTE FORM OF THE CTGFL MACRO
.*
.EFORM1  ANOP  ,
         PUSH  USING                    #CTGFL MACRO JAN 21 1980
         USING CTGFL,15                 ADDRESS THE CTGFL
         AIF   ('&MF(2)'(1,1) EQ '(').EREGS   TEST IF REG SPECD
&NAME    LA    15,&MF(2)                REG 1 -> CTGFL
         AGO   .EBLD                    GO BUILD PARM LIST
.EREGS   ANOP  ,
&REG     SETC  '&MF(2)'(2,K'&MF(2)-2)   STRIP THE PARENTHESIS
&NAME    LR    15,&REG                  REG 1 -> CTGFL
.EBLD    ANOP  ,
         MVI   CTGFLDNO,X'&NOENT'       NUMBER OF ENTRIES
         AIF   (NOT &TST).EFORM3              NOT BUILDING A TEST CTGFL
         MVI   CTGFLDCD,&COND           TEST CONDITION
.EFORM3  AIF   ('&GROUP' EQ '').EFORM4        NO GROUP CODE SPECIFIED
         MVI   CTGFLDGC,C'&GROUP'       TYPE (GROUP) CODE
.EFORM4  ANOP  ,
         AIF   ('&FLDNAME'(1,1) EQ '(').FLDREG   TEST IF REG SPECD
         LA    0,=CL8'&FLDNAME'         SAVE ADDRESS OF
         ST    0,CTGFLDNM               THE FIELD NAME
         AGO   .ECHAIN
.FLDREG  ANOP  ,
&REG     SETC  '&FLDNAME'(2,K'&FLDNAME-2) STRIP THE PARANTHESIS
         ST    &REG,CTGFLDNM            SAVE FIELD NAME ADDRESS
.ECHAIN  ANOP  ,
         AIF   ('&CHAIN' EQ '').EFORM5        NO CHAIN CTGFL
         AIF   ('&CHAIN'(1,1) EQ '(').ECREG   CHAIN SPECD BY REG
         LA    0,&CHAIN                 SAVE ADDRESS OF
         ST    0,CTGFLCHN               THE CTGFL FOR TESTS
         AGO   .EFORM5
.ECREG   ANOP  ,
&REG     SETC  '&CHAIN'(2,K'&CHAIN-2)   GET RID OF PARENS
         ST    &REG,CTGFLCHN            SET PTR TO CTGFL FOR TEST
.EFORM5  AIF   ('&DATA' EQ '').EFORM7         NO DATA POINTERS
         AIF   ('&DATA(2)'(1,1) EQ '(').EDREG2   LENGTH SPECD BY REG
         LA    0,&DATA(2)               SAVE THE LENGTH
         ST    0,CTGFLNG                OF THE FIELD DATA
         AGO   .EFORM6
.EDREG2  ANOP  ,
&REG     SETC  '&DATA(2)'(2,K'&DATA(2)-2) GET RID OF PARENS
         ST    &REG,CTGFLNG             SET DATA LENGTH
.EFORM6  AIF   ('&DATA(1)'(1,1) EQ '(').EDREG1   ADDR SPECD BY REG
         LA    0,&DATA(1)               SAVE THE ADDRESS
         ST    0,CTGFLPT                OF THE FIELD DATA
         AGO   .EFORM7
.EDREG1  ANOP  ,
&REG     SETC  '&DATA(1)'(2,K'&DATA(1)-2) GET RID OF PARENS
         ST    &REG,CTGFLPT             SET POINTER TO DATA
.EFORM7  ANOP  ,
         POP   USING
         MEXIT ,
.*
.* ERROR MESSAGES ISSUED FROM THIS MACRO
.*
.ERR1    MNOTE 8,'No Field Name Specified'
         MEXIT ,
.ERR2    MNOTE 8,'Invalid TYPE Parameter'
         MEXIT ,
.ERR3    MNOTE 8,'Invalid DATA Parameter'
         MEXIT ,
.ERR4    MNOTE 8,'Invalid MF Parameter'
         MEXIT ,
.ERR5    MNOTE 8,'Invalid TEST Condition'
         MEND  ,
