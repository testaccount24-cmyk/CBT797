LLWA     TITLE 'LLWA. Replace the TSO AUTH tables from various sources'
         SPACE 1
***********************************************************************
*                                                                     *
*   Program Name:   LLWA                                              *
*                                                                     *
*  Documentation:   This program is meant to be run as a TSO          *
*                   command, APF authorized.  This program will       *
*                   replace the four TSO authorization tables that    *
*                   are used by your TSO session:  IKJEFTE2,          *
*                   IKJEFTE8, IKJEFTAP, and IKJEFTNS, and will        *
*                   re-point the proper addresses in the LWA          *
*                   (Logon Work Area) to point to the new tables.     *
*                   The effect of the change is immediate, and        *
*                   it will only affect the invoker's TSO session.    *
*                                                                     *
*    Environment:   TSO command, APF Authorized.                      *
*                                                                     *
*                   Linkedit this program with PARM of NORENT         *
*                     and NOREUS, for best efficiency.                *
*                                                                     *
*                   PUTLINE interface enabled by APUT, EPUTL.         *
*                                                                     *
*                   This program is non-reentrant.                    *
*                                                                     *
*       Function:   To load a completely new set of TSO authorization *
*                   tables from any of several sources, including a   *
*                   load library, a IKJTSOxx-format PARMLIB-type pds  *
*                   member, or an LRECL=8 list of names.  The newly   *
*                   loaded tables are immediately honored by your TSO *
*                   session.  If you choose load library input, the   *
*                   load library has to be APF authorized.  And this  *
*                   program has to be APF-authorized.                 *
*                                                                     *
*                   If the source is a load library with IKJTABLS     *
*                   type CSECTs, IKJEFTE2, IKJEFTE8, IKJEFTAP, etc.,  *
*                   the tables should be present with CSECT names     *
*                   KKJEFTE2, etc. instead of IKJEFTE2, etc. because  *
*                   LOAD should find the correct copy, and not reuse  *
*                   the TSO userid's copy which is in JPA, and which  *
*                   is searched first, even using a DCB-directed      *
*                   LOAD.                                             *
*                                                                     *
*                   Optionally data conversion of the source tables   *
*                   can be done, to convert PARMLIB input, or load    *
*                   module input, to the more easily stored and       *
*                   manipulated LRECL=8 dataset list input.           *
*                                                                     *
*                                                                     *
*         Syntax:   LLWA  ctnC                                        *
*                                                                     *
*                        c=code: L-from loadlib                       *
*                                D-from LRECL=8 name list             *
*                                P-from PARMLIB-like IKJTSOxx member  *
*                                                                     *
*                        tn=table name:   E2, E8, NS, AP              *
*                                                                     *
*                               (tn can usually be left out)          *
*                                                                     *
*                        The optional C as fourth letter in the       *
*                         PARM will perform data conversion only,     *
*                         from either PARMLIB-format or load library  *
*                         format, into LRECL=8 dataset list format.   *
*                                                                     *
*                   example:  LLWA  LE2  load E2 table from loadlib   *
*                                                                     *
*                   example:  LLWA  D    load all tables from dataset *
*                                                                     *
*                   example:  LLWA  P--C convert IKJTSOxx-type input  *
*                                         to an LRECL=8 dataset list  *
*                                                                     *
*                   default:  reload all tables.                      *
*                             no default for code.                    *
*                                                                     *
*                   If the LLWAPOUT DD name is allocated (to an       *
*                   LRECL=8 dataset), then LRECL=8 output in          *
*                   "program name list" format will be produced       *
*                   from the PARMLIB-format member, or from a         *
*                   loadlib member in the IKJTABLS load module.       *
*                   In other words, the PARMLIB-format input or       *
*                   the load module CSECTs will be converted to       *
*                   LRECL=8 program name list format.                 *
*                                                                     *
*     Conversion:   You can use the LLWA command to perform data      *
*                   conversion from either load module input, or      *
*                   PARMLIB-format input, into LRECL=8 dataset        *
*                   input.  Just allocate the input files:            *
*                                                                     *
*                      LLWALIB    or   LLWAPRM                        *
*                                                                     *
*                   and the output file:                              *
*                                                                     *
*                      LLWAPOUT                                       *
*                                                                     *
*                   and execute:                                      *
*                                                                     *
*                      LLWA L--C  to convert Load Library input       *
*                                   to LRECL=8 dataset input          *
*                                                                     *
*                   or                                                *
*                      LLWA P--C  to convert PARMLIB-format input     *
*                                   to LRECL=8 dataset input          *
*                                                                     *
*                   If "conversion only" is performed, no new Auth    *
*                   tables will be reloaded.  The auth tables for     *
*                   your TSO session will stay as they were.          *
*                                                                     *
*         Action:   For LLWA L    (loadlib input for the tables)      *
*                                                                     *
*                   Single table, or all four tables, are loaded      *
*                   into core (from the loadlib) and measured.        *
*                   Measurement stops at the first blank entry.       *
*                   Then, 240 bytes  (30 blank entries) are           *
*                   added at the end of the E2, E8, and AP            *
*                   tables.  104 bytes (10 blank entries              *
*                   followed by X'FFFF') are added on at the end      *
*                   of the NS table.  Subpool 252 storage in Key      *
*                   0 is GETMAINed for each table, and the            *
*                   LOADed tables are copied into their               *
*                   designated GETMAIN areas.  Then the LWA           *
*                   fields are re-pointed to the new tables and       *
*                   to their sizes, so that the user's session        *
*                   will honor them immediately.  Simulation of       *
*                   a load from PARMLIB is done.  But the STEPLIB     *
*                   flags are turned on, so that a PARMLIB UPDATE(xx) *
*                   command (issued globally on the MVS instance)     *
*                   will not overlay the tables that we have          *
*                   created.                                          *
*                                                                     *
*                   For LLWA D    (LRECL=8 program name list input)   *
*                                                                     *
*                   For LRECL=8 input, see notes before label         *
*                   USEDSET.  These will describe the action of       *
*                   the program for that kind of input.               *
*                       (described below)                             *
*                                                                     *
*                   For LLWA P    (PARMLIB-format (IKJEFTxx) input)   *
*                                                                     *
*                   For PARMLIB-format input, see notes before        *
*                   label USEPLIB.  These will describe the action    *
*                   of the program for that kind of input.            *
*                       (described below)                             *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  Change Log:                                                        *
*    2008/12/11 - 1.0 - Initial version - Got it to work.             *
*                                                                     *
*    2009/03/15 - 1.1 - FREEMAIN the old tables after creating        *
*                       the new ones.                                 *
*                                                                     *
***********************************************************************
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*       I N S T R E A M    M A C R O S                                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
***********************************************************************
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
         YREGS
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R9,HEX
         LM    R15,R1,HEXSAVE
         MEND
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
LLWA     CSECT
LLWA     AMODE 31
LLWA     RMODE 24
         USING *,R15                                                  *
         B     BEGINN               Eyecatcher
BBYTES   DC    F'4000'        If we have to guess Max size of table
BENTRIES DC    F'500'         If we have to guess Max number of entries
NBYTES   DC    F'1000'        If we have to guess Max size of table
NENTRIES DC    F'100'         If we have to guess Max number of entries
         DC    CL7'LLWA - '
VERS#    DC    CL8'Ver 1.33'
         DC    CL16' &SYSDATE &SYSTIME '
BEGINN   DS    0H
         DROP  R15
         USING LLWA,R12,R11,R10,R6,R7  Set up base registers.
         STM   R14,R12,12(R13)
         LR    R12,R15              Set up base registers.
         ST    R1,SAVEPARM          Save CPPL pointer to use later.
         LA    R11,4095(,R12)       Second base.
         LA    R11,1(,R11)
         LA    R10,4095(,R11)       Third base.
         LA    R10,1(,R10)
         LA    R6,4095(,R10)        Fourth base.
         LA    R6,1(,R6)
         LA    R7,4095(,R6)         Fifth base.
         LA    R7,1(,R7)
         LA    R1,SAVEAREA          Point to new save area
         ST    R1,8(,R13)           Forward save area chain pointer
         ST    R13,4(,R1)           Backward save area chain pointer
         LR    R13,R1               New save area address
         B     INITCON              Branch past save area
         SPACE 1
* ----------------------------------------------------------------- *
SAVEAREA DC    18F'0'               Non-reentrant save area
SAVEPARM DC    F'0'                 Parm address from R1 at entry
* ----------------------------------------------------------------- *
INITCON  DS    0H                   Initialize constants needed.
         MVI   BLANKS-1,X'40'       Initialize to blanks.
         MVC   BLANKS(L'BLANKS),BLANKS-1
         XC    CVDAREA,CVDAREA
         MVI   CVDAREA+7,X'0F'      Initialize to packed 0.
         MVI   GETPINIT,X'40'       Initialize to blanks.
         MVC   GETPWORK,GETPWORK-1
         MVC   WORKLIT,BLANKS
         MVC   OPTSAVE,BLANKS
         MVI   OPENFLG,X'00'        Initialize flags to zeros.
         MVI   POUTFLG,X'00'
         MVI   LONGFLG,X'00'
         MVI   DTABFLG,X'00'
         MVI   PTABFLG,X'00'
         MVI   KEYWFLG,X'00'
         MVI   MODEFLG,X'00'
         MVI   LWAPFLG,X'00'
         MVI   LWAMFLG,X'00'
         MVI   LOADEFLG,X'00'
         MVI   WICHFLG,X'F0'        Initialize so all flags are on.
         MVI   WORKFLG,X'FF'        Has to start "very non-zero".
         MVI   LINEB,X'40'          For clearing output line.
         XC    E2DLNTH,E2DLNTH      Zero out "counting" fields.
         XC    E8DLNTH,E8DLNTH
         XC    APDLNTH,APDLNTH
         XC    NSDLNTH,NSDLNTH
         XC    BLNKCNT,BLNKCNT
         XC    NTRYCNT,NTRYCNT
         XC    PARMLBIN,PARMLBIN
         XC    SAVETCUR,SAVETCUR
* ----------------------------------------------------------------- *
TIOTSCAN DS    0H             Determine the presence of Optional    *
*                             DDNAME :  LLWAPOUT.                   *
* ----->                      OPEN and CLOSE only if DD name        *
* ----->                       is present.                          *
* ----------------------------------------------------------------- *
         ST    R4,KEEPR4A     Save work registers.
         ST    R5,KEEPR5A
         L     R5,16          R5=CVT
         L     R5,0(,R5)      R5=TCB WORDS
         L     R5,4(,R5)      R5=MY TCB
         L     R5,12(,R5)     R5=TIOT
         LA    R5,24(,R5)     R5=FIRST DD ENTRY
TIOTLOOP CLC   0(4,R5),=XL4'00' END OF TIOT?
         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES
         CLC   4(8,R5),LLWAPOUC     LLWAPOUT DDNAME THERE?
         BNE   TIOTNEXT       NO
         OI    OPENFLG,X'01'        SHOW PRESENCE OF LLWAPOUT DD
         B     TIOTNEXT       CONTINUE
TIOTNEXT SR    R4,R4
         IC    R4,0(,R5)      R4=LENGTH OF DD ENTRY
         AR    R5,R4          R5=NEXT DD ENTRY
         B     TIOTLOOP       GO CHECK IT
OPENFLG  DC    X'00'
OPENSYSL DC    X'00'
LLWAPOUC DC    C'LLWAPOUT'
KEEPR4A  DC    F'0'
KEEPR5A  DC    F'0'
TIOTSEND DS    0H
         L     R4,KEEPR4A     Restore work registers.
         L     R5,KEEPR5A
* ------------------------------------------------------------------ *
GETPSCB  DS    0H                  See if we are allowed to
*                                  run this program.
         L     R2,16               POINT TO CVT.
         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS
         L     R2,4(,R2)           POINT TO TCB.
         L     R2,X'B4'(,R2)       POINT TO JSCB.
         L     R2,X'108'(,R2)      POINT TO PSCB.
         LA    R2,0(,R2)           CLEAR HIGH BYTE.
         LTR   R2,R2               ANY PSCB?
         BZ    EOJ4                GET OUT.  NOT TSO.
         L     R1,SAVEPARM         Get the address of the CPPL back
         USING CPPL,R1
         L     R0,CPPLUPT          Copy CPPL fields for possible
         ST    R0,SAVEUPT            later use, if needed.
         L     R0,CPPLPSCB
         ST    R0,SAVEPSCB
         L     R0,CPPLECT
         ST    R0,SAVEECT
         DROP  R1
         BAL   R9,PGMTITLE         First display the program title.
         USING PSCB,R2
CHEKAUTH DS    0H
         NOP   GETLWA              Bypass authorization check
         TM    PSCBATR1,PSCBACCT   ACCT user?
         BO    GETLWA              Yes.  Continue.
         TM    PSCBATR1,PSCBCTRL   OPER user?
         BZ    EOJ4                No.  Get out.
         DROP  R2
***** ----- >>>>>
GETLWA   DS    0H                  Obtain all the relevant fields
*                                  from the LWA (Logon Work Area)
         L     R2,X'224'           POINT TO PSAAOLD
         L     R2,X'6C'(,R2)       POINT TO ASXB
         L     R2,X'14'(,R2)       POINT TO LWA
         ST    R2,LWAADDR          Store LWA address
         USING LWA,R2
* ------------------------------------------------------------------ *
*    Save all the relevant information from the LWA, to use later.   *
* ------------------------------------------------------------------ *
         ST    R5,SAVER5B          Store original contents of R5
         L     R5,LWATNS           Pointer to NS table
         ST    R5,SAVETNS          Save it.
         L     R5,LWATE2           Pointer to E2 table
         ST    R5,SAVETE2          Save it.
         L     R5,LWATE8           Pointer to E8 table
         ST    R5,SAVETE8          Save it.
         L     R5,LWATAP           Pointer to AP table
         ST    R5,SAVETAP          Save it.
         XR    R5,R5               Clear register to be double sure.
         LH    R5,LWATNSLN         Length of NS table if available
         STH   R5,SAVETNSL         Save whatever was there in program.
         LTR   R5,R5               Has a size been supplied in the LWA?
         BZ    NONSSIZE            No
         OI    LWAMFLG,X'40'       Yes. Indicate that in a flag.
         B     YSNSSIZE
NONSSIZE DS    0H
         L     R5,SAVETNS            No size given, measure the table.
         BAL   R9,MEASOL10           Measure as well as possible.
         MVC   SAVETNSL(2),MO10LENG  Move measured length into field.
YSNSSIZE DS    0H
         LH    R5,LWATE2LN         Length of E2 table if available
         STH   R5,SAVETE2L         Save whatever was there in program.
         LTR   R5,R5               Has a size been supplied in the LWA?
         BZ    NOE2SIZE            No
         OI    LWAMFLG,X'20'       Yes. Indicate that in a flag.
         B     YSE2SIZE
NOE2SIZE DS    0H
         L     R5,SAVETE2            No size given, measure the table.
         BAL   R9,MEASOL08           Measure as well as possible.
         MVC   SAVETE2L(2),MO08LENG  Move measured length into field.
YSE2SIZE DS    0H
         LH    R5,LWATE8LN         Length of E8 table if available
         STH   R5,SAVETE8L         Save whatever was there in program.
         LTR   R5,R5               Has a size been supplied in the LWA?
         BZ    NOE8SIZE            No
         OI    LWAMFLG,X'10'       Yes. Indicate that in a flag.
         B     YSE8SIZE
NOE8SIZE DS    0H
         L     R5,SAVETE8            No size given, measure the table.
         BAL   R9,MEASOL08           Measure as well as possible.
         MVC   SAVETE8L(2),MO08LENG  Move measured length into field.
YSE8SIZE DS    0H
         LH    R5,LWATAPLN         Length of AP table if available
         STH   R5,SAVETAPL         Save whatever was there in program.
         LTR   R5,R5               Has a size been supplied in the LWA?
         BZ    NOAPSIZE            No
         OI    LWAMFLG,X'80'       Yes. Indicate that in a flag.
         B     YSAPSIZE
NOAPSIZE DS    0H
         L     R5,SAVETAP            No size given, measure the table.
         BAL   R9,MEASOL08           Measure as well as possible.
         MVC   SAVETAPL(2),MO08LENG  Move measured length into field.
YSAPSIZE DS    0H
         L     R5,SAVER5B          Restore original R5 contents
         MVC   LWAPFLG,LWAPRMLB    Save flags showing which tables
*                                  came from STEPLIB, if any.
         DROP  R2
* ------------------------------------------------------------------ *
*    At this point we have finished saving things out of the LWA.    *
* ------------------------------------------------------------------ *
* -- >       Test if this command is being run APF Authorized
APFTEST  DS    0H
         STM   R15,R1,SAVE1401     Now save registers and test if APF
         XR    R15,R15                  authorized.
         TESTAUTH FCTN=1           Are we authorized?
         LTR   R15,R15             Test the return code.
         BNZ   NOTAUTH             Not zero, tell not authorized.
         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.
* -- >
* ------------------------------------------------------------------ *
*    Now we'll get the parm value to see what file we should OPEN.   *
* ------------------------------------------------------------------ *
         L     R1,SAVEPARM         Get the Parm pointer we saved before
         LTR   R1,R1               Any CPPL or PARM pointer?
         BZ    EOJ4                B if not.
         ST    R2,SAVER2D
         L     R2,0(,R1)           Point to buffer
         LTR   R2,R2               Any?
         BZ    EOJ4                B if not.
         LH    R3,0(R2)            Load length.
         LTR   R3,R3               Any?
         BZ    EOJ4                B if not.
         CLI   2(R2),X'00'         Command Processor invocation?
         BE    RLDCP               Handle it.
         LA    R2,2(,R2)           Point to PARM.
         B     PARM
RLDCP    CH    R3,=H'4'            Any PARM?
         BE    NOPARMS             B if NOT.
         AH    R2,2(,R2)           POINT TO ...
         LA    R2,4(,R2)           ... PARM.
PARM     OI    0(R2),C' '          UPPERCASE. Parm for which source
         OI    1(R2),C' '          UPPERCASE. Parm for which table
         OI    2(R2),C' '          UPPERCASE.
         OI    3(R2),C' '          UPPERCASE. 3rd Parm for Extras
         MVC   OPTSAVE(4),0(R2)
* --- PARMS gotten at this point. ----------------------------------- *
LONGSHRT DS    0H                  Do we want extra output for LLWA P?
         CLI   3(R2),C'L'          Is there an L in the fourth place?
         BE    LONGDIAG            Yes. Extra diagnostics wanted.
         CLI   3(R2),C'C'          Is there a C in the fourth place?
         BE    LONGCONV            Yes. Conversion only wanted.
         B     PARMCLER            Default--don't set any flags.
LONGDIAG DS    0H
         OI    LONGFLG,X'01'       Turn on "extra outputs" flag.
         B     PARMCLER
LONGCONV DS    0H
         OI    LONGFLG,X'02'       Turn on "convert only" flag.
         BAL   R9,CONVONLY         Message to that effect
         B     PARMCLER
PARMCLER DS    0H
         MVI   3(R2),X'40'         Prevent reuse of PARM later.
* ------------------------------------------------------------------ *
*  You can invoke the command:  LLWA P--L  to trigger the extra output.
*  You can invoke the command:  LLWA P--C  to do data conversion only.
*  You can invoke the command:  LLWA L--C  to do data conversion only.
* ------------------------------------------------------------------ *
WICHTABL DS    0H                  Are we limiting to only one table?
*                                  WICHFLG is set to X'F0' initially.
* ------------------------------------------------------------------ *
         CLC   1(2,R2),=C'E2'      Limiting to E2?
         BE    SETONLE2            Yes. Set it.
         CLC   1(2,R2),=C'E8'      Limiting to E8?
         BE    SETONLE8            Yes. Set it.
         CLC   1(2,R2),=C'AP'      Limiting to AP?
         BE    SETONLAP            Yes. Set it.
         CLC   1(2,R2),=C'NS'      Limiting to NS?
         BE    SETONLNS            Yes. Set it.
         B     SETONEND            Default is to do all the tables.
* ------------------------------------------------------------------ *
*     This is a global setting for the entire program, to limit
*      output to only one table.  Default setting for WICHFLG
*      is X'F0' (all of the outputs on).  See label INITCON.
* ------------------------------------------------------------------ *
SETONLE2 DS    0H                  Only E2?
         OI    WICHFLG,X'20'       Turn on this table.
         NI    WICHFLG,X'20'       Turn off other tables.
         B     WICHOPEN
SETONLE8 DS    0H                  Only E8?
         OI    WICHFLG,X'10'       Turn on this table.
         NI    WICHFLG,X'10'       Turn off other tables.
         B     WICHOPEN
SETONLAP DS    0H                  Only AP?
         OI    WICHFLG,X'80'       Turn on this table.
         NI    WICHFLG,X'80'       Turn off other tables.
         B     WICHOPEN
SETONLNS DS    0H                  Only NS?
         OI    WICHFLG,X'40'       Turn on this table.
         NI    WICHFLG,X'40'       Turn off other tables.
         B     WICHOPEN
SETONEND DS    0H
* ------------------------------------------------------------------ *
* Use the PARM to select where the input tables will be coming from.
* ------------------------------------------------------------------ *
WICHOPEN DS    0H         What kind of input does the program expect?
         MVC   1(2,R2),=C'  '      Clear PARMs from 2nd and 3rd places
         CLI   0(R2),C'L'          PARM = L ?
         BE    USELOAD             OPEN Load Module input.
         CLI   0(R2),C'D'          PARM = D ?
         BE    USEDSET             OPEN LRECL=8 Dataset input.
         CLI   0(R2),C'P'          PARM = P ?
         BE    USEPLIB             OPEN IKJTSOxx PARMLIB format input.
         B     NOPARMS             Otherwise exit with message.
* ------------------------------------------------------------------ *
* USEDSET takes LRECL=8 input consisting of (up to) 4 lists of
* program names.  The list belonging to each table is defined by
* a header entry, which is "---E2---", "---E8---", "---AP---",
* or "---NS---".
*
* Output is 4 prebuilt tables in "above the 16M line storage".
* Depending on the limiting parms, either all the 4 tables are
* replaced in SP-252 core, or only the one selected is replaced.
*
* Copying of the tables is via an MVCL instruction, the same way
* IBM does it at LOGON time, in module IKJEFTP1.
* ------------------------------------------------------------------ *
USEDSET  DS    0H
         L     R2,SAVER2D          R2 no longer points to PARMs.
         MVI   MODEFLG,X'02'       Dataset Input in effect
* ---       Did we code conversion only by mistake? - below
         TM    LONGFLG,X'02'       Did we specify conversion only here?
         BZ    USEDSEDO            No. Just do regular processing.
         BAL   R9,CONVNOTL         Yes. Say it doesn't make sense.
         B     EOJ4                And exit the program.
USEDSEDO DS    0H
* ---       Did we code conversion only by mistake? - above
         OPEN  (LLWALST,(INPUT))
         TM    LLWALST+48,X'10'    Is the DD OPEN  ?                     01914
         BZ    NOALLOCD            No. Error message.                    01915
         RDJFCB LLWALST
         MVC   MSGPRTJF(7),=C'LLWALST'   Move DD name into message
         BAL   R9,PRTJFCB          Print dataset information
         TM    JFCRECFM,X'80'      Is RECFM fixed?
         BZ    NOTFIXED            No. Send error message.
         CLC   =H'8',JFCLRECL      Is LRECL = 8 ?
         BNE   NOLRECL8            No. Send error message.
* ---                              All is OK with dataset attributes.
         BAL   R9,GETDBUFS         Get buffers for E2, E8, AP, NS.
         BAL   R9,GETDMEAS         Read Input File all through.
* ---                              And measure all the tables.
DDE2     DS    0H                  Construct all the auth tables.
         TM    WICHFLG,X'20'
         BZ    DDE8
         BAL   R9,E2DNWTAB         Construct E2 table and point to it
DDE8     DS    0H
         TM    WICHFLG,X'10'
         BZ    DDAP
         BAL   R9,E8DNWTAB         Construct E8 table and point to it
DDAP     DS    0H
         TM    WICHFLG,X'80'
         BZ    DDNS
         BAL   R9,APDNWTAB         Construct AP table and point to it
DDNS     DS    0H
         TM    WICHFLG,X'40'
         BZ    DDEND
         BAL   R9,NSDNWTAB         Construct NS table and point to it
DDEND    DS    0H
         BAL   R9,FREDBUFS         Free the table construction buffers
         BAL   R9,FREOLDTB
         B     EOJ0
* ------------------------------------------------------------------ *
* USEPLIB takes PARMLIB-format input that looks like an IKJTSOxx
* member.  This member is read, and is scanned for names that are
* between AUTHCMD NAMES ( ), AUTHPGM NAMES ( ), AUTHTSF NAMES( ),
* or NOTBKGND NAMES( ).  Those program names are converted into a
* list, in the four separate categories, as they are present in the
* IKJTSOxx-like dataset.
*
* Output is 4 prebuilt tables in "above the 16M line storage".
* Depending on the limiting parms, either all the 4 tables are
* replaced in SP-252 core, or only the one selected is replaced.
*
* Copying of the tables is via an MVCL instruction, the same way
* IBM does it at LOGON time, in module IKJEFTP1.
*
* Optional LRECL=8 output can be generated in LIST format, if an
* LLWAPOUT DD name is allocated to an LRECL=8 dataset, optionally.
* This output can be edited later, and used as input to LLWA D.
* ------------------------------------------------------------------ *
USEPLIB  DS    0H
         L     R2,SAVER2D          R2 no longer points to PARMs.
         MVI   MODEFLG,X'04'       PARMLIB Input in effect
         OPEN  (LLWAPRM,(INPUT))
         TM    LLWAPRM+48,X'10'    Is the DD OPEN  ?                     01914
         BZ    NOALLOCP            No. Error message.                    01915
         RDJFCB LLWAPRM
         MVC   MSGPRTJF(7),=C'LLWAPRM'   Move DD name into message
         BAL   R9,PRTJFCB          Print dataset information
         TM    JFCRECFM,X'80'      Is RECFM fixed?
         BZ    NOTFIXED            No. Send error message.
         CLC   =H'80',JFCLRECL     Is LRECL = 80 ?
         BNE   NOLREC80            No. Send error message.
         BAL   R9,OPENPOUT         Conditionally OPEN LLWAPOUT DD
* ---                              All is OK with dataset attributes.
         BAL   R9,GETDBUFS         Get buffers for E2, E8, AP, NS.
         BAL   R9,GETPREAD         Read parmlib member--put out names
         BAL   R9,FREDBUFS         Free the table construction buffers
         BAL   R9,CLOSPOUT         Conditionally CLOSE LLWAPOUT DD
         BAL   R9,FREOLDTB
         B     EOJ0
* ------------------------------------------------------------------ *
USELOAD  DS    0H
         L     R2,SAVER2D          R2 no longer points to PARMs.
         MVI   MODEFLG,X'01'       Load Library input in effect
         OPEN  LLWALIB
         TM    LLWALIB+48,X'10'    Is the DD OPEN  ?                     01914
         BZ    NOALLOCL            No. Error message.                    01915
         RDJFCB LLWALIB
         MVC   MSGPRTJF(7),=C'LLWALIB'   Move DD name into message
         BAL   R9,PRTJFCB          Print dataset information
         TM    JFCRECFM,X'C0'      Is RECFM = U ?
         BNO   NOTLOADL            No. Send error message.
         TM    JFCDSORG,X'02'      Is DSORG = PO ?
         BNO   NOTLOADL            No. Send error message.
         BAL   R9,OPENPOUT         Conditionally OPEN LLWAPOUT DD.
DOE2     DS    0H                  Is AUTHCMD to be loaded?
         TM    WICHFLG,X'20'       Check switch
         BZ    DOE8                Not on. Do next one.
         BAL   R9,LOADE2           Load IKJEFTE2.
         BAL   R9,E2NEWTAB         Construct incore table and copy it.
* -- >
DOE8     DS    0H                  Is AUTHPGM to be loaded?
         TM    WICHFLG,X'10'       Check switch
         BZ    DOAP                Not on. Do next one.
         BAL   R9,LOADE8           Load IKJEFTE8.
         BAL   R9,E8NEWTAB         Construct incore table and copy it.
* -- >
DOAP     DS    0H                  Is AUTHTSF to be loaded?
         TM    WICHFLG,X'80'       Check switch
         BZ    DONS                Not on. Do next one.
         BAL   R9,LOADAP           Load IKJEFTAP.
         BAL   R9,APNEWTAB         Construct incore table and copy it.
* -- >
DONS     DS    0H                  Is NOTBKGND to be loaded?
         TM    WICHFLG,X'40'       Check switch
         BZ    DOEND               Not on. Do next one.
         BAL   R9,LOADNS           Load IKJEFTNS.
         BAL   R9,NSNEWTAB         Construct incore table and copy it.
* -- >
DOEND    DS    0H                  End of LOADs.
         CLOSE LLWALIB
         BAL   R9,CLOSPOUT         Conditionally CLOSE LLWAPOUT DD.
         BAL   R9,FREDBUFS
         BAL   R9,FREOLDTB
         B     EOJ0
** ---------------------------------------------------------------- **
EOJ      DS    0H                  END OF JOB
         L     R13,4(,R13)
         LR    R15,R5              Put in real return code
         ST    R15,16(,R13)        Shove it where it belongs
         L     R14,12(,R13)        R14 and
         LM    R0,R12,20(R13)        rest of registers
         BR    R14                 Go back to caller
EOJ0     DS    0H                  Return code 0
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGR0       Show Return Code 0
         APUT  MESSAGR0,L'MESSAGR0
         LA    R5,0                Set CC = 0
         B     EOJ                 Now end the program
EOJ4     DS    0H                  Return code 4
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGR4       Show Return Code 4
         APUT  LINE,L'MESSAGR4
         L     R5,FULLFOUR         Set CC = 4
         B     EOJ                 Now end the program
EOJ8     DS    0H                  Return code 8
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGR8       Show Return Code 8
         APUT  LINE,L'MESSAGR8
         L     R5,FULLEIGT         Set CC = 8
         B     EOJ                 Now end the program
EOJC     DS    0H                  Return code 12
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGRC       Show Return Code 12
         APUT  LINE,L'MESSAGRC
         L     R5,FULLTWLV         Set CC = 12
         B     EOJ                 Now end the program
* ----------------------------------------------------------------- *
*     Various "abnormal ending" routines.                           *
* ----------------------------------------------------------------- *
NOTAUTH  DS    0H                     Command not authorized message.
         APUT  MESSAG2C,L'MESSAG2C    This is instead of getting
         APUT  MESSAG2D,L'MESSAG2D      an S047 abend. We don't let
         B     EOJC                     that happen.
* ----------------------------------------------------------------- *
*     If a PARMLIB card is in error, show the card and line number. *
* ----------------------------------------------------------------- *
ERRNAME1 DS    0H
         MVC   LINE,LINE-1        Display a blank line first.
         APUT  LINE,30
         ST    R2,SAVER2B         Convert binary line number to
         L     R2,PARMLBIN          decimal for display purposes.
         CVD   R2,CVDAREA                 Convert to decimal
         MVC   PARMLDEC,CVDAREA           Store away for reporting
         L     R2,SAVER2B         Restore work register.
         MVC   LINE,LINE-1           Display
         MVC   LINE(10),MASK10         card
         ED    LINE(10),PARMLDEC+3       number
         MVC   LINE(5),=C'Card-'           and
         MVC   LINE+11(80),GETPWORK          card image.
         APUT  LINE,91
         MVC   LINE,LINE-1
         MVC   LINE+7(28),=C'This line contains an error.'
         APUT  LINE,53
         MVC   LINE,LINE-1
         MVC   LINE+7(32),=C'Please correct and rerun LLWA P.'
         APUT  LINE,53
         MVC   LINE,LINE-1        Display another blank line.
         APUT  LINE,30
         B     EOJ4               Show RC = 4.
* ----------------------------------------------------------------- *
NOPARMS  DS    0H                   Message that PARMs are necessary.
         APUT  MESSAG2F,L'MESSAG2F
         B     EOJ4
* ----------------------------------------------------------------- *
NOTFIXED DS    0H                   Allocated file is not RECFM=F.
         APUT  MESSAG6A,L'MESSAG6A
         B     EOJ4
* ----------------------------------------------------------------- *
NOTLOADL DS    0H                   Allocated file is not a load lib
         APUT  MESSAG6B,L'MESSAG6B
         B     EOJ4
* ----------------------------------------------------------------- *
NOALLOCL DS    0H                   Need to alloc a load library.
         APUT  MESSAG4A,L'MESSAG4A
         APUT  MESSAG4B,L'MESSAG4B
         B     EOJ8
* ----------------------------------------------------------------- *
NOALLOCD DS    0H                   Need to alloc an LRECL=8 dataset.
         APUT  MESSAG4C,L'MESSAG4C
         APUT  MESSAG4D,L'MESSAG4D
         B     EOJ8
* ----------------------------------------------------------------- *
NOALLOCP DS    0H                   Need to alloc an LRECL=80 dataset.
         APUT  MESSAG4E,L'MESSAG4E
         APUT  MESSAG4F,L'MESSAG4F
         B     EOJ8
* ----------------------------------------------------------------- *
NOALLOCQ DS    0H                   Optional LRECL=8 output dsn missing
         APUT  MESSAG4G,L'MESSAG4G
         B     EOJ8
* ----------------------------------------------------------------- *
NOALLOCR DS    0H                   LLWAPOUT DD is missing. No output
         ST    R9,KEEPR9A            was produced.
         STM   R15,R1,SAVE1401
         TM    LONGFLG,X'02'        This run for data conversion only?
         BO    NAALTMSG             Yes. Say so.
         APUT  MESSAG4H,L'MESSAG4H  No. Just say LLWAPOUT DD missing.
         B     NOALLOCE
NAALTMSG DS    0H                   Say you need LLWAPOUT DD allocated
         APUT  MESSAG4I,L'MESSAG4I
         NI    LONGFLG,X'FF'-X'02'  Turn off conversion flag.
         B     EOJ4
NOALLOCE DS    0H
         LM    R15,R1,SAVE1401
         L     R9,KEEPR9A
         BR    R9
* ----------------------------------------------------------------- *
CONVONLY DS    0H                   Say this run is for conversion only
         ST    R9,KEEPR9E
         STM   R15,R1,SAVE1401
         APUT  MESSAG4J,L'MESSAG4J
         LM    R15,R1,SAVE1401
         L     R9,KEEPR9E
         BR    R9
* ----------------------------------------------------------------- *
CONVNOTL DS    0H                   Say LRECL=8 to LRECL=8 makes no
         ST    R9,KEEPR9E             sense.
         STM   R15,R1,SAVE1401
         APUT  MESSAG4K,L'MESSAG4K
         LM    R15,R1,SAVE1401
         L     R9,KEEPR9E
         BR    R9
* ----------------------------------------------------------------- *
NOLRECL8 DS    0H                   LRECL of dataset is not 8.
         APUT  MESSAG5A,L'MESSAG5A
         B     EOJ8
* ----------------------------------------------------------------- *
NOLREC80 DS    0H                   LRECL of dataset is not 80.
         APUT  MESSAG5B,L'MESSAG5B
         B     EOJ8
* ----------------------------------------------------------------- *
** ---------------------------------------------------------------- **
**    Some of the Register and Pointer Save Areas                   **
** ---------------------------------------------------------------- **
SAVETPVT DC    F'0'                   Address of TPVT control block
SAVECTLT DC    F'0'                   Address of CTLT control block
SAVEFCVE DC    F'0'                   Address of Platcmd table if non-0
SAVEPPVE DC    F'0'                   Address of Platpgm table if non-0
SAVEUPT  DC    F'0'                   Address of UPT
SAVEECT  DC    F'0'                   Address of ECT
SAVEPSCB DC    F'0'                   Address of PSCB
SAVETNS  DC    F'0'                   Address of NS table
SAVETE2  DC    F'0'                   Address of E2 table
SAVETE8  DC    F'0'                   Address of E8 table
SAVETAP  DC    F'0'                   Address of AP table
SVE2ADDR DC    F'0'                   Address of work buffer
SVE2HOLD DC    F'0'                   Address in work buffer
SVE2BUFL DC    F'0'                   Length of work buffer
SVE8ADDR DC    F'0'                   Address of work buffer
SVE8HOLD DC    F'0'                   Address in work buffer
SVE8BUFL DC    F'0'                   Length of work buffer
SVAPADDR DC    F'0'                   Address of work buffer
SVAPHOLD DC    F'0'                   Address in work buffer
SVAPBUFL DC    F'0'                   Length of work buffer
SVNSADDR DC    F'0'                   Address of work buffer
SVNSHOLD DC    F'0'                   Address in work buffer
SVNSBUFL DC    F'0'                   Length of work buffer
ENE2ADDR DC    F'0'                   End address of E2 table data
ENE8ADDR DC    F'0'                   End address of E8 table data
ENAPADDR DC    F'0'                   End address of AP table data
ENNSADDR DC    F'0'                   End address of NS table data
SAVETNSL DC    H'0'                   Length of NS table, if nonzero
SAVETE2L DC    H'0'                   Length of E2 table, if nonzero
SAVETE8L DC    H'0'                   Length of E8 table, if nonzero
SAVETAPL DC    H'0'                   Length of AP table, if nonzero
SAVETCUR DC    H'0'                   Copied length of current table
** ---------------------------------------------------------------- **
FULLZERO DC    F'0'                   Fullword of numeric 0
FULLFOUR DC    F'4'                   Fullword 4
FULLEIGT DC    F'8'                   Fullowrd 8
FULLTWLV DC    F'12'                  Fullword 12
SAVE1401 DC    5F'0'                  More for safety
SAVX1401 DC    5F'0'                  More for safety
LWAADDR  DC    F'0'                   Address of LWA control block
* ----------------------------------------------------------------- *
*  Quantities necessary for building the output tables in storage.  *
* ----------------------------------------------------------------- *
MODNAME  DC    CL8'KKJEFT--'
TESTTABL DC    CL8' '
TESTSIZE DC    H'0'
E2SIZE   DC    F'0'
E8SIZE   DC    F'0'
APSIZE   DC    F'0'
NSSIZE   DC    F'0'
E2SIZEP  DC    F'0'
E8SIZEP  DC    F'0'
APSIZEP  DC    F'0'
NSSIZEP  DC    F'0'
* ----------------------------------------------------------------- *
*   Literal Pool, thus far.                                         *
* ----------------------------------------------------------------- *
         LTORG
** ---------------------------------------------------------------- **
*         * - - - - - - - - - - - - - - - - - - - - - - - - *        *
*         *            S U B R O U T I N E S                *        *
*         * - - - - - - - - - - - - - - - - - - - - - - - - *        *
** ---------------------------------------------------------------- **
**  These are executed using a BAL R9,subroutn  instruction.        **
** ---------------------------------------------------------------- **
HEX      DS    0H                    Display a Hex quantity.
         ST    R9,SAVER9A            (Support for the HEX macro)
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         L     R9,SAVER9A
         BR    R9                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
HEXSAVE  DS    3F                    Register save for HEX macro
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
PGMTITLE DS    0H                    Display program title
         ST    R9,SAVER9F             when executing this program.
         MVC   LINE,LINE-1           Blank line
         MVC   LINE,MESSAGET         Move title line in
         MVC   LINE+62(8),VERS#      Version number into title
         APUT  LINE,L'MESSAGET       And put out to tube
         MVC   LINE,LINE-1           Blank line again
         MVC   LINE,MESSAGEU         Move underlines in
         APUT  LINE,L'MESSAGEU       And put them out also
         L     R9,SAVER9F
         BR    R9                    Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* ----------------------------------------------------------------- *
*      Measure "8-byte entry" loaded table.                         *
* ----------------------------------------------------------------- *
MEASUR08 DS    0H                 R5 has beginning address of table.
         ST    R9,SAVER9O
         LA    R4,16                Count size of header
         LA    R5,16(,R5)           Bump past header
         MVC   ME08WORK,BLANKS      Initialize work area.
*----->                       ----- Handle LLWAPOUT processing - below
         TM    POUTFLG,X'01'        Is LLWAPOUT DD OPEN?
         BZ    ME08GO01             No. Skip putting out to it.
         PUT   LLWAPOUT,WORKLIT     PUT out header literal
         MVC   ME08WORK(8),0(R5)    Already pointing at first entry.
         PUT   LLWAPOUT,ME08WORK
ME08GO01 DS    0H                   Back to rest of processing.
*----->                       ----- Handle LLWAPOUT processing - above
ME08LOOP DS    0H
         CLC   =C'        ',0(R5)   Is this entry a blank?
         BE    ME08THER             Yes. Reached virtual end of table
         LA    R4,8(,R4)            Count next table entry
         LA    R5,8(,R5)            Bump to next entry
*----->                       ----- Handle LLWAPOUT processing - below
         TM    POUTFLG,X'01'        Is LLWAPOUT DD OPEN?
         BZ    ME08GO02             No. Skip putting out to it.
ME08TEST DS    0H
         MVC   ME08WORK,0(R5)       Yes-move program name to work area.
         CLC   ME08WORK,BLANKS      Don't put out
         BE    ME08GO02               blank entry at the end.
         PUT   LLWAPOUT,ME08WORK    PUT out program name.
ME08GO02 DS    0H                   Back to rest of processing.
*----->                       ----- Handle LLWAPOUT processing - above
         B     ME08LOOP             Loop back till first blank.
ME08THER DS    0H
         STH   R4,ME08LENG          Store measured length of table.
         LA    R5,8(,R5)            Bump past blank entry.
         ST    R5,ME08END           And record address of table end.
         L     R9,SAVER9O
         BR    R9
ME08WORK DC    CL8' '
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* ----------------------------------------------------------------- *
*      Measure "10-byte entry" loaded table.                        *
* ----------------------------------------------------------------- *
MEASUR10 DS    0H                 R5 has beginning address of table.
         ST    R9,SAVER9Q
         LA    R4,16                Count size of header
         LA    R5,16(,R5)           Bump past header
         MVC   ME10WORK,BLANKS      Initialize work area.
*----->                       ----- Handle LLWAPOUT processing - below
         TM    POUTFLG,X'01'        Is LLWAPOUT DD OPEN?
         BZ    ME10GO01             No. Skip putting out to it.
         PUT   LLWAPOUT,WORKLIT     PUT out header literal
         MVC   ME10WORK(8),2(R5)    Already pointing at first entry.
         PUT   LLWAPOUT,ME10WORK
ME10GO01 DS    0H                   Back to rest of processing.
*----->                       ----- Handle LLWAPOUT processing - above
ME10LOOP DS    0H
         CLC   =C'        ',2(R5)   Is this entry a blank?
         BE    ME10THER             Yes. Reached virtual end of table
         LA    R4,10(,R4)           Count next table entry
         LA    R5,10(,R5)           Bump to next entry
*----->                       ----- Handle LLWAPOUT processing - below
         TM    POUTFLG,X'01'        Is LLWAPOUT DD OPEN?
         BZ    ME10GO02             No. Skip putting out to it.
ME10TEST DS    0H
         MVC   ME10WORK,2(R5)       Yes-move program name to work area.
         CLC   ME10WORK,BLANKS      Don't put out
         BE    ME10GO02               blank entry at the end.
         PUT   LLWAPOUT,ME10WORK    PUT out program name.
ME10GO02 DS    0H                   Back to rest of processing.
*----->                       ----- Handle LLWAPOUT processing - above
         B     ME10LOOP
ME10THER DS    0H
         STH   R4,ME10LENG          Store measured length of table.
         LA    R5,10(,R5)           Bump past blank entry.
         ST    R5,ME10END           And record address of table end.
         L     R9,SAVER9Q
         BR    R9
ME10WORK DC    CL8' '
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETSTORG DS    0H                 Get SP-252 storage for 8-byte table.
         ST    R9,SAVER9P
         SR    R2,R2                Clear work register
         LH    R2,GTSLENG           Load it with measured length
         AH    R2,=H'240'           Add space for blank entries
         STH   R2,GTSLENG           Save the total length
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 table length:   '
         HEX   LINE+25,2,GTSLENG
         APUT  LINE,40
         MODESET KEY=ZERO
         LH    R2,GTSLENG
         GETMAIN RU,LV=(R2),SP=252,LOC=BELOW
         ST    R1,GTSADDR           Save address of GETMAINed storage
         L     R9,SAVER9P
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETSTORM DS    0H                 Get SP-252 storage for 10-byte table.
         ST    R9,SAVER9R
         SR    R2,R2                Clear work register
         LH    R2,GTSLENG           Load it with measured length
         AH    R2,=H'104'           Add space for blank entries
         STH   R2,GTSLENG           Save the total length
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 table length:   '
         HEX   LINE+25,2,GTSLENG
         APUT  LINE,40
         MODESET KEY=ZERO
         LH    R2,GTSLENG
         GETMAIN RU,LV=(R2),SP=252,LOC=BELOW
         ST    R1,GTSADDR           Save address of GETMAINed storage
         L     R9,SAVER9R
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
LOADE2   DS    0H
         ST    R9,SAVER9S
         MVC   MODNAME+6(2),=C'E2'
         LA    R4,MODNAME
         MODESET KEY=ZERO
         LOAD  EPLOC=(R4),DCB=LLWALIB,LSEARCH=YES,ERRET=ERRE2
         LTR   R15,R15
         BZ    GOSTORE2
ERRE2    STM   R15,R1,SAVE1401     Now save registers R15 R0 R1.
         MVC   LINE,LINE-1
         MVC   LINE(32),=C'E2 table not found - not loaded.'
         APUT  LINE,80
         LM    R15,R1,SAVE1401     Restore registers R15 R0 R1.
         OI    LOADEFLG,X'20'
         B     EOJ4
GOSTORE2 DS    0H
         ST    R0,E2EPT
*        MODESET KEY=NZERO
         L     R9,SAVER9S
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
LOADE8   DS    0H
         ST    R9,SAVER9S
         MVC   MODNAME+6(2),=C'E8'
         LA    R4,MODNAME
         MODESET KEY=ZERO
         LOAD  EPLOC=(R4),DCB=LLWALIB,LSEARCH=YES,ERRET=ERRE8
         LTR   R15,R15
         BZ    GOSTORE8
ERRE8    STM   R15,R1,SAVE1401     Now save registers R15 R0 R1.
         MVC   LINE,LINE-1
         MVC   LINE(32),=C'E8 table not found - not loaded.'
         APUT  LINE,80
         LM    R15,R1,SAVE1401     Restore registers R15 R0 R1.
         OI    LOADEFLG,X'10'
         B     EOJ4
GOSTORE8 DS    0H
         ST    R0,E8EPT
*        MODESET KEY=NZERO
         L     R9,SAVER9S
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
LOADAP   DS    0H
         ST    R9,SAVER9S
         MVC   MODNAME+6(2),=C'AP'
         LA    R4,MODNAME
         MODESET KEY=ZERO
         LOAD  EPLOC=(R4),DCB=LLWALIB,LSEARCH=YES,ERRET=ERRAP
         LTR   R15,R15
         BZ    GOSTORAP
ERRAP    STM   R15,R1,SAVE1401     Now save registers R15 R0 R1.
         MVC   LINE,LINE-1
         MVC   LINE(32),=C'AP table not found - not loaded.'
         APUT  LINE,80
         LM    R15,R1,SAVE1401     Restore registers R15 R0 R1.
         OI    LOADEFLG,X'80'
         B     EOJ4
GOSTORAP DS    0H
         ST    R0,APEPT
*        MODESET KEY=NZERO
         L     R9,SAVER9S
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
LOADNS   DS    0H
         ST    R9,SAVER9S
         MVC   MODNAME+6(2),=C'NS'
         LA    R4,MODNAME
         MODESET KEY=ZERO
         LOAD  EPLOC=(R4),DCB=LLWALIB,LSEARCH=YES,ERRET=ERRNS
         LTR   R15,R15
         BZ    GOSTORNS
ERRNS    STM   R15,R1,SAVE1401     Now save registers R15 R0 R1.
         MVC   LINE,LINE-1
         MVC   LINE(32),=C'NS table not found - not loaded.'
         APUT  LINE,80
         LM    R15,R1,SAVE1401     Restore registers R15 R0 R1.
         OI    LOADEFLG,X'40'
         B     EOJ4
GOSTORNS DS    0H
         ST    R0,NSEPT
*        MODESET KEY=NZERO
         L     R9,SAVER9S
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USELOAD.  LLWA L
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
E2NEWTAB DS    0H             Construct SP-252 table and re-point LWA.
         ST    R9,SAVER9T
         TM    LOADEFLG,X'20'
         BO    E2NEWTEN
         L     R5,E2EPT              Entry point of LOADed table.
         MVC   8(8,R5),=C' PARMLIB'  Pretend that it came from PARMLIB
         MVC   LINE,LINE-1           Clear line
         MVC   LINE(23),=C'LOAD E2 entry point:   '
         HEX   LINE+25,4,E2EPT
         APUT  LINE,80               Put to terminal
         L     R5,E2EPT
         MVC   WORKLIT,LITE2         Show which table we're doing
         BAL   R9,MEASUR08           Measure length of table
         MVC   E2END,ME08END
         MVC   E2LENG,ME08LENG
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,ME08LENG
         MVC   LINE+32(14),=C'End address:  '
         HEX   LINE+48,4,ME08END
         APUT  LINE,60
         TM    LONGFLG,X'02'         Data conversion only?
         BO    E2LNMODE              Skip new table creation.
         MVC   GTSLENG,E2LENG
         MODESET KEY=ZERO
         BAL   R9,GETSTORG         Get SP-252 storage for this table
         MVC   E2ADDR,GTSADDR
         MVC   E2LENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 E2 address:     '
         HEX   LINE+25,4,E2ADDR
         APUT  LINE,60
         L     R0,GTSADDR
         LH    R1,E2LENG
         L     R4,E2EPT
         LH    R5,E2LENG
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,E2LENG
         AR    R2,R3
         MVC   0(240,R2),EIGHTPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of E2 table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATE2,GTSADDR      Load new table address
         MVC   LWATE2LN,E2LENGB    Load new table length
         OI    LWAVFLGS,LWATE2LD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATE2ST   Did not come from STEPLIB
         OI    LWAPRMLB,LWATE2ST
         DROP  R2
E2LNMODE DS    0H
         DELETE EP=KKJEFTE2
         MODESET KEY=NZERO
E2NEWTEN DS    0H
         L     R9,SAVER9T
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USELOAD.  LLWA L
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
E8NEWTAB DS    0H             Construct SP-252 table and re-point LWA.
         ST    R9,SAVER9T
         TM    LOADEFLG,X'10'
         BO    E8NEWTEN
         L     R5,E8EPT              Entry point of LOADed table.
         MVC   8(8,R5),=C' PARMLIB'  Pretend that it came from PARMLIB
         MVC   LINE,LINE-1           Clear line
         MVC   LINE(23),=C'LOAD E8 entry point:   '
         HEX   LINE+25,4,E8EPT
         APUT  LINE,80               Put to terminal
         L     R5,E8EPT
         MVC   WORKLIT,LITE8         Show which table we're doing
         BAL   R9,MEASUR08           Measure length of table
         MVC   E8END,ME08END
         MVC   E8LENG,ME08LENG
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,ME08LENG
         MVC   LINE+32(14),=C'End address:  '
         HEX   LINE+48,4,ME08END
         APUT  LINE,60
         TM    LONGFLG,X'02'         Data conversion only?
         BO    E8LNMODE              Skip new table creation.
         MVC   GTSLENG,E8LENG
         MODESET KEY=ZERO
         BAL   R9,GETSTORG         Get SP-252 storage for this table
         MVC   E8ADDR,GTSADDR
         MVC   E8LENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 E8 address:     '
         HEX   LINE+25,4,E8ADDR
         APUT  LINE,60
         L     R0,GTSADDR
         LH    R1,E8LENG
         L     R4,E8EPT
         LH    R5,E8LENG
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,E8LENG
         AR    R2,R3
         MVC   0(240,R2),EIGHTPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of E8 table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATE8,GTSADDR      Load new table address
         MVC   LWATE8LN,E8LENGB    Load new table length
         OI    LWAVFLGS,LWATE8LD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATE8ST   Did not come from STEPLIB
         OI    LWAPRMLB,LWATE8ST
         DROP  R2
E8LNMODE DS    0H
         DELETE EP=KKJEFTE8
         MODESET KEY=NZERO
E8NEWTEN DS    0H
         L     R9,SAVER9T
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USELOAD.  LLWA L
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
APNEWTAB DS    0H             Construct SP-252 table and re-point LWA.
         ST    R9,SAVER9T
         TM    LOADEFLG,X'80'
         BO    APNEWTEN
         L     R5,APEPT              Entry point of LOADed table.
         MVC   8(8,R5),=C' PARMLIB'  Pretend that it came from PARMLIB
         MVC   LINE,LINE-1           Clear line
         MVC   LINE(23),=C'LOAD AP entry point:   '
         HEX   LINE+25,4,APEPT
         APUT  LINE,80               Put to terminal
         L     R5,APEPT
         MVC   WORKLIT,LITAP         Show which table we're doing
         BAL   R9,MEASUR08           Measure length of table
         MVC   APEND,ME08END
         MVC   APLENG,ME08LENG
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,ME08LENG
         MVC   LINE+32(14),=C'End address:  '
         HEX   LINE+48,4,ME08END
         APUT  LINE,60
         TM    LONGFLG,X'02'         Data conversion only?
         BO    APLNMODE              Skip new table creation.
         MVC   GTSLENG,APLENG
         MODESET KEY=ZERO
         BAL   R9,GETSTORG         Get SP-252 storage for this table
         MVC   APADDR,GTSADDR
         MVC   APLENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 AP address:     '
         HEX   LINE+25,4,APADDR
         APUT  LINE,60
         L     R0,GTSADDR
         LH    R1,APLENG
         L     R4,APEPT
         LH    R5,APLENG
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,APLENG
         AR    R2,R3
         MVC   0(240,R2),EIGHTPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of AP table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATAP,GTSADDR      Load new table address
         MVC   LWATAPLN,APLENGB    Load new table length
         OI    LWAVFLGS,LWATAPLD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATAPST   Did not come from STEPLIB
         OI    LWAPRMLB,LWATAPST
         DROP  R2
APLNMODE DS    0H
         DELETE EP=KKJEFTAP
         MODESET KEY=NZERO
APNEWTEN DS    0H
         L     R9,SAVER9T
         BR    R9
*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USELOAD.  LLWA L
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
NSNEWTAB DS    0H             Construct SP-252 table and re-point LWA.
         ST    R9,SAVER9T
         TM    LOADEFLG,X'40'
         BO    EOJ4
         L     R5,NSEPT              Entry point of LOADed table.
         MVC   8(8,R5),=C' PARMLIB'  Pretend that it came from PARMLIB
         MVC   LINE,LINE-1           Clear line
         MVC   LINE(23),=C'LOAD NS entry point:   '
         HEX   LINE+25,4,NSEPT
         APUT  LINE,80               Put to terminal
         L     R5,NSEPT
         MVC   WORKLIT,LITNS         Show which table we're doing
         BAL   R9,MEASUR10           Measure length of table
         MVC   NSEND,ME10END
         MVC   NSLENG,ME10LENG
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,ME10LENG
         MVC   LINE+32(14),=C'End address:  '
         HEX   LINE+48,4,ME10END
         APUT  LINE,60
         TM    LONGFLG,X'02'         Data conversion only?
         BO    NSLNMODE              Skip new table creation.
         MVC   GTSLENG,NSLENG
         MODESET KEY=ZERO
         BAL   R9,GETSTORM         Get SP-252 storage for this table
         MVC   NSADDR,GTSADDR
         MVC   NSLENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 NS address:     '
         HEX   LINE+25,4,NSADDR
         APUT  LINE,60
         L     R0,GTSADDR
         LH    R1,NSLENG
         L     R4,NSEPT
         LH    R5,NSLENG
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,NSLENG
         AR    R2,R3
         MVC   0(104,R2),TENPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of NS table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATNS,GTSADDR      Load new table address
         MVC   LWATNSLN,NSLENGB    Load new table length
         OI    LWAVFLGS,LWATNSLD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATNSST   Did not come from STEPLIB
         OI    LWAPRMLB,LWATNSST
         DROP  R2
NSLNMODE DS    0H
         DELETE EP=KKJEFTNS
         MODESET KEY=NZERO
NSNEWTEN DS    0H
         L     R9,SAVER9T
         BR    R9
*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEDSET.  LLWA D
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
WICHSTRT DS    0H                  Figure out which table to build.
         ST    R9,SAVER9U
         CLC   =C'---E2---',TESTTABL
         BE    FLAGDE2
         CLC   =C'---E8---',TESTTABL
         BE    FLAGDE8
         CLC   =C'---AP---',TESTTABL
         BE    FLAGDAP
         CLC   =C'---NS---',TESTTABL
         BE    FLAGDNS
         NI    DTABFLG,X'FF'-X'01'
         B     WICHSEND
FLAGDE2  DS    0H
         OI    DTABFLG,X'21'
         NI    DTABFLG,X'21'
         B     WICHSEND
FLAGDE8  DS    0H
         OI    DTABFLG,X'11'
         NI    DTABFLG,X'11'
         B     WICHSEND
FLAGDAP  DS    0H
         OI    DTABFLG,X'81'
         NI    DTABFLG,X'81'
         B     WICHSEND
FLAGDNS  DS    0H
         OI    DTABFLG,X'41'
         NI    DTABFLG,X'41'
         B     WICHSEND
WICHSEND DS    0H
         L     R9,SAVER9U
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    Routine used by USEDSET and USEPLIB.  LLWA D and LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    Get work buffers above the 16M line, to construct tables.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETDBUFS DS    0H
         ST    R9,SAVER9V
* -
         L     R3,=F'8000'         Get a big enough buffer
         ST    R3,SVE2BUFL         Save Buffer Length
         GETMAIN RU,LV=(R3),LOC=ANY
         ST    R1,SVE2ADDR         Save Buffer Address
         ST    R1,ENE2ADDR         Initialize end address
* -
         L     R3,=F'5000'         Get a big enough buffer
         ST    R3,SVE8BUFL         Save Buffer Length
         GETMAIN RU,LV=(R3),LOC=ANY
         ST    R1,SVE8ADDR         Save Buffer Address
         ST    R1,ENE8ADDR         Initialize end address
* -
         L     R3,=F'5000'         Get a big enough buffer
         ST    R3,SVAPBUFL         Save Buffer Length
         GETMAIN RU,LV=(R3),LOC=ANY
         ST    R1,SVAPADDR         Save Buffer Address
         ST    R1,ENAPADDR         Initialize end address
* -
         L     R3,=F'1000'         Get a big enough buffer
         ST    R3,SVNSBUFL         Save Buffer Length
         GETMAIN RU,LV=(R3),LOC=ANY
         ST    R1,SVNSADDR         Save Buffer Address
         ST    R1,ENNSADDR         Initialize end address
* -
         L     R9,SAVER9V
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    Routine used by USEDSET and USEPLIB.  LLWA D and LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    Free the work buffers created by GETDBUFS routine.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
FREDBUFS DS    0H
         ST    R9,SAVER9W
         STM   R15,R1,SAVE1401     Now save registers
         ICM   R1,15,SVE2ADDR      A(Buffer)
         BZ    NOE2BUFF            B. If Not Available
         ICM   R0,15,SVE2BUFL      L(Buffer)
         BZ    NOE2BUFF            B. If Not Available
         FREEMAIN RU,A=(1),LV=(0)
NOE2BUFF DS    0H
         ICM   R1,15,SVE8ADDR      A(Buffer)
         BZ    NOE8BUFF            B. If Not Available
         ICM   R0,15,SVE8BUFL      L(Buffer)
         BZ    NOE8BUFF            B. If Not Available
         FREEMAIN RU,A=(1),LV=(0)
NOE8BUFF DS    0H
         ICM   R1,15,SVAPADDR      A(Buffer)
         BZ    NOAPBUFF            B. If Not Available
         ICM   R0,15,SVAPBUFL      L(Buffer)
         BZ    NOAPBUFF            B. If Not Available
         FREEMAIN RU,A=(1),LV=(0)
NOAPBUFF DS    0H
         ICM   R1,15,SVNSADDR      A(Buffer)
         BZ    NONSBUFF            B. If Not Available
         ICM   R0,15,SVNSBUFL      L(Buffer)
         BZ    NONSBUFF            B. If Not Available
         FREEMAIN RU,A=(1),LV=(0)
NONSBUFF DS    0H
         LM    R15,R1,SAVE1401     Now restore registers
FREDBEND DS    0H
         L     R9,SAVER9W
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEDSET.  LLWA D
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETDMEAS DS    0H                 Measure the four tables.
         ST    R9,SAVER9X
GETDSTRT DS    0H
         GET   LLWALST            Get a record
         LR    R5,R1              Save address of buffer
         MVC   TESTTABL(8),0(R5)  Look at the record
         BAL   R9,WICHSTRT        Is it a header?
         TM    DTABFLG,X'F0'      Haven't gotten there yet.
         BZ    GETDSTRT           Look again.
         TM    DTABFLG,X'01'      Is it the header entry.
         BO    GETDSTRT           Yes. Skip over it.
         CLC   TESTTABL(8),=C'        '   Blank entry?
         BE    GETDSTRT                   Yes. Ignore it.
         TM    DTABFLG,X'20'      Are we in the E2 table?
         BO    STDTBLE2           Copy the entries there.
         TM    DTABFLG,X'10'      Are we in the E8 table?
         BO    STDTBLE8           Copy the entries there.
         TM    DTABFLG,X'80'      Are we in the AP table?
         BO    STDTBLAP           Copy the entries there.
         TM    DTABFLG,X'40'      Are we in the NS table?
         BO    STDTBLNS           Construct the entries there.
         B     GETDSTRT
*
STDTBLE2 DS    0H
         L     R3,SVE2ADDR        GETMAINed E2 address
         MVC   0(16,R3),LOADHDR   Start building table
         MVC   6(2,R3),=C'E2'     Show it's the E2 table
         LA    R3,16(,R3)         Bump past table header
STDLUPE2 DS    0H
         MVC   0(8,R3),TESTTABL
         LA    R3,8(,R3)
         L     R8,E2SIZE
         A     R8,=F'8'
         ST    R8,E2SIZE
         TM    DTABFLG,X'20'
         BZ    STDLUEE2
         GET   LLWALST            Get a record
         LR    R5,R1              Save address of buffer
         MVC   TESTTABL(8),0(R5)  Look at the record
         BAL   R9,WICHSTRT        Is it a header?
         CLC   TESTTABL(8),=C'        '   Blank entry?
         BE    GETDSTRT                   Yes. End of table.
         CLC   TESTTABL(3),=C'---'
         BE    GETDSTRT
         B     STDLUPE2
STDLUEE2 DS    0H
         B     GETDSTRT
*
STDTBLE8 DS    0H
         L     R3,SVE8ADDR        GETMAINed E8 address
         MVC   0(16,R3),LOADHDR   Start building table
         MVC   6(2,R3),=C'E8'     Show it's the E8 table
         LA    R3,16(,R3)         Bump past table header
STDLUPE8 DS    0H
         MVC   0(8,R3),TESTTABL
         LA    R3,8(,R3)
         L     R8,E8SIZE
         A     R8,=F'8'
         ST    R8,E8SIZE
         TM    DTABFLG,X'10'
         BZ    STDLUEE8
         GET   LLWALST            Get a record
         LR    R5,R1              Save address of buffer
         MVC   TESTTABL(8),0(R5)  Look at the record
         BAL   R9,WICHSTRT        Is it a header?
         CLC   TESTTABL(8),=C'        '   Blank entry?
         BE    GETDSTRT                   Yes. End of table.
         CLC   TESTTABL(3),=C'---'
         BE    GETDSTRT
         B     STDLUPE8
STDLUEE8 DS    0H
         B     GETDSTRT
*
STDTBLAP DS    0H
         L     R3,SVAPADDR        GETMAINed AP address
         MVC   0(16,R3),LOADHDR   Start building table
         MVC   6(2,R3),=C'AP'     Show it's the AP table
         LA    R3,16(,R3)         Bump past table header
STDLUPAP DS    0H
         MVC   0(8,R3),TESTTABL
         LA    R3,8(,R3)
         L     R8,APSIZE
         A     R8,=F'8'
         ST    R8,APSIZE
         TM    DTABFLG,X'80'
         BZ    STDLUEAP
         GET   LLWALST            Get a record
         LR    R5,R1              Save address of buffer
         MVC   TESTTABL(8),0(R5)  Look at the record
         BAL   R9,WICHSTRT        Is it a header?
         CLC   TESTTABL(8),=C'        '   Blank entry?
         BE    GETDSTRT                   Yes. End of table.
         CLC   TESTTABL(3),=C'---'
         BE    GETDSTRT
         B     STDLUPAP
STDLUEAP DS    0H
         B     GETDSTRT
*
STDTBLNS DS    0H
         L     R3,SVNSADDR        GETMAINed NS address
         MVC   0(16,R3),LOADHDR   Start building table
         MVC   6(2,R3),=C'NS'     Show it's the NS table
         LA    R3,16(,R3)         Bump past table header
STDLUPNS DS    0H
         BAL   R9,NAMESIZE        Get length of command name
         MVC   0(2,R3),TESTSIZE   Dump it into the table
         LA    R3,2(,R3)          Bump address by 2 bytes
         MVC   0(8,R3),TESTTABL   Move program name in
         LA    R3,8(,R3)          Bump address by 10 bytes
         L     R8,NSSIZE          Previous loaded table size
         A     R8,=F'10'          Bump by size of new entry
         ST    R8,NSSIZE          Store new table size
         TM    DTABFLG,X'40'      Are we in the correct table?
         BZ    STDLUENS           No. Reevaluate.
         GET   LLWALST            Get a record
         LR    R5,R1              Save address of buffer
         MVC   TESTTABL(8),0(R5)  Look at the record
         BAL   R9,WICHSTRT        Is it a header?
         CLC   TESTTABL(8),=C'        '   Blank entry?
         BE    GETDSTRT                   Yes. End of table.
         CLC   TESTTABL(3),=C'---'
         BE    GETDSTRT
         B     STDLUPNS           In same table, just keep reading.
STDLUENS DS    0H
         B     GETDSTRT           Reevaluate.
*
GETLOOPE DS    0H                 Finished measuring all tables here.
*                                 Convert sizes to halfwords.
         L     R4,E2SIZE
         STH   R4,E2DLNTH
*
         L     R4,E8SIZE
         STH   R4,E8DLNTH
*
         L     R4,APSIZE
         STH   R4,APDLNTH
*
         L     R4,NSSIZE
         STH   R4,NSDLNTH
*
* - > Display table sizes obtained - below
         STM   R15,R1,SAVE1401     Now save registers
         MVC   LINE,LINE-1
         MVC   LINE(9),=C'E2 Size: '
         HEX   LINE+11,2,E2DLNTH
         MVC   LINE+20(9),=C'E8 Size: '
         HEX   LINE+31,2,E8DLNTH
         MVC   LINE+40(9),=C'AP Size: '
         HEX   LINE+51,2,APDLNTH
         MVC   LINE+60(9),=C'NS Size: '
         HEX   LINE+71,2,NSDLNTH
         APUT  LINE,80
         LM    R15,R1,SAVE1401     Now reload registers
* - > Display table sizes obtained - above
*
         L     R9,SAVER9X
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    Routine used by USEDSET and USEPLIB.  LLWA D and LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    Generate length of program names.
*        Input  is TESTTABL - 8 byte character field
*        Output is TESTSIZE - binary halfword number
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
NAMESIZE DS    0H
         ST    R9,SAVER9Y
         ST    R2,SAVER2A
         LA    R4,TESTTABL
         XR    R1,R1
         LA    R2,8
NAMELOOP DS    0H
         CLI   0(R4),X'40'
         BE    NAMELEND
         LA    R1,1(,R1)
         LA    R4,1(,R4)
         BCT   R2,NAMELOOP
NAMELEND DS    0H
         STH   R1,TESTSIZE
         L     R2,SAVER2A
         L     R9,SAVER9Y
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETPREAD DS    0H                 Read thru the PARMLIB member image
         ST    R9,SAVER9D         Save BAL register
GETPSTRT DS    0H
         XC    PARMLBIN,PARMLBIN     Initialize line number counter
         MVC   GETPWORK,GETPWORK-1   Blank out card image area
         LA    R1,GETPWORK
         ST    R1,GETPADDR
         LA    R1,71(,R1)
         ST    R1,GETPEADR
GETPLOOP DS    0H
         GET   LLWAPRM            Get a record
         LR    R5,R1              Save address of buffer
         MVC   GETPWORK(80),0(R5) Move record to work area
         OC    GETPWORK(80),BLANKS  Uppercase everything in the record
         L     R1,PARMLBIN        Increment
         A     R1,=F'1'              Line Number
         ST    R1,PARMLBIN              Counter
         NI    KEYWFLG,X'FF'-X'01'   Turn off GET new card flag.
         NI    CONTFLG,X'FF'-X'04'   Turn off "new continuation" flag
* --- >  test display of card  -  below
         TM    LONGFLG,X'01'      Is the "extra outputs" flag on?
         BZ    GETPCEND           No. Then don't display PARMLIB image.
         ST    R2,SAVER2B         Save work register.
         L     R2,PARMLBIN                Load binary number
         CVD   R2,CVDAREA                 Convert to decimal
         MVC   PARMLDEC,CVDAREA           Store away for reporting
         L     R2,SAVER2B         Restore work register.
         MVC   LINE,LINE-1           Display
         MVC   LINE(10),MASK10         card
         ED    LINE(10),PARMLDEC+3       number
         MVC   LINE(5),=C'Card-'           and
         MVC   LINE+11(80),GETPWORK          card image.
         APUT  LINE,91
GETPCEND DS    0H
* --- >  test display of card  -  above
*
         BAL   R9,GETPSCAN     Scan the PARMLIB card to get pgm names.
         B     GETPLOOP        And get another card until End of Data.
*
GETPMEND DS    0H                 EODAD address of LLWAPRM DD name.
*-->                              Move the tables to SP-252 - below
         L     R4,E2SIZEP         Load fullword size
         STH   R4,E2PLNTH         Make halfword size
*
         L     R4,E8SIZEP         Load fullword size
         STH   R4,E8PLNTH         Make halfword size
*
         L     R4,APSIZEP         Load fullword size
         STH   R4,APPLNTH         Make halfword size
*
         L     R4,NSSIZEP         Load fullword size
         STH   R4,NSPLNTH         Make halfword size
*
DPE2     DS    0H
         TM    WICHFLG,X'20'       E2 table on?
         BZ    DPE8
         BAL   R9,E2PNWTAB         Construct E2 table and point to it
DPE8     DS    0H
         TM    WICHFLG,X'10'       E8 table on?
         BZ    DPAP
         BAL   R9,E8PNWTAB         Construct E8 table and point to it
DPAP     DS    0H
         TM    WICHFLG,X'80'       AP table on?
         BZ    DPNS
         BAL   R9,APPNWTAB         Construct AP table and point to it
DPNS     DS    0H
         TM    WICHFLG,X'40'       NS table on?
         BZ    DPEND
         BAL   R9,NSPNWTAB         Construct NS table and point to it
DPEND    DS    0H
*
*-->                              Move the tables to SP-252 - above
         L     R9,SAVER9D         Restore BAL register
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETPSCAN DS    0H                 Scan current PARMLIB record image
         ST    R9,SAVER9Z         Save BAL register
GETPSCST DS    0H
         L     R3,GETPADDR        Point to current card image
         ST    R3,SAVER3A
GETPSCLU DS    0H                 Scan card for significant strings.
*                                  and turn on flags accordingly.
         L     R3,SAVER3A
* --- >                           Diagnostics. Produces much output.
         C     R3,GETPEADR        End of the record yet?
         BH    GETPSCEN           Yes. Finished with this card.
         CLC   0(2,R3),=C'*/'     End of comment?
         BE    GETPNCOM           Yes. Turn off flag.
         CLC   0(2,R3),=C'/*'     Start of comment?
         BE    GETPSCOM           Yes. Turn on flag.
         TM    COMMFLG,X'01'      Are we within a comment?
         BO    GETPSBMP           Yes, just bump to next character.
         CLI   0(R3),X'40'        Blank character?
         BE    GETPSBMP           Yes. Bump past it.
         CLI   0(R3),C'+'         Continuation?
         BE    GETPPLUS           Yes. Go no farther.
         CLI   0(R3),C'-'         Continuation?
         BE    GETPMNUS           Yes. Go no farther.
*
         CLC   =C'AUTHCMD',0(R3)      Handle AUTHCMD
         BE    GETPSCE2
         CLC   =C'AUTHPGM',0(R3)      Handle AUTHPGM
         BE    GETPSCE8
         CLC   =C'AUTHTSF',0(R3)      Handle AUTHTSF
         BE    GETPSCAP
         CLC   =C'NOTBKGND',0(R3)     Handle NOTBKGND
         BE    GETPSCNS
*
         CLC   =C'NAMES',0(R3)    Handle NAMES
         BE    GETPNAMS           Flag that keyword was seen
*
         CLI   0(R3),C'('         Open parenthesis?
         BE    GETPOPAR           Flag that it was seen
         CLI   0(R3),C')'         Close parenthesis?
         BE    GETPCPAR           Flag that it was seen
*
         BAL   R9,GETPRNAM        What's in the rest of the card?
         B     GETPSCEN
GETPSBMP DS    0H                 Bump position and keep scanning.
         L     R3,SAVER3A
         LA    R3,1(,R3)          Bump one character in the card
         ST    R3,SAVER3A         Save position of scan
         B     GETPSCLU           Keep scanning card image
GETPSCOM DS    0H                 Entering a comment area
         OI    COMMFLG,X'01'      Flag that we're in comment area
         LA    R3,1(,R3)          Bump a bit past comment symbol
         ST    R3,SAVER3A         Save position of scan
         B     GETPSCLU           Keep scanning card image
GETPNCOM DS    0H                 Leaving a comment area
         NI    COMMFLG,X'FF'-X'01'   Turn off comment area flag
         LA    R3,1(,R3)          Bump a bit past "comment off" symbol
         ST    R3,SAVER3A         Save position of scan
         B     GETPSCLU           Keep scanning card image
GETPPLUS DS    0H
         LA    R3,1(,R3)          Bump past plus
         ST    R3,SAVER3A         Save position of scan
         OI    CONTFLG,X'01'      Plus continuation to next card
         NI    CONTFLG,X'01'      Turn off minus continuation flag
         OI    CONTFLG,X'04'      Fresh continuation in this line.
         B     GETPSCEN             End scan of card image
GETPMNUS DS    0H
         LA    R3,1(,R3)          Bump past minus
         ST    R3,SAVER3A         Save position of scan
         OI    CONTFLG,X'02'      Minus continuation to next card
         NI    CONTFLG,X'02'      Turn off plus continuation flag
         OI    CONTFLG,X'04'      Fresh continuation in this line.
         B     GETPSCEN             End scan of card image
GETPSCE2 DS    0H
         LA    R3,7(,R3)          Bump past "AUTHCMD"
         ST    R3,SAVER3A         Save position of scan
         OI    KEYWFLG,X'20'      Show we're in the E2 table
         NI    KEYWFLG,X'2F'        And not in any other table
         NI    CONTFLG,X'FF'-X'03'  Turn off all continuations.
         TM    POUTFLG,X'01'        Is LLWAPOUT OPEN?
         BZ    NOLLWAP2             No, don't PUT to it.
         PUT   LLWAPOUT,LITE2       Yes put out header literal.
NOLLWAP2 DS    0H
*---->                            Build E2 table header initially
         L     R3,SVE2ADDR        GETMAINed E2 address
         MVC   0(16,R3),LOADHDR   Start building table
         MVC   6(2,R3),=C'E2'     Show it's the E2 table
         LA    R3,16(,R3)         Bump past table header
         ST    R3,SVE2HOLD        Save place in E2 table
         LA    R8,16              Size of table header
         ST    R8,E2SIZEP         Add to size of table
*---->
         B     GETPSCLU           Keep scanning card image
GETPSCE8 DS    0H
         LA    R3,7(,R3)          Bump past "AUTHPGM"
         ST    R3,SAVER3A         Save position of scan
         OI    KEYWFLG,X'10'      Show we're in the E8 table
         NI    KEYWFLG,X'1F'        And not in any other table
         NI    CONTFLG,X'FF'-X'03'  Turn off all continuations.
         TM    POUTFLG,X'01'        Is LLWAPOUT OPEN?
         BZ    NOLLWAP3             No, don't PUT to it.
         PUT   LLWAPOUT,LITE8       Yes put out header literal.
NOLLWAP3 DS    0H
*---->                            Build E8 table header initially
         L     R3,SVE8ADDR        GETMAINed E8 address
         MVC   0(16,R3),LOADHDR   Start building table
         MVC   6(2,R3),=C'E8'     Show it's the E8 table
         LA    R3,16(,R3)         Bump past table header
         ST    R3,SVE8HOLD        Save place in E8 table
         LA    R8,16              Size of table header
         ST    R8,E8SIZEP         Add to size of table
*---->
         B     GETPSCLU           Keep scanning card image
GETPSCAP DS    0H
         LA    R3,7(,R3)          Bump past "AUTHTSF"
         ST    R3,SAVER3A         Save position of scan
         OI    KEYWFLG,X'80'      Show we're in the AP table
         NI    KEYWFLG,X'8F'        And not in any other table
         NI    CONTFLG,X'FF'-X'03'  Turn off all continuations.
         TM    POUTFLG,X'01'        Is LLWAPOUT OPEN?
         BZ    NOLLWAP4             No, don't PUT to it.
         PUT   LLWAPOUT,LITAP       Yes put out header literal.
NOLLWAP4 DS    0H
*---->                            Build AP table header initially
         L     R3,SVAPADDR        GETMAINed AP address
         MVC   0(16,R3),LOADHDR   Start building table
         MVC   6(2,R3),=C'AP'     Show it's the AP table
         LA    R3,16(,R3)         Bump past table header
         ST    R3,SVAPHOLD        Save place in AP table
         LA    R8,16              Size of table header
         ST    R8,APSIZEP         Add to size of table
*---->
         B     GETPSCLU           Keep scanning card image
GETPSCNS DS    0H
         LA    R3,8(,R3)          Bump past "NOTBKGND"
         ST    R3,SAVER3A         Save position of scan
         OI    KEYWFLG,X'40'      Show we're in the NS table
         NI    KEYWFLG,X'4F'        And not in any other table
         NI    CONTFLG,X'FF'-X'03'  Turn off all continuations.
         TM    POUTFLG,X'01'        Is LLWAPOUT OPEN?
         BZ    NOLLWAP5             No, don't PUT to it.
         PUT   LLWAPOUT,LITNS       Yes put out header literal.
NOLLWAP5 DS    0H
*---->                            Build NS table header initially
         L     R3,SVNSADDR        GETMAINed NS address
         MVC   0(16,R3),LOADHDR   Start building table
         MVC   6(2,R3),=C'NS'     Show it's the NS table
         LA    R3,16(,R3)         Bump past table header
         ST    R3,SVNSHOLD        Save place in NS table
         LA    R8,16              Size of table header
         ST    R8,NSSIZEP         Add to size of table
*---->
         B     GETPSCLU           Keep scanning card image
GETPOPAR DS    0H
         LA    R3,1(,R3)          Bump past open paren
         ST    R3,SAVER3A         Save position of scan
         OI    KEYWFLG,X'04'      Show open paren seen
         NI    KEYWFLG,X'FF'-X'02'  Show no close paren seen
         B     GETPSCLU           Keep scanning card image
GETPCPAR DS    0H
         LA    R3,1(,R3)
         ST    R3,SAVER3A         Save position of scan
         OI    KEYWFLG,X'02'        Show Close Parenthesis seen
         NI    KEYWFLG,X'0F'        And show we're not in any table
         NI    KEYWFLG,X'FF'-X'0C'  And turn off open paren and names
         NI    CONTFLG,X'FF'-X'03'  Turn off all continuations.
         B     GETPSCEN             End scan of card image
GETPNAMS DS    0H
         LA    R3,5(,R3)          Bump past "NAMES" keyword
         ST    R3,SAVER3A         Save position of scan
         OI    KEYWFLG,X'08'      Flag that "NAMES" was seen
         NI    CONTFLG,X'FF'-X'03'
         B     GETPSCLU           Keep scanning card image
GETPSCEN DS    0H                 End of card scan
* --- >
         L     R3,GETPADDR        Load beginning address for next card
         ST    R3,SAVER3A         And store it for safekeeping
         L     R9,SAVER9Z         Restore BAL register
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETPRNAM DS    0H
         ST    R9,SAVER9B
GETPRSTT DS    0H
         L     R3,SAVER3A
         C     R3,GETPEADR        End of the record?
         BH    GETPREND           Past it. Get out.
GETPRELP DS    0H
         TM    KEYWFLG,X'F0'      Are we in the middle of a table?
         BZ    GETPREND           No. Don't search.
         TM    KEYWFLG,X'0C'      Have we seen both NAMES and ( ?
         BO    GETPRSRH           Yes. Keep looking in this card.
         B     GETPREND           No. Don't search further.
GETPRSRH DS    0H
         TM    COMMFLG,X'01'      Are we pointing to a comment?
         BO    GETPREND           Yes. Get out of card search.
* --- >       Search for program names  -  below
         BAL   R9,EXNAMES         Extract names from this card.
         B     GETPREND
* --- >       Search for program names  -  above
GETPRBMP DS    0H
         LA    R3,1(,R3)          Bump card byte location
         ST    R3,SAVER3A         Store new address away
         C     R3,GETPEADR        At the end of the card yet?
         BH    GETPREND           Past it. Get out.
         CLI   0(R3),X'40'        Is this byte a blank?
         BE    GETPRSTT           Yes cycle back and keep trying.
         B     GETPRELP           Not a blank. Try to extract name.
GETPREND DS    0H
* - >
*->  Test for "no continuation" error - below
         TM    KEYWFLG,X'0C'      Names and Open paren present?
         BNO   GETPRGUD           Not true-don't test for continuation
         TM    KEYWFLG,X'F0'      Not inside any table?
         BZ    GETPRGUD           Yes. Don't need continuation.
         TM    CONTFLG,X'04'      Is there a fresh continuation?
         BO    GETPRGUD           Yes, we're OK.
         L     R3,SAVER3A         Get position of R3 after card scan
         C     R3,GETPEADR        Is it at the end of the card?
         BL    GETPRGUD           No. No continuation problem.
         B     ERRNAME1           No. Put out error message and stop.
GETPRGUD DS    0H
         ST    R3,SAVER3A
*->  Test for "no continuation" error - above
         L     R3,GETPADDR        Load beginning address for next card
         ST    R3,SAVER3A         And store it for safekeeping.
         L     R9,SAVER9B
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
EXNAMES  DS    0H
         ST    R9,SAVER9G
         ST    R2,SAVER2C         Save previous reg contents
EXNARRUN DS    0H
         TM    KEYWFLG,X'F0'      Are we in the middle of a table?
         BZ    EXNAMEND           No. Don't search.
EXNAMSTR DS    0H
         L     R3,SAVER3A         Load current position in card image
         ST    R4,SAVER4A         Save previous contents of R4
EXNAMLUP DS    0H                 Loop to remove blanks
         C     R3,GETPEADR        End of the record?
         BH    EXNAMEND           Get out of scan routine
         CLI   0(R3),X'40'        Blank character?
         BNE   EXNAMXTR           Try next one.
         LA    R3,1(,R3)
         ST    R3,SAVER3A
         B     EXNAMLUP
* --                              Non-blank here
EXNAMXTR DS    0H
         BAL   R9,EXPLSMNS        Test for +, -, or close paren
         TM    KEYWFLG,X'01'
         BO    EXNAMEND
         LA    R2,GETPNAME        Point to target for name
         MVC   GETPNAME(8),BLANKS   Initialize to blanks.
         L     R4,=F'8'           This actually detects a size of 9.
EXNAMXLP DS    0H                 Loop to handle non-blanks
         ST    R4,SAVER4B         Save BCT register quantity
* -- >
         C     R3,GETPEADR        End of the record?
         BH    EXNAMEND           Yes, stop scanning
         BAL   R9,EXPLSMNS        Test for +, -, or close paren
         TM    KEYWFLG,X'01'      Get another card on next pass?
         BO    EXNAMEND           Yes. Stop scanning, flags are set.
         TM    COMMFLG,X'01'
         BO    EXCPYNAM
         CLC   =C'*/',0(R3)
         BO    EXCPYNAM
*        TM    KEYWFLG,X'F0'      Out of current table?
*        BO    EXNAMEND           Yes. Stop scanning.
         MVC   0(1,R2),0(R3)      Move current non-blank character
         LA    R2,1(,R2)          Bump target position
         LA    R3,1(,R3)          Bump source position
         ST    R3,SAVER3A         Store source position
         CLI   0(R3),X'40'        Found blank after non-blanks?
         BE    EXCPYNAM           Then copy the non-blanks found.
*--->
         CLI   0(R3),C'+'         Test for plus
         BE    EXCPYNAM
         CLI   0(R3),C'-'         Test for minus
         BE    EXCPYNAM
         CLI   0(R3),C')'         Test for close paren
         BE    EXCPYNAM
         CLC   =C'/*',0(R3)       Test for comment
         BE    EXCPYNAM
         CLC   =C'*/',0(R3)       Test for end of comment
         BE    EXCPYNAM
*--->
         BCT   R4,EXNAMXLP        BCT loop. If falls thru, then error
EXCPYNAM DS    0H
         ST    R4,SAVER4B
* - >                             Did we fall thru the BCT?
         LTR   R4,R4              Should be more than 0.
         BNZ   EXNAMGUD           Not zero. Not 9 chars long.
*  Have at least 9 characters in a row here.
*--->
         CLI   0(R3),C'+'         Test for plus
         BE    EXHANDLE
         CLI   0(R3),C'-'         Test for minus
         BE    EXHANDLE
         CLI   0(R3),C')'         Test for close paren
         BE    EXHANDLE
         CLC   =C'/*',0(R3)       Test for start of comment
         BE    EXHANDLE
         CLC   =C'*/',0(R3)       Test for end of comment
         BE    EXHANDLE
*--->
         B     EXGOON01           None of these--can't be a good name.
EXHANDLE DS    0H
         BAL   R9,HANDLNAM        Copy this name and try for next.
EXGOON01 DS    0H
         BAL   R9,EXPLSMNS        Continuation card found or )
         TM    KEYWFLG,X'01'      Get a new card next time.
         BO    EXNAMEND           Yes. Stop scanning, flags are set.
         TM    COMMFLG,X'01'      Are we in a comment?
         BO    EXNONAM1           Yes. Don't put out names.
         B     ERRNAME1           Name is too long. Flag error.
EXNAMGUD DS    0H
* --                              Insert alphanum check
         BAL   R9,EXPLSMNS     TEST TEST TEST TEST TEST TEST
         CLI   0(R3),C'*'      TEST TEST TEST TEST TEST TEST
         BE    EXNONAM0        TEST TEST TEST TEST TEST TEST
         TM    COMMFLG,X'01'      Are we within a comment?
         BO    EXNONAM1           Yes. Don't put out any found names.
EXNONAM0 DS    0H
         BAL   R9,HANDLNAM        Copy this name and try for next.
EXNONAM1 DS    0H
         LA    R3,1(,R3)          Bump to next place.
         ST    R3,SAVER3A         Store the new location.
         C     R3,GETPEADR        End of the record?
         BH    EXNAMEND           Yes. Get out.
         B     EXNAMLUP           No. Keep scanning for more names.
EXNAMEND DS    0H                 EXIT THIS ROUTINE.
         L     R2,SAVER2C
*        L     R4,SAVER4A
         L     R9,SAVER9G
         BR    R9
EXNAMBMP DS    0H
         LA    R3,1(,R3)          Bump up one place.
         ST    R3,SAVER3A         And save the location.
         B     EXNAMXLP           Go loop back and try some more.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
EXPLSMNS DS    0H              Test for plus, minus, close parenthesis
         ST    R9,SAVER9J
         L     R3,SAVER3A
EXPLSMSS DS    0H              Start tests
         CLI   0(R3),C')'         Close paren?
         BE    EXNAMCLP           End everything and finish card.
         CLI   0(R3),C'+'         + continuation?
         BE    EXNAMPLS           Yes. Process + and finish card.
         CLI   0(R3),C'-'         - continuation?
         BE    EXNAMMNS           Yes. Process - and finish card.
         CLC   0(2,R3),=C'*/'     End of comment?
         BE    EXNPNCOM           Yes. Turn off flag.
         CLC   0(2,R3),=C'/*'     Start of comment?
         BE    EXNPSCOM           Yes. Turn on flag.
         B     EXPLSMFN           End routine and do nothing.
EXNAMPLS DS    0H
         OI    CONTFLG,X'01'      Turn on plus indicator
         NI    CONTFLG,X'01'      Turn off minus indicator
         OI    CONTFLG,X'04'      Fresh continuation in this line.
         B     EXFINISH           Finish with this card.
EXNAMMNS DS    0H
         OI    CONTFLG,X'02'      Turn on minus indicator
         NI    CONTFLG,X'02'      Turn off plus indicator
         OI    CONTFLG,X'04'      Fresh continuation in this line.
         B     EXFINISH           Finish dealing with this card.
EXNAMCLP DS    0H
         NI    KEYWFLG,X'0F'        Say we're not in any table
         NI    KEYWFLG,X'FF'-X'0C'  Say NAMES and Open Paren not found
         OI    KEYWFLG,X'02'        Say Close Paren found
         B     EXFINISH             Stop scanning this card
EXNPSCOM DS    0H                 Entering a comment area
         OI    COMMFLG,X'01'      Flag that we're in comment area
         LA    R3,1(,R3)          Bump past comment symbol
         ST    R3,SAVER3A         Save position of scan
         B     EXPLSMFN           Keep scanning card image
EXNPNCOM DS    0H                 Leaving a comment area
         LA    R3,1(,R3)             Bump past "comment off" symbol
         ST    R3,SAVER3A         Save position of scan
         NI    COMMFLG,X'FF'-X'01'   Turn off comment area flag
         B     EXPLSMFN           Keep scanning card image
EXFINISH DS    0H                 See if name preceded ending char
         L     R4,SAVER4B         Load previous BCT register
         OI    KEYWFLG,X'01'      Signal to get another card
EXPLSMFN DS    0H                 End tests
*        L     R4,SAVER4A
         L     R9,SAVER9J
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HANDLNAM DS    0H                 When PARMLIB input yields a valid
*                                  name, it is outputted here.
         ST    R9,SAVER9K
         CLC   GETPNAME(8),=C'        '  Don't consider blank name
         BE    HANDLNEN                    It is an error.
         CLI   GETPNAME,C'*'             Don't consider if * in col 1.
         BE    HANDLNEN                    It is an error.
         CLI   GETPNAME,C'/'             Don't consider if / in col 1.
         BE    HANDLNEN                    It is an error.
HANDLNDO DS    0H
         TM    LONGFLG,X'01'      Extra diagnostic outputs?
         BZ    HANDLNOO           Flag off. No extras.
         MVC   LINE,LINE-1
         MVC   LINE(8),GETPNAME   Show name that's being put out.
         APUT  LINE,15
HANDLNOO DS    0H
         TM    POUTFLG,X'01'      Is LLWAPOUT OPEN?
         BZ    NOLLWAP6           No. Don't try and PUT to it.
         PUT   LLWAPOUT,GETPNAME  LRECL=8 output.
NOLLWAP6 DS    0H
         BAL   R9,GETPMEAS       Make output LWA table entry in storage
HANDLNEN DS    0H
         L     R9,SAVER9K
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETPMEAS DS    0H                 Output the name found here, to the
*                                  appropriate table to be built.
         ST    R9,SAVER9L
         ST    R3,SAVER3C
GETPSTRL DS    0H
         TM    KEYWFLG,X'2C'      Are we in the E2 table?
         BO    STPLUPE2           Copy the entries there.
         TM    KEYWFLG,X'1C'      Are we in the E8 table?
         BO    STPLUPE8           Copy the entries there.
         TM    KEYWFLG,X'8C'      Are we in the AP table?
         BO    STPLUPAP           Copy the entries there.
         TM    KEYWFLG,X'4C'      Are we in the NS table?
         BO    STPLUPNS           Construct the entries there.
         B     GETPMENN           Not in a table--get out.
*
STPLUPE2 DS    0H
         L     R3,SVE2HOLD        Get current position in table
         MVC   0(8,R3),GETPNAME   Move pgm name into table
         LA    R3,8(,R3)          Bump past current position
         ST    R3,SVE2HOLD        Store new position
         L     R8,E2SIZEP         Get previous table size
         A     R8,=F'8'           Add this entry's increment
         ST    R8,E2SIZEP         Store new table size
STPLUEE2 DS    0H
         B     GETPMENN           Finished with name--get out.
*
STPLUPE8 DS    0H
         L     R3,SVE8HOLD        Get current position in table
         MVC   0(8,R3),GETPNAME   Move pgm name into table
         LA    R3,8(,R3)          Bump past current position
         ST    R3,SVE8HOLD        Store new position
         L     R8,E8SIZEP         Get previous table size
         A     R8,=F'8'           Add this entry's increment
         ST    R8,E8SIZEP         Store new table size
STPLUEE8 DS    0H
         B     GETPMENN           Finished with name--get out.
*
STPLUPAP DS    0H
         L     R3,SVAPHOLD        Get current position in table
         MVC   0(8,R3),GETPNAME   Move pgm name into table
         LA    R3,8(,R3)          Bump past current position
         ST    R3,SVAPHOLD        Store new position
         L     R8,APSIZEP         Get previous table size
         A     R8,=F'8'           Add this entry's increment
         ST    R8,APSIZEP         Store new table size
STPLUEAP DS    0H
         B     GETPMENN           Finished with name--get out.
*
STPLUPNS DS    0H
         MVC   TESTTABL,GETPNAME  Move pgm name to NAMESIZE work area
         BAL   R9,NAMESIZE        Get length of command name
         L     R3,SVNSHOLD        Get current position in table
         MVC   0(2,R3),TESTSIZE   Dump it into the table
         LA    R3,2(,R3)          Bump address by 2 bytes
         MVC   0(8,R3),GETPNAME   Move program name into table
         LA    R3,8(,R3)          Bump address by 8 more bytes
         ST    R3,SVNSHOLD        Repoint current position in table
         L     R8,NSSIZEP         Previous loaded table size
         A     R8,=F'10'          Bump by size of new entry
         ST    R8,NSSIZEP         Store new table size
STPLUENS DS    0H
         B     GETPMENN           Finished handling this name
GETPMENN DS    0H
         L     R9,SAVER9L
         L     R3,SAVER3C
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
E2PNWTAB DS    0H                    Build new E2 table in SP-252.
         ST    R9,KEEPR9A
         L     R5,SVE2ADDR           Entry point of constructed table.
         LH    R4,E2PLNTH            Load measured table length
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,E2PLNTH
         APUT  LINE,60
         TM    LONGFLG,X'02'         Data conversion only?
         BO    E2PNMODE              Skip new table creation.
         MVC   GTSLENG,E2PLNTH
         BAL   R9,GETSTORG         Get SP-252 storage for this table
         MVC   E2ADDR,GTSADDR
         MVC   E2LENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 E2 address:     '
         HEX   LINE+25,4,E2ADDR
         APUT  LINE,60
         L     R0,GTSADDR
         LH    R1,E2PLNTH
         L     R4,SVE2ADDR
         LH    R5,E2PLNTH
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,E2PLNTH
         AR    R2,R3
         MVC   0(240,R2),EIGHTPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of E2 table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATE2,GTSADDR      Load new table address
         MVC   LWATE2LN,E2LENGB    Load new table length
         OI    LWAVFLGS,LWATE2LD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATE2ST   Say it came from PARMLIB
         OI    LWAPRMLB,LWATE2ST
         DROP  R2
E2PNMODE DS    0H
         MODESET KEY=NZERO
E2PNWTEN DS    0H
         L     R9,KEEPR9A
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
E8PNWTAB DS    0H                    Build new E8 table in SP-252.
         ST    R9,KEEPR9B
         L     R5,SVE8ADDR           Entry point of constructed table.
         LH    R4,E8PLNTH            Load measured table length
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,E8PLNTH
         APUT  LINE,60
         TM    LONGFLG,X'02'         Data conversion only?
         BO    E8PNMODE              Skip new table creation.
         MVC   GTSLENG,E8PLNTH
         BAL   R9,GETSTORG         Get SP-252 storage for this table
         MVC   E8ADDR,GTSADDR
         MVC   E8LENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 E8 address:     '
         HEX   LINE+25,4,E8ADDR
         APUT  LINE,60
         L     R0,GTSADDR
         LH    R1,E8PLNTH
         L     R4,SVE8ADDR
         LH    R5,E8PLNTH
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,E8PLNTH
         AR    R2,R3
         MVC   0(240,R2),EIGHTPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of E8 table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATE8,GTSADDR      Load new table address
         MVC   LWATE8LN,E8LENGB    Load new table length
         OI    LWAVFLGS,LWATE8LD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATE8ST   Say it came from PARMLIB
         OI    LWAPRMLB,LWATE8ST
         DROP  R2
E8PNMODE DS    0H
         MODESET KEY=NZERO
E8PNWTEN DS    0H
         L     R9,KEEPR9B
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
APPNWTAB DS    0H                    Build new AP table in SP-252.
         ST    R9,KEEPR9C
         L     R5,SVAPADDR           Entry point of constructed table.
         LH    R4,APPLNTH            Load measured table length
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,APPLNTH
         APUT  LINE,60
         TM    LONGFLG,X'02'         Data conversion only?
         BO    APPNMODE              Skip new table creation.
         MVC   GTSLENG,APPLNTH
         BAL   R9,GETSTORG         Get SP-252 storage for this table
         MVC   APADDR,GTSADDR
         MVC   APLENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 AP address:     '
         HEX   LINE+25,4,APADDR
         APUT  LINE,60
         L     R0,GTSADDR
         LH    R1,APPLNTH
         L     R4,SVAPADDR
         LH    R5,APPLNTH
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,APPLNTH
         AR    R2,R3
         MVC   0(240,R2),EIGHTPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of AP table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATAP,GTSADDR      Load new table address
         MVC   LWATAPLN,APLENGB    Load new table length
         OI    LWAVFLGS,LWATAPLD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATAPST   Say it came from PARMLIB
         OI    LWAPRMLB,LWATAPST
         DROP  R2
APPNMODE DS    0H
         MODESET KEY=NZERO
APPNWTEN DS    0H
         L     R9,KEEPR9C
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEPLIB.  LLWA P
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
NSPNWTAB DS    0H                    Build new NS table in SP-252.
         ST    R9,KEEPR9D
         L     R5,SVNSADDR           Entry point of constructed table.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,NSPLNTH
         APUT  LINE,60
         TM    LONGFLG,X'02'         Data conversion only?
         BO    NSPNMODE              Skip new table creation.
         MVC   GTSLENG,NSPLNTH
*        MODESET KEY=ZERO
         BAL   R9,GETSTORM         Get SP-252 storage for this table
         MVC   NSADDR,GTSADDR
         MVC   NSLENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 NS address:     '
         HEX   LINE+25,4,NSADDR
         APUT  LINE,60
         MODESET KEY=ZERO
         L     R0,GTSADDR
         LH    R1,NSPLNTH
         L     R4,SVNSADDR
         LH    R5,NSPLNTH
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,NSPLNTH
         AR    R2,R3
         MVC   0(104,R2),TENPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of NS table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATNS,GTSADDR      Load new table address
         MVC   LWATNSLN,NSLENGB    Load new table length
         OI    LWAVFLGS,LWATNSLD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATNSST   Say it came from PARMLIB
         OI    LWAPRMLB,LWATNSST
         DROP  R2
NSPNMODE DS    0H
         MODESET KEY=NZERO
NSPNWTEN DS    0H
         L     R9,KEEPR9D
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEDSET.  LLWA D
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
E2DNWTAB DS    0H
         ST    R9,SAVER9C
         L     R5,SVE2ADDR           Entry point of constructed table.
         LH    R4,E2DLNTH            Load measured table length
         LA    R4,16(,R4)            Add size of header
         STH   R4,E2DLNTH            Store new size
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,E2DLNTH
         APUT  LINE,60
         MVC   GTSLENG,E2DLNTH
*        MODESET KEY=ZERO
         BAL   R9,GETSTORG         Get SP-252 storage for this table
         MVC   E2ADDR,GTSADDR
         MVC   E2LENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 E2 address:     '
         HEX   LINE+25,4,E2ADDR
         APUT  LINE,60
         MODESET KEY=ZERO
         L     R0,GTSADDR
         LH    R1,E2DLNTH
         L     R4,SVE2ADDR
         LH    R5,E2DLNTH
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,E2DLNTH
         AR    R2,R3
         MVC   0(240,R2),EIGHTPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of E2 table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATE2,GTSADDR      Load new table address
         MVC   LWATE2LN,E2LENGB    Load new table length
         OI    LWAVFLGS,LWATE2LD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATE2ST   Say it came from PARMLIB
         OI    LWAPRMLB,LWATE2ST
         DROP  R2
         MODESET KEY=NZERO
E2DNWTEN DS    0H
         L     R9,SAVER9C
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEDSET.  LLWA D
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
E8DNWTAB DS    0H
         ST    R9,SAVER9C
         L     R5,SVE8ADDR           Entry point of constructed table.
         LH    R4,E8DLNTH            Load measured table length
         LA    R4,16(,R4)            Add size of header
         STH   R4,E8DLNTH            Store new size
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,E8DLNTH
         APUT  LINE,60
         MVC   GTSLENG,E8DLNTH
         BAL   R9,GETSTORG         Get SP-252 storage for this table
         MVC   E8ADDR,GTSADDR
         MVC   E8LENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 E8 address:     '
         HEX   LINE+25,4,E8ADDR
         APUT  LINE,60
         MODESET KEY=ZERO
         L     R0,GTSADDR
         LH    R1,E8DLNTH
         L     R4,SVE8ADDR
         LH    R5,E8DLNTH
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,E8DLNTH
         AR    R2,R3
         MVC   0(240,R2),EIGHTPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of E8 table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATE8,GTSADDR      Load new table address
         MVC   LWATE8LN,E8LENGB    Load new table length
         OI    LWAVFLGS,LWATE8LD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATE8ST   Say it came from PARMLIB
         OI    LWAPRMLB,LWATE8ST
         DROP  R2
         MODESET KEY=NZERO
E8DNWTEN DS    0H
         L     R9,SAVER9C
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEDSET.  LLWA D
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
APDNWTAB DS    0H
         ST    R9,SAVER9C
         L     R5,SVAPADDR           Entry point of constructed table.
         LH    R4,APDLNTH            Load measured table length
         LA    R4,16(,R4)            Add size of header
         STH   R4,APDLNTH            Store new size
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,APDLNTH
         APUT  LINE,60
         MVC   GTSLENG,APDLNTH
         BAL   R9,GETSTORG         Get SP-252 storage for this table
         MVC   APADDR,GTSADDR
         MVC   APLENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 AP address:     '
         HEX   LINE+25,4,APADDR
         APUT  LINE,60
         MODESET KEY=ZERO
         L     R0,GTSADDR
         LH    R1,APDLNTH
         L     R4,SVAPADDR
         LH    R5,APDLNTH
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,APDLNTH
         AR    R2,R3
         MVC   0(240,R2),EIGHTPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of AP table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATAP,GTSADDR      Load new table address
         MVC   LWATAPLN,APLENGB    Load new table length
         OI    LWAVFLGS,LWATAPLD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATAPST   Say it came from PARMLIB
         OI    LWAPRMLB,LWATAPST
         DROP  R2
         MODESET KEY=NZERO
APDNWTEN DS    0H
         L     R9,SAVER9C
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                             Routine used by USEDSET.  LLWA D
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
NSDNWTAB DS    0H
         ST    R9,SAVER9C
         L     R5,SVNSADDR           Entry point of constructed table.
         LH    R4,NSDLNTH            Load measured table length
         LA    R4,16(,R4)            Add size of header
         STH   R4,NSDLNTH            Store new size
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Measured table length: '
         HEX   LINE+25,2,NSDLNTH
         APUT  LINE,60
         MVC   GTSLENG,NSDLNTH
         BAL   R9,GETSTORM         Get SP-252 storage for this table
         MVC   NSADDR,GTSADDR
         MVC   NSLENGB,GTSLENG     GTSLENG is now bigger. Store size.
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'SP-252 NS address:     '
         HEX   LINE+25,4,NSADDR
         APUT  LINE,60
         MODESET KEY=ZERO
         L     R0,GTSADDR
         LH    R1,NSDLNTH
         L     R4,SVNSADDR
         LH    R5,NSDLNTH
         MVCL  R0,R4          Copy the entire table into SP-252, Key 0
         L     R2,GTSADDR
         LH    R3,NSDLNTH
         AR    R2,R3
         MVC   0(104,R2),TENPAD
         L     R2,GTSADDR
         MVC   LINE,LINE-1
         MVC   LINE(23),=C'Beginning of NS table: '
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE(80),0(R2)
         APUT  LINE,80
         MVC   LINE,LINE-1
         APUT  LINE,40
         L     R2,LWAADDR          Get LWA address
         USING LWA,R2
         MVC   LWATNS,GTSADDR      Load new table address
         MVC   LWATNSLN,NSLENGB    Load new table length
         OI    LWAVFLGS,LWATNSLD   Show new table is loaded
*        NI    LWAPRMLB,X'FF'-LWATNSST   Say it came from PARMLIB
         OI    LWAPRMLB,LWATNSST
         DROP  R2
         MODESET KEY=NZERO
NSDNWTEN DS    0H
         L     R9,SAVER9C
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*    Print characteristics of the allocated datasets.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
PRTJFCB  DS    0H                         Print JFCB
         ST    R9,SAVER9H                 Save the BAL register
         MVC   LINE,LINE-1
         MVC   LINE(17),MSGPRTJF
         MVC   LINE+19(44),JFCBDSNM       DSNAME
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE,MSGMBR
         MVC   LINE+19(8),JFCBELNM        MEMBER NAME
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE,MSGVOLSR              VOLSER
         MVC   LINE+19(6),JFCBVOLS
         MVC   LINE+26(6),JFCBVOLS+6
         MVC   LINE+33(6),JFCBVOLS+12
         MVC   LINE+40(6),JFCBVOLS+18
         MVC   LINE+47(6),JFCBVOLS+24
         APUT  LINE,60
         MVC   LINE,LINE-1
         MVC   LINE,MSGDSORG              DSORG
         MVC   LINE+19(3),=C'IS '
         CLI   JFCDSRG1,JFCORGIS
         BE    PUTDSRG
         MVC   LINE+19(3),=C'ISU'
         CLI   JFCDSRG1,JFCORGIS+JFCORGU
         BE    PUTDSRG
         MVC   LINE+19(3),=C'PS '
         CLI   JFCDSRG1,JFCORGPS
         BE    PUTDSRG
         MVC   LINE+19(3),=C'PSU'
         CLI   JFCDSRG1,JFCORGPS+JFCORGU
         BE    PUTDSRG
         MVC   LINE+19(3),=C'DA '
         CLI   JFCDSRG1,JFCORGDA
         BE    PUTDSRG
         MVC   LINE+19(3),=C'DAU'
         CLI   JFCDSRG1,JFCORGDA+JFCORGU
         BE    PUTDSRG
         MVC   LINE+19(3),=C'PO '
         CLI   JFCDSRG1,JFCORGPO
         BE    PUTDSRG
         MVC   LINE+19(3),=C'POU'
         CLI   JFCDSRG1,JFCORGPO+JFCORGU
         BE    PUTDSRG
         OI    FLAG1,X'01'                FLAG DSORG MISSING
         MVC   LINE+19(15),=C'MISSING OR VSAM'
PUTDSRG  APUT  LINE,60
RECFM    DS    0H
         MVC   LINE,LINE-1
         MVC   LINE,MSGRECFM              RECFM
         LA    R4,LINE+19
         TM    JFCRECFM,JFCUND
         BNO   NOTUND
         MVI   0(R4),C'U'
         OI    FLAG2,X'01'                FLAG RECFM=U
         A     R4,ONE
         B     CHKB
NOTUND   TM    JFCRECFM,JFCFIX
         BNO   NOTFIX
         MVI   0(R4),C'F'
         A     R4,ONE
NOTFIX   TM    JFCRECFM,JFCVAR
         BNO   CHKB
         MVI   0(R4),C'V'
         A     R4,ONE
CHKB     TM    JFCRECFM,JFCRFB
         BNO   NOTBLK
         MVI   0(R4),C'B'
         A     R4,ONE
NOTBLK   TM    JFCRECFM,JFCRFS
         BNO   NOTSCN
         MVI   0(R4),C'S'
         A     R4,ONE
NOTSCN   TM    JFCRECFM,JFCASA
         BNO   NOTASA
         MVI   0(R4),C'A'
         A     R4,ONE
NOTASA   TM    JFCRECFM,JFCMAC
         BNO   PUTRCFM
         MVI   0(R4),C'M'
PUTRCFM  APUT  LINE,60
LRECL    DS    0H
         MVC   LINE,LINE-1                Clear line.
         MVC   LINE,MSGLRECL              Put LRECL skeleton into it.
         SR    R4,R4                      Clear work register
         LH    R4,JFCLRECL                Load LRECL in from JFCB
         C     R4,=F'0'                   Is it zero?
         BNE   LRECPRT                    No. Don't check for RECFM=U.
         TM    FLAG2,X'01'                Is RECFM=U?
         BO    LRECPRT                    Yes-0 is legitimate.
         OI    FLAG1,X'04'
         MVC   LINE+19(7),=C'MISSING'
         B     LRECPUT
LRECPRT  DS    0H
         CVD   R4,DECVALUE
         MVC   LINE+19(12),EDPAT          LRECL
         ED    LINE+19(12),DECVALUE+3
LRECPUT  APUT  LINE,60
BLKSIZE  MVC   LINE,LINE-1
         MVC   LINE,MSGBLKSZ
         SR    R4,R4
         LH    R4,JFCBLKSI
         C     R4,=F'0'
         BNE   BLKSIZEG                   BLOCK SIZE IS GOOD
         OI    FLAG1,X'02'                FLAG BLKSIZE MISSING
         MVC   LINE+19(15),=C'ZERO OR MISSING'
         B     BLKSZPUT
BLKSIZEG CVD   R4,DECVALUE
         MVC   LINE+19(12),EDPAT          BLKSIZE
         ED    LINE+19(12),DECVALUE+3
BLKSZPUT APUT  LINE,60
         L     R9,SAVER9H
         BR    R9
DECVALUE DS    CL8
EDPAT    DC    X'402020206B2020206B202120'
MSGEXP   DC    CL133'0   EXPORT   DSN ='
MSGDSN   DC    CL133'0   BDMUSOUT DSN ='
MSGVOLSR DC    CL133'         VOLSER  ='
MSGMBR   DC    CL133'         MEMBER  ='
MSGDSORG DC    CL133'         DSORG   ='
MSGBLKSZ DC    CL133'         BLKSIZE ='
MSGLRECL DC    CL133'         LRECL   ='
MSGRECFM DC    CL133'         RECFM   ='
         DC    CL133' '
FLAG1    DC    X'00'
*              X'01'               DSORG IS MISSING
FLAG2    DC    X'00'
ONE      DC    F'1'
MSGPRTJF DC    CL17'-------  DSNAME: '
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
OPENPOUT DS    0H                  Conditionally OPEN LLWAPOUT DD
         ST    R9,SAVER9E
         TM    OPENFLG,X'01'       Is the DD name present in TIOT?
         BZ    OPENMSSG            No. It is missing.
         TM    POUTFLG,X'01'       Is the DD name already OPEN?
         BO    OPENPALR            Yes. Bypass the OPEN and RDJFCB.
         OPEN  (LLWAPOUT,(OUTPUT))
         TM    LLWAPOUT+48,X'10'   Is the DD OPEN  ?                     01914
         BZ    OPENFAIL            No. Error message.                    01915
         OI    POUTFLG,X'01'       Show this DD is truly OPEN
         RDJFCB LLWAPOUT
         MVC   MSGPRTJF(8),=C'LLWAPOUT'   Move DD name into message
         BAL   R9,PRTJFCB          Print dataset information
         TM    JFCRECFM,X'80'      Is RECFM fixed?
         BZ    NOTFIXED            No. Send error message.
         CLC   =H'8',JFCLRECL      Is LRECL = 8 ?
         BNE   NOLRECL8            No. Send error message.
OPENPALR DS    0H                  LLWAPOUT DD is already OPWN
         B     OPENPEND
OPENFAIL DS    0H
         B     NOALLOCQ            Error message and exit program.       01915
OPENMSSG DS    0H
         BAL   R9,NOALLOCR         Say that LLWAPOUT DD is missing.
OPENPEND DS    0H
         L     R9,SAVER9E
         BR    R9
POUTFLG  DS    X                   Flag saying LLWAPOUT is OPEN
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
CLOSPOUT DS    0H
         ST    R9,SAVER9E
         TM    POUTFLG,X'01'       Is the LLWAPOUT DD OPEN?
         BZ    CLOSPEND            No. Don't try to CLOSE it.
         CLOSE LLWAPOUT
         NI    POUTFLG,X'FF'-X'01'  Turn off LLWAPOUT OPEN flag.
CLOSPEND DS    0H
         L     R9,SAVER9E
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
FREOLDTB DS    0H
         ST    R9,KEEPR9F
         STM   R15,R1,SAVX1401     Now save registers
         MODESET KEY=ZERO
         LM    R15,R1,SAVX1401     Now restore registers
         STM   R15,R1,SAVE1401     Now save registers
         TM    WICHFLG,X'20'       Which table?
         BZ    FRE2BUFF            Not this one.
         ICM   R1,15,SAVETE2       A(Old Table)
         BZ    FRE2BUFF            B. If Not Available
         LA    R0,0
         ICM   R0,3,SAVETE2L       L(Old Table)
         BZ    FRE2BUFF            B. If Not Available
         FREEMAIN RU,A=(1),LV=(0),SP=252
FRE2BUFF DS    0H
         TM    WICHFLG,X'10'       Which table?
         BZ    FRE8BUFF            Not this one.
         ICM   R1,15,SAVETE8       A(Old Table)
         BZ    FRE8BUFF            B. If Not Available
         LA    R0,0
         ICM   R0,3,SAVETE8L       L(Old Table)
         BZ    FRE8BUFF            B. If Not Available
         FREEMAIN RU,A=(1),LV=(0),SP=252
FRE8BUFF DS    0H
         TM    WICHFLG,X'80'       Which table?
         BZ    FRAPBUFF            Not this one.
         ICM   R1,15,SAVETAP       A(Old Table)
         BZ    FRAPBUFF            B. If Not Available
         LA    R0,0
         ICM   R0,3,SAVETAPL       L(Old Table)
         BZ    FRAPBUFF            B. If Not Available
         FREEMAIN RU,A=(1),LV=(0),SP=252
FRAPBUFF DS    0H
         TM    WICHFLG,X'40'       Which table?
         BZ    FRNSBUFF            Not this one.
         ICM   R1,15,SAVETNS       A(Old Table)
         BZ    FRNSBUFF            B. If Not Available
         LA    R0,0
         ICM   R0,3,SAVETNSL       L(Old Table)
         BZ    FRNSBUFF            B. If Not Available
         FREEMAIN RU,A=(1),LV=(0),SP=252
FRNSBUFF DS    0H
         LM    R15,R1,SAVE1401     Now restore registers
         STM   R15,R1,SAVX1401     Now save registers
         MODESET KEY=NZERO
         LM    R15,R1,SAVX1401     Now restore registers
         L     R9,KEEPR9F
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MEASOL08 DS    0H                 R5 has beginning address of table.
         ST    R9,KEEPR9G           Save BAL register
         ST    R4,SAVER4C           Save work register
         XC    BLNKCNT,BLNKCNT      Zero the counters
         XC    NTRYCNT,NTRYCNT
         LA    R4,16                Count size of header
         LA    R5,16(,R5)           Bump past header
MO08LOOP DS    0H
*     Try (real hard) to detect the end of the table  -  below
         MVC   SAVECHAR(1),0(R5)    Save first character
         CLC   =C'        ',0(R5)   Is this table entry a blank?
         BE    MO08BLNK             Yes. Reached virtual end of table
         CLC   ZEROES8(8),0(R5)     Is this "entry" hex zeros?
         BE    MO08NOBL             Yes. Reached possible junk storage
         CLC   =C' ',0(R5)          Is first character blank?
         BE    MO08NOBL             Yes, not a valid table entry.
         TR    SAVECHAR,TRTPGMNM    Check first char if appropriate.
         CLI   SAVECHAR,X'02'       Not. probably end of table.
         BE    MO08NOBL
         CLC   =C'IKJEFTE2',0(R5)
         BE    MO08NOBL
         CLC   =C'IKJEFTE8',0(R5)
         BE    MO08NOBL
         CLC   =C'IKJEFTAP',0(R5)
         BE    MO08NOBL
         CLC   =C'IKJEFTNS',0(R5)
         BE    MO08NOBL
*     Try (real hard) to detect the end of the table  -  above
         LA    R4,8(,R4)            Count next table entry
         LA    R5,8(,R5)            Bump to next entry
         L     R1,NTRYCNT           Increment "entry count" counter
         A     R1,=F'1'
         ST    R1,NTRYCNT
         B     MO08LOOP             Loop back till perceived table end
MO08BLNK DS    0H
         LA    R4,8(,R4)            Add length of blank entry
         LA    R5,8(,R5)            Bump past blank entry.
         L     R1,BLNKCNT           Increment "blank entry" counter
         A     R1,=F'1'
         ST    R1,BLNKCNT
MO08NOBL DS    0H
         STH   R4,MO08LENG          Store measured length of table.
         ST    R5,MO08END           And record address of table end.
         BO    MO08NOSH             Don't show count again.
MO08NOSH DS    0H
         L     R4,SAVER4C           Restore work register
         L     R9,KEEPR9G           Restore BAL register
         BR    R9
MO08END  DS    F                    Store end-of-table address
MO08LENG DS    H                    Store table length
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MEASOL10 DS    0H                 R5 has beginning address of table.
         ST    R9,KEEPR9H           Save BAL register
         ST    R4,SAVER4D           Save work register
         XC    BLNKCNT,BLNKCNT      Zero the counters
         XC    NTRYCNT,NTRYCNT
         LA    R4,16                Count size of header
         LA    R5,16(,R5)           Bump past header
MO10LOOP DS    0H
         MVC   SAVECHAR(1),2(R5)    Save first character of pgm name
         MVC   SAVECH08(1),9(R5)    Save last character of pgm name
         CLC   BLKSTRNG(10),0(R5)   Full blank entry here?
         BE    MO10BLNK             Yes. Count the blank entry.
         CLC   ENDSTRNG(10),0(R5)   FFFF plus blank pgm name?
         BE    MO10BLNK             Yes. Can still be considered blank.
         CLC   =X'0000',0(R5)       Test-test-test-test-test
         BE    MO10TEST             Test rest of "entry
         B     MO10REST             Not zeros, go on.
MO10TEST DS    0H
         TR    SAVECHAR,TRTPGMNM    Check for strange character.
         CLI   SAVECHAR,X'02'       Is it strange?
         BE    MO10NOBL             Yes. This is not a blank entry.
MO10REST DS    0H
         CLC   =X'FFFF',0(R5)       Test for end string separately.
         BNE   MO10TES2             Not. Not at virtual end of table
         B     MO10NOBL             FFFF alone. Not a blank entry.
MO10TES2 DS    0H
         TR    SAVECHAR,TRTPGMNM    Check first char not upcase alpha.
         CLI   SAVECHAR,X'02'       Not. probably end of table.
         BE    MO10NOBL
         TR    SAVECH08,TRTPGMNM    Check last char not upcase alpha.
         CLI   SAVECH08,X'02'       Not. probably end of table.
         BE    MO10NOBL
         LA    R4,10(,R4)           Count next table entry
         LA    R5,10(,R5)           Bump to next entry
         L     R1,NTRYCNT           Increment "entry count" counter
         A     R1,=F'1'
         ST    R1,NTRYCNT
         B     MO10LOOP             Finished this entry, try for more.
MO10BLNK DS    0H
         LA    R4,10(,R4)           Add length of blank entry
         LA    R5,10(,R5)           Bump past blank entry.
         L     R1,BLNKCNT           Increment "blank entry" counter
         A     R1,=F'1'
         ST    R1,BLNKCNT
MO10NOBL DS    0H
         STH   R4,MO10LENG          Store measured length of table.
         ST    R5,MO10END           And record address of table end.
         BO    MO10NOSH             Don't show count again.
MO10NOSH DS    0H
         L     R4,SAVER4D           Restore work register
         L     R9,KEEPR9H           Restore BAL register
         BR    R9
MO10END  DS    F                    Store end-of-table address
MO10LENG DS    H                    Store table length
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
** ---------------------------------------------------------------- **
**   Here are the rest of the constants for the program.            **
** ---------------------------------------------------------------- **
LITE2    DC    C'---E2---'
LITE8    DC    C'---E8---'
LITAP    DC    C'---AP---'
LITNS    DC    C'---NS---'
WORKLIT  DC    C'        '
BLKSTRNG DC    XL10'00004040404040404040'
ENDSTRNG DC    XL10'FFFF4040404040404040'
ZEROES8  DC    X'0000000000000000'
MASK10   DC    XL10'40202020202020202120'
         DC    C' '
BLANKS   DC    CL90' '                                       '
MESSAGET DC    C'LLWA Command - Replace LWA Auth Tables from Various So-
               urces - xxxxxxxx'
MESSAGEU DC    C'---- -------   ------- --- ---- ------ ---- ------- --x
               ----- - --------'
MESSAG2C DC    C'Command was not invoked APF authorized.'
MESSAG2D DC    C'Nothing was changed.  '
MESSAG2F DC    C'You must say which input file: L-loadlib, D-Dataset, P+
               -Parmlib.'
MESSAG4A DC    C'You need: ALLOC F(LLWALIB) DA(your.load.library) SH RE+
               USE '
MESSAG4B DC    C'Load Library containing tables was not allocated. '
MESSAG4C DC    C'You need: ALLOC F(LLWALST) DA(your.lrecl8.dataset) SH +
               REUSE '
MESSAG4D DC    C'LRECL=8 dataset with program list was not allocated.'
MESSAG4E DC    C'You need: ALLOC F(LLWAPRM) DA(your.IKJTSOxx.member) SH+
                REUSE '
MESSAG4F DC    C'IKJTSOxx-format member was not allocated. '
MESSAG4G DC    C'You need: ALLOC F(LLWAPOUT) DA(your.LRECL8.file) SH RE+
               USE '
MESSAG4H DC    C'No LRECL=8 output produced. Need LLWAPOUT DD name to b+
               e allocated.'
MESSAG4I DC    C'No conversion is possible until the LLWAPOUT DD name i+
               s allocated.'
MESSAG4J DC    C'This run is for data conversion only. No table loading+
                will be done.'
MESSAG4K DC    C'Conversion makes no sense. We already have the LRECL=8+
                input. Program will end.'
MESSAG5A DC    C'LRECL of table dataset is not 8. Not allocated.'
MESSAG5B DC    C'LRECL of table dataset is not 80. Not allocated.'
MESSAG6A DC    C'RECFM of table dataset is not Fixed. '
MESSAG6B DC    C'Allocated LLWALIB is not a load module library.'
MESSAGR0 DC    C'Return Code = 0 '
MESSAGR4 DC    C'Return Code = 4 '
MESSAGR8 DC    C'Return Code = 8 '
MESSAGRC DC    C'Return Code = 12'
         SPACE 3
* ----------------------------------------------------------------- *
*   Literal Pool, thus far.                                         *
* ----------------------------------------------------------------- *
         LTORG
         SPACE 3
CVDAREA  DS    D                   For CVD instruction
SAVEAPUT DS    2D
SAVER1   DS    F                   Save R1 here
SAVER1A  DS    F                   Save R1 here
SAVER2A  DS    F                   Save R2 here
SAVER2B  DS    F                   Save R2 here
SAVER2C  DS    F                   Save R2 here
SAVER2D  DS    F                   Save R2 here
SAVER2E  DS    F                   Save R2 here
SAVER2F  DS    F                   Save R2 here
SAVER3A  DS    F                   Save R3 here
SAVER3B  DS    F                   Save R3 here
SAVER3C  DS    F                   Save R3 here
SAVER4A  DS    F                   Save R4 here
SAVER4B  DS    F                   Save R4 here
SAVER4C  DS    F                   Save R4 here
SAVER4D  DS    F                   Save R4 here
SAVER5A  DS    F                   Save R5 here
SAVER5B  DS    F                   Save R5 here
SAVER5C  DS    F                   Save R5 here
SAVER6   DS    F                   Save R6 here
SAVER6A  DS    F                   Save R6 here
SAVER6B  DS    F                   Save R6 here
SAVER8   DS    F                   Save R8 here
SAVER8A  DS    F                   Save R8 here
SAVER8B  DS    F                   Save R8 here
SAVER9A  DS    F                   BAL Register Save Area
SAVER9B  DS    F                   BAL Register Save Area
SAVER9C  DS    F                   BAL Register Save Area
SAVER9D  DS    F                   BAL Register Save Area
SAVER9E  DS    F                   BAL Register Save Area
SAVER9F  DS    F                   BAL Register Save Area
SAVER9G  DS    F                   BAL Register Save Area
SAVER9H  DS    F                   BAL Register Save Area
SAVER9I  DS    F                   BAL Register Save Area
SAVER9J  DS    F                   BAL Register Save Area
SAVER9K  DS    F                   BAL Register Save Area
SAVER9L  DS    F                   BAL Register Save Area
SAVER9M  DS    F                   BAL Register Save Area
SAVER9N  DS    F                   BAL Register Save Area
SAVER9O  DS    F                   BAL Register Save Area
SAVER9P  DS    F                   BAL Register Save Area
SAVER9Q  DS    F                   BAL Register Save Area
SAVER9R  DS    F                   BAL Register Save Area
SAVER9S  DS    F                   BAL Register Save Area
SAVER9T  DS    F                   BAL Register Save Area
SAVER9U  DS    F                   BAL Register Save Area
SAVER9V  DS    F                   BAL Register Save Area
SAVER9W  DS    F                   BAL Register Save Area
SAVER9X  DS    F                   BAL Register Save Area
SAVER9Y  DS    F                   BAL Register Save Area
SAVER9Z  DS    F                   BAL Register Save Area
KEEPR9A  DS    F                   BAL Register Save Area
KEEPR9B  DS    F                   BAL Register Save Area
KEEPR9C  DS    F                   BAL Register Save Area
KEEPR9D  DS    F                   BAL Register Save Area
KEEPR9E  DS    F                   BAL Register Save Area
KEEPR9F  DS    F                   BAL Register Save Area
KEEPR9G  DS    F                   BAL Register Save Area
KEEPR9H  DS    F                   BAL Register Save Area
* --- >
E2DLNTH  DS    H
E8DLNTH  DS    H
APDLNTH  DS    H
NSDLNTH  DS    H
* --- >
E2PLNTH  DS    H
E8PLNTH  DS    H
APPLNTH  DS    H
NSPLNTH  DS    H
* --- >
E2EPT    DS    F
E8EPT    DS    F
APEPT    DS    F
NSEPT    DS    F
E2END    DS    F
E8END    DS    F
APEND    DS    F
NSEND    DS    F
E2LENG   DS    H
E8LENG   DS    H
APLENG   DS    H
NSLENG   DS    H
E2LENGB  DS    H
E8LENGB  DS    H
APLENGB  DS    H
NSLENGB  DS    H
GTSLENG  DS    H
E2ADDR   DS    F
E8ADDR   DS    F
APADDR   DS    F
NSADDR   DS    F
GTSADDR  DS    F
ME08END  DS    F
ME08LENG DS    H
ME10END  DS    F
ME10LENG DS    H
EIGHTPAD DC    240X'40'
TENPAD   DC    X'0000',CL8' '
         DC    X'0000',CL8' '
         DC    X'0000',CL8' '
         DC    X'0000',CL8' '
         DC    X'0000',CL8' '
         DC    X'0000',CL8' '
         DC    X'0000',CL8' '
         DC    X'0000',CL8' '
         DC    X'0000',CL8' '
         DC    X'0000',CL8' '
         DC    X'FFFF'
TENPADL  EQU   *-TENPAD
OPTSAVE  DC    CL5' '
LOADHDR  DC    CL16'IKJEFT-- PARMLIB'
SAVECHAR DS    X
SAVECH08 DS    X
LONGFLG  DS    X
*              X'01'               Extra diagnostics wanted on P option
*              X'02'               Data conversion only to LRECL=8
COMMFLG  DS    X                   Are we within a comment?
CONTFLG  DS    X                   Did we see continuations?
*              X'01'               A plus was seen
*              X'02'               A minus was seen
KEYWFLG  DS    X                   PARM Scan Keyword flag.
*              X'08'               NAMES    seen
*              X'04'               Open     paren seen
*              X'02'               Close    paren seen
*              X'01'               Go get a new record
*              X'80'               AUTHTSF  seen
*              X'40'               NOTBKGND seen
*              X'20'               AUTHCMD  seen
*              X'10'               AUTHPGM  seen
MODEFLG  DS    X
*              X'01'    L          Input is from Load Library
*              X'02'    D          Input is LRECL=8 program list table
*              X'04'    P          Input is from IKJTSOxx format
DTABFLG  DS    X                                                   m
*              X'80'               Working on AP Table
*              X'40'               Working on NS Table
*              X'20'               Working on E2 Table
*              X'10'               Working on E8 Table
PTABFLG  DS    X                                                   m
*              X'80'               Working on AP Table
*              X'40'               Working on NS Table
*              X'20'               Working on E2 Table
*              X'10'               Working on E8 Table
WICHFLG  DS    X                                                   m
*              X'80'               Only AP Table
*              X'40'               Only NS Table
*              X'20'               Only E2 Table
*              X'10'               Only E8 Table
LWAPFLG  DS    X                   LWAPRMLB flag copied into program
*              X'80'               LWATAPST TAP came from STEPLIB
*              X'40'               LWATNSST TNS came from STEPLIB
*              X'20'               LWATE2ST TE2 came from STEPLIB
*              X'10'               LWATE8ST TE8 came from STEPLIB
LWAMFLG  DS    X                   Which tables have a size in the LWA.
*              X'80'               AP has a size in the LWA.
*              X'40'               NS has a size in the LWA.
*              X'20'               E2 has a size in the LWA.
*              X'10'               E8 has a size in the LWA.
WORKFLG  DS    X
LOADEFLG DS    X
GETPNAME DC    CL8' '
PARMLBIN DC    F'0'
PARMLDEC DC    PL8'0'
         DS    CL1
*
         DS    0F                  NEEDED FOR CORRECT EXLST
JFCB1    DC    X'87'
         DC    AL3(INFMJFCB)
         IEFJFCBN LIST=YES
*
         DS    0F                  ALIGN ON FULLWORD
LLWALIB  DCB   DSORG=PO,MACRF=R,DDNAME=LLWALIB,EXLST=JFCB1
LLWALST  DCB   DDNAME=LLWALST,MACRF=GL,DSORG=PS,RECFM=FB,              X
               LRECL=8,EXLST=JFCB1,EODAD=GETLOOPE
LLWAPRM  DCB   DDNAME=LLWAPRM,MACRF=GL,DSORG=PS,RECFM=FB,EXLST=JFCB1,  X
               LRECL=80,EODAD=GETPMEND
LLWAPOUT DCB   DDNAME=LLWAPOUT,MACRF=PM,DSORG=PS,                      X
               EXLST=JFCB1
* ------------------------------------------------------------------- *
*  Note.  The LLWAPOUT DCB cannot have an LRECL associated with it.   *
*         This is because it is an output dataset, and if the LRECL   *
*         is not 8, then running our program would change it to be 8. *
*         This is not good.  Rather, we will not define the LRECL     *
*         in this DCB, but after it is allocated and OPENed, the      *
*         RDJFCB will catch the error and abort the program.          *
* ------------------------------------------------------------------- *
GETPADDR DS    F                   Address of GETPWORK
GETPEADR DS    F                   Address of end of card scan
*
LINEB    DS    C                   LINE-1
LINE     DS    CL137               Output line area
LINET    EQU   LINE+7              Indented line
GETPINIT DS    C
GETPWORK DS    CL80
* --- >
BLNKCNT  DS    F
NTRYCNT  DS    F
* --- >
         SPACE
TRTPGMNM DC    X'02020202020202020202020202020202'
         DC    X'02020202020202020202020202020202'
         DC    X'02020202020202020202020202020202'
         DC    X'02020202020202020202020202020202'
         DC    X'40020202020202020202020202020202'
         DC    X'02020202020202020202025B02020202'
         DC    X'02020202020202020202020202020202'
         DC    X'02020202020202020202027B7C020202'
         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'
         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'
         DC    X'0202E2E3E4E5E6E7E8E9020202020202'
         DC    X'02020202020202020202020202020202'
         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'
         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'
         DC    X'0202E2E3E4E5E6E7E8E9020202020202'
         DC    X'02020202020202020202020202020202'
         SPACE
         IKJCPPL
         IKJPSCB
         CVT      LIST=YES,DSECT=YES
         IKJTSVT
         IKJEFLWA
         END
* ------------------------------------------------------------------- *
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
