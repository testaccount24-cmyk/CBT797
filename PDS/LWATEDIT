LWATEDIT TITLE '- LWATEDIT - LWA Auth Table Editor'
*---------------------------------------------------------------------*
*                 |                                                   *
* L W A T E D I T |                                                   *
*                 |          Logon WorkArea Table Editor              *
*------------------                                                   *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    FUNCTION:     Use ISPF Services to EDIT the TSO user's           *
*                  authorization tables.                              *
*                                                                     *
*                  The update of these tables is performed by the     *
*                  "LWATMGR BUILD" command function.                  *
*                  This means that LWATMGR must be accessable to      *
*                  you either via STEPLIB or LNKLST.                  *
*                                                                     *
* Special Note: LWATMGR must be added to the AUTHTSF (IKJEFTAP) table.*
*               Otherwise the call to LWATMGR (using the IKJEFTSR     *
*               interface) will fail.                                 *
*                                                                     *
*                                                                     *
*       PARMS:  This program must be selected as a command in ISPF.   *
*                                                                     *
*                                                                     *
* REGISTER USAGE:   R0 - PSA                                          *
*                   R1 - Work Register                                *
*                   R2 - Work Register                                *
*                   R3 - Work Register                                *
*                   R4 - Work Register                                *
*                   R5 - Work Register                                *
*                   R6 - Work Register                                *
*                   R7 - Work Register                                *
*                   R8 - CPPL                                         *
*                   R9 - Work Register                                *
*                  R10 - PCL                                          *
*                  R11 - Not Used                                     *
*                  R12 - Base Register #1                             *
*                  R13 - Work Area Base Register (24-Bit Storage)     *
*                  R14 - Return Address                               *
*                  R15 - Return Code                                  *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*

*---------------------------------------------------------------------*
*                                                                     *
*     HISTORY: #V01R001 - NOV 07,2008 -  In The Beginning...          *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT 1
*---------------------------------------------------------------------*
*                                                                     *
*        Instream Macros                                              *
*                                                                     *
*---------------------------------------------------------------------*

         MACRO ,
&NAME    #SAVE ,
SUBRTNS  LOCTR ,
&NAME    ST    R15,STACK15         Save Work Register
         L     R15,STACKNX@        A(Next Save Area)
         C     R15,STACKEND        Check If Stack Has Overflowed
         JL    #&SYSNDX            B. If Not
         ABEND 1                   User Abend
#&SYSNDX STM   R0,R14,0(R15)       Save Registers 0 Through 14
         MVC   15*4(4,R15),STACK15 Save R15 As Well
         AHI   R15,16*4            A(Next Save Area)
         ST    R15,STACKNX@        Save Next Save Area Address
         BALR  R11,0               Initialize Subroutine Base
         USING *,R11
         MEND  ,

         MACRO ,
&NAME    #RESTORE &R15=
&NAME    DS    0H
         AIF   ('&R15' EQ '').REST030
         AIF   ('&R15'(1,1) EQ '(').REST010
         LA    R15,&R15            Set Return Code
         AGO   .REST020
.REST010 ANOP  ,
         AIF   ('&R15' EQ '(R15)').REST020
         LR    R15,&R15(1)         Set Return Code
.REST020 ANOP  ,
         ST    R15,WRKR15          Save Return Code Value
.REST030 ANOP  ,
         L     R15,STACKNX@        A(Next Save Area)
         SHI   R15,16*4            A(Current Save Area)
         ST    R15,STACKNX@        Restore Next Save Area Address
         LM    R0,R15,0(R15)       Restore All Registers
         J     #&SYSNDX
         #EXEC ,                   Executed Statements
         LTORG ,                   Literal Pool
#&SYSNDX DS    0H
         AIF   ('&R15' EQ '').REST040
         L     R15,WRKR15          Restore Return Code Value
.REST040 ANOP  ,
         MEND  ,

         MACRO ,
&NAME    #CALL &RTN
&NAME    L     R15,=A(&RTN)        A(Processing Routine)
         BALR  R14,R15             Call Subroutine
         MEND  ,

         EJECT 1
LWATEDIT #START ,                  Start Mainline                      *
               BASE=(R12),         Define Base Register(s)             *
               WKDSECT=WRKLWAED,   Define Work Area Name               *
               LOC=BELOW,          Acquire Work Area Below The Line    *
               REG1=R8,            Command Parameter List              *
               AMODE=31,RMODE=ANY, Execute In AMODE 31, RMODE Any      *
               USING=(PSA,0,CPPL,R8),                                  *
               LEVEL=#V01R001      Version Identifier

*-------
*        Initialize Save Area Stack Pointers
*-------
         LA    R1,STACK            A(Start Of Save Area Stack)
         ST    R1,STACKNX@         Save "Next" Address
         AH    R1,=AL2(STACKLEN)   A(End Of Save Area Stack)
         ST    R1,STACKEND         Save "End" Address

         MVI   BLANKS,C' '         Initialize BLANKS Area
         MVC   BLANKS+1(L'BLANKS-1),BLANKS

*---------------------------------------------------------------------*
*                                                                     *
*        Locate and Validate The LWA                                  *
*                                                                     *
*---------------------------------------------------------------------*
         L     R14,PSAAOLD         A(ASCB)
         USING ASCB,R14
         L     R14,ASCBASXB        A(ASXB)
         USING ASXB,R14
         L     R14,ASXBLWA         A(LWA)
         ST    R14,WRKLWA@         Save LWA Address
         USING LWA,R14

         C     R14,LWAPPTR         Check If LWA Points To Itself
         BNE   LWA00400            B. If Not
         CLC   LWALWA,=C'   LWA  ' Check LWA Identifier
         BNE   LWA00400            B. If Valid


*-------
*        Save The Authorization Table Pointer Addresses
*-------
         LA    R0,LWATAP           A(IKJEFTAP Pointer)
         ST    R0,WRKTAPP@
         LA    R0,LWATAPLN         A(IKJEFTAP Length)
         ST    R0,WRKTAPL@
         MVC   WRKTAPL,LWATAPLN    Save IKJEFTAP Length
         TM    LWAPRMLB,LWATAPST   Did IKJEFTAP Come From //STEPLIB
         BZ    LWA00100            B. If Not
         OI    WRKTAPF,WRK$STEP
LWA00100 DS    0H
         LA    R0,LWATE2           A(IKJEFTE2 Pointer)
         ST    R0,WRKTE2P@
         LA    R0,LWATE2LN         A(IKJEFTE2 Length)
         ST    R0,WRKTE2L@
         MVC   WRKTE2L,LWATE2LN    Save IKJEFTE2 Length
         TM    LWAPRMLB,LWATE2ST   Did IKJEFTE2 Come From //STEPLIB
         BZ    LWA00200            B. If Not
         OI    WRKTE2F,WRK$STEP
LWA00200 DS    0H
         LA    R0,LWATE8           A(IKJEFTE8 Pointer)
         ST    R0,WRKTE8P@
         LA    R0,LWATE8LN         A(IKJEFTE8 Length)
         ST    R0,WRKTE8L@
         MVC   WRKTE8L,LWATE8LN    Save IKJEFTE8 Length
         TM    LWAPRMLB,LWATE8ST   Did IKJEFTE8 Come From //STEPLIB
         BZ    LWA00300            B. If Not
         OI    WRKTE8F,WRK$STEP
LWA00300 DS    0H
         LA    R0,LWATNS           A(IKJEFTNS Pointer)
         ST    R0,WRKTNSP@
         LA    R0,LWATNSLN         A(IKJEFTNS Length)
         ST    R0,WRKTNSL@
         MVC   WRKTNSL,LWATNSLN    Save IKJEFTNS Length
         TM    LWAPRMLB,LWATNSST   Did IKJEFTNS Come From //STEPLIB
         BZ    LWA00500            B. If Not
         OI    WRKTNSF,WRK$STEP
         B     LWA00500
         DROP  R14

LWA00400 DS    0H
         LHI   R0,1                Message Contains 1 Segment
         L     R1,=A(#MSG001)      A(Error Message)
         OI    WRKFLAG,$ERROR      Force Message To Be Written
         #CALL PUTLINE             Write Message
         B     LWAEXIT

*---------------------------------------------------------------------*
*                                                                     *
*        Save the TSO control block addresses                         *
*                                                                     *
*---------------------------------------------------------------------*
LWA00500 DS    0H
         L     R0,CPPLUPT          A(UPT)
         ST    R0,WRKUPT@
         L     R0,CPPLECT          A(ECT)
         ST    R0,WRKECT@

*---------------------------------------------------------------------*
*                                                                     *
*        Process The Tables Via ISPF EDIT                             *
*                                                                     *
*---------------------------------------------------------------------*

*-------
*        Check For ISPF Environment
*-------
         LINK  EP=ISPQRY           Check For An ISPF Enfironment
         LTR   R15,R15             Check Return Code
         BZ    LWA00600            B. If ISPF Is Available
         ST    R15,WRKR15          Save Return Code

         LHI   R0,2                Message Contains 2 Segment
         MVC   WRKINS1(4),=AL2(4+8,#MSG0021)
         UNPK  WRKINS1+4(9),WRKR15(5)
         L     R15,=A(HEXTABLE-C'0')
         TR    WRKINS1+4(8),0(R15)
         MVI   WRKINS1+4+8,C' '
         L     R1,=A(#MSG002)      A(Error Message)
         LA    R2,WRKINS1          A(Insert #1)
         OI    WRKFLAG,$ERROR      Force Message To Be Written
         #CALL PUTLINE             Write Message
         B     LWAEXIT

*-------
*        Define ISPF Variables
*-------
LWA00600 DS    0H
         ISPLINK LOAD,SAVE=WRKLINK@,LIST=WRKCALL

         ISPLINK 'VDEFINE ','DATAID  ',DATAID,'CHAR ',8
         ISPLINK 'VDEFINE ','SEL1    ',WRKSEL1,'CHAR ',1
         ISPLINK 'VDEFINE ','SEL2    ',WRKSEL2,'CHAR ',1
         ISPLINK 'VDEFINE ','SEL3    ',WRKSEL3,'CHAR ',1
         ISPLINK 'VDEFINE ','SEL4    ',WRKSEL4,'CHAR ',1
         ISPLINK 'VDEFINE ','TEMPMSG ',TEMPMSG,'CHAR ',8
         ISPLINK 'VDEFINE ','TEMPREC ',TEMPREC,'CHAR ',80
         ISPLINK 'VDEFINE ','ZDSN    ',WRKZDSN,'CHAR ',44
         ISPLINK 'VDEFINE ','ZMEMB   ',WRKCMDNM,'CHAR ',8
         ISPLINK 'VDEFINE ','ZTEMPF  ',ZTEMPF,'CHAR ',44
         ISPLINK 'VDEFINE ','ZTEMPN  ',ZTEMPN,'CHAR ',8

LWA00700 DS    0H
         MVI   WRKSEL1,C' '        Initialize
         MVI   WRKSEL2,C' '        .  Panel
         MVI   WRKSEL3,C' '        .     Selection
         MVI   WRKSEL4,C' '        .        Options

         ISPLINK 'DISPLAY ','LWAEDIT1',ERROR=LWA01500

*-------
*        Edit "AUTHTSF" Table
*-------
         CLI   WRKSEL1,C'/'        Check If "AUTHTSF"  Selected
         BNE   LWA00900            B. If Not

         MVC   WRKCMDNL,=AL2(7)
         MVC   WRKCMDNM,=C'AUTHTSF '
         MVC   WRKTABNM,=C'---AP---'
         MVC   WRKTABEL,=AL2(8)    Set Table Entry Length

         L     R15,WRKTAPP@
         MVC   WRKTAB@,0(R15)      Set Table Address
         L     R15,WRKTAB@
         AHI   R15,16              A(1st Table Entry)
         ST    R15,WRKTABE@
         L     R15,WRKTAPL@
         MVC   WRKTABL,0(R15)      Set Table Length

         ICM   R0,3,WRKTABL        Check If Table Has A Length
         BNZ   LWA00800            B. If Yes
         #CALL SETTABL             Else. Calculate Table Length

LWA00800 DS    0H
         #CALL EDIT                Edit The Table Entries

*-------
*        Edit "AUTHCMD" Table
*-------
LWA00900 DS    0H
         CLI   WRKSEL2,C'/'        Check If "AUTHCMD"  Selected
         BNE   LWA01100            B. If Not

         MVC   WRKCMDNL,=AL2(7)
         MVC   WRKCMDNM,=C'AUTHCMD '
         MVC   WRKTABNM,=C'---E2---'
         MVC   WRKTABEL,=AL2(8)    Set Table Entry Length

         L     R15,WRKTE2P@
         MVC   WRKTAB@,0(R15)      Set Table Address
         L     R15,WRKTAB@
         AHI   R15,16              A(1st Table Entry)
         ST    R15,WRKTABE@
         L     R15,WRKTE2L@
         MVC   WRKTABL,0(R15)      Set Table Length

         ICM   R0,3,WRKTABL        Check If Table Has A Length
         BNZ   LWA01000            B. If Yes
         #CALL SETTABL             Else. Calculate Table Length

LWA01000 DS    0H
         #CALL EDIT                Edit The Table Entries

*-------
*        Edit "AUTHPGM" Table
*-------
LWA01100 DS    0H
         CLI   WRKSEL3,C'/'        Check If "AUTHPGM"  Selected
         BNE   LWA01300            B. If Not

         MVC   WRKCMDNL,=AL2(7)
         MVC   WRKCMDNM,=C'AUTHPGM '
         MVC   WRKTABNM,=C'---E8---'
         MVC   WRKTABEL,=AL2(8)    Set Table Entry Length

         L     R15,WRKTE8P@
         MVC   WRKTAB@,0(R15)      Set Table Address
         L     R15,WRKTAB@
         AHI   R15,16              A(1st Table Entry)
         ST    R15,WRKTABE@
         L     R15,WRKTE8L@
         MVC   WRKTABL,0(R15)      Set Table Length

         ICM   R0,3,WRKTABL        Check If Table Has A Length
         BNZ   LWA01200            B. If Yes
         #CALL SETTABL             Else. Calculate Table Length

LWA01200 DS    0H
         #CALL EDIT                Edit The Table Entries

*-------
*        Edit "NOTBKGND" Table
*-------
LWA01300 DS    0H
         CLI   WRKSEL4,C'/'        Check If "NOTBKGND" Selected
         BNE   LWA00700            B. If Not

         MVC   WRKCMDNL,=AL2(8)
         MVC   WRKCMDNM,=C'NOTBKGND'
         MVC   WRKTABNM,=C'---NS---'
         MVC   WRKTABEL,=AL2(10)   Set Table Entry Length

         L     R15,WRKTNSP@
         MVC   WRKTAB@,0(R15)      Set Table Address
         L     R15,WRKTAB@
         AHI   R15,16              A(1st Table Entry)
         ST    R15,WRKTABE@
         L     R15,WRKTNSL@
         MVC   WRKTABL,0(R15)      Set Table Length

         ICM   R0,3,WRKTABL        Check If Table Has A Length
         BNZ   LWA01400            B. If Yes
         #CALL SETTABL             Else. Calculate Table Length

LWA01400 DS    0H
         #CALL EDIT                Edit The Table Entries

         B     LWA00700

*-------
*        Delete ISPF Variables and Terminate
*-------
LWA01500 DS    0H
         ISPLINK 'VDELETE ','* '   Delete All Defined Variables
         ISPLINK UNLOAD            Delete ISPLINK Routine

*---------------------------------------------------------------------*
*                                                                     *
*        Terminate                                                    *
*                                                                     *
*---------------------------------------------------------------------*
LWAEXIT  DS    0H
         #CALL CLEANUP             Free All Acquired Storage

         #STOP ,                   Terminate

*---------------------------------------------------------------------*
*                                                                     *
*        Constants                                                    *
*                                                                     *
*---------------------------------------------------------------------*

         LTORG ,                   Literal Pool
         #EXEC ,                   Executed Statements

#MSG001  #MSG  'LWAE01I LWA control block is not valid'

#MSG002  #MSG  'LWAE02I This Program Requires An ISPF Environment.  ISP*
               QRY Return Code  '
#MSG0021 EQU   71,8                Insert Offset & Length

#MSG003  #MSG  'LWAE03I R15=, IKJEFTSR RC= RS= ABEND= '
#MSG0031 EQU   12,8                Insert Offset & Length
#MSG0032 EQU   26,8                Insert Offset & Length
#MSG0033 EQU   30,8                Insert Offset & Length
#MSG0034 EQU   37,8                Insert Offset & Length

HEXTABLE DC    C'0123456789ABCDEF'

CONVDASH DC    256AL1(*-CONVDASH)
         ORG   CONVDASH+C' '
         DC    C'-'                Convert Blanks To Dashes
         ORG   ,

*---------------------------------------------------------------------*
*                                                                     *
*        Subroutines                                                  *
*                                                                     *
*---------------------------------------------------------------------*

LWATEDIT LOCTR ,

*---------------------------------------------------------------------*
*                                                                     *
*        Perform Program Termination Cleanup                          *
*                                                                     *
*---------------------------------------------------------------------*

         PUSH  USING
CLEANUP  #SAVE ,                   Save All Registers

         ICM   R1,15,WRKBUFF@      A(Parmlib Read Buffer)
         BZ    CLEA0200            B. If Not Available
         ICM   R0,15,WRKBUFFL      L(Parmlib Read Buffer)
         BZ    CLEA0200            B. If Not Available
         XC    WRKBUFF@,WRKBUFF@
         FREEMAIN RU,A=(1),LV=(0)

CLEA0200 DS    0H
         ICM   R1,15,WRKMSGB@      A(Buffer)
         BZ    CLEA0300            B. If Not Available
         ICM   R0,15,WRKMSGBL      L(Buffer)
         BZ    CLEA0300            B. If Not Available
         XC    WRKMSGB@,WRKMSGB@
         FREEMAIN RU,A=(1),LV=(0)

CLEA0300 DS    0H
         ICM   R1,15,WRKCBUF@      A(Buffer)
         BZ    CLEANXIT            B. If Not Available
         ICM   R0,15,WRKCBUFL      L(Buffer)
         BZ    CLEANXIT            B. If Not Available
         XC    WRKCBUF@,WRKCBUF@
         FREEMAIN RU,A=(1),LV=(0)

CLEANXIT #RESTORE ,                Restore All Registers

         BR    R14                 Return To Caller
         POP   USING

LWATEDIT LOCTR ,

*---------------------------------------------------------------------*
*                                                                     *
*        Use ISPF EDIT To Process The Authorization Table Entries     *
*                                                                     *
*---------------------------------------------------------------------*

         PUSH  USING
EDIT     #SAVE ,                   Save All Registers

         L     R15,WRKTAB@         A(Current Table)
         AH    R15,WRKTABL         A(End Of Current Table)
         ST    R15,WRKTABX@        Save End Of Table Address
         SH    R15,WRKTABEL        A(Last Entry In Table)

         CLC   WRKTABEL,=AL2(8)    Check For Normal Entry
         BE    EDIT0100            B. If Yes
         ICM   R0,3,0(R15)         Check If Entry Length Is Zero
         BZ    EDIT0200            B. If Yes (End Of Table)
         CLC   0(2,R15),=X'FFFF'   Check For Terminating Entry
         BE    EDIT0200            B. If Yes (End Of Table)
         TM    2(R15),X'BF'        Check If Entry Is Blank Or Zeros
         BZ    EDIT0200            B. If Yes (End Of Table)
         B     EDIT0300            Else. Last Entry Is Used

EDIT0100 DS    0H
         TM    0(R15),X'BF'        Check If Entry Is Blank Or Zeros
         BZ    EDIT0200            B. If Yes (End Of Table)
         B     EDIT0300            Else. Last Entry Is Used

EDIT0200 DS    0H
         ST    R15,WRKTABX@        Save End Of Table Address

EDIT0300 DS    0H
         MVC   WRKDSN,BLANKS
         MVC   WRKDSN(8),WRKCMDNM  Put Table Name in EDIT Heading
         ICM   R15,15,WRKTAB@      A(Current Table)
         BZ    EDITEXIT            B. If No Table
         MVC   WRKDSN+9(16),0(R15) Copy Table Header To Edit Heading
         UNPK  WRKDSN+26(9),WRKTAB@(5)
         L     R15,=A(HEXTABLE-C'0')
         TR    WRKDSN+26(8),0(R15) Insert Table Address
         MVI   WRKDSN+26+8,C' '
         L     R15,=A(CONVDASH)
         TR    WRKDSN(34),0(R15)   Convert Blanks To Dashes

         MVC   WRKZDSN,BLANKS
         MVC   WRKZDSN(18),=C'LWA.IKJEFTxx.TABLE'
         MVC   WRKZDSN+10(2),WRKTABNM+3

         ISPLINK 'FTOPEN ','TEMP ' Allocate An SPFTEMP.CNTL Data Set
         ISPLINK 'VGET ','(ZTEMPF ZTEMPN)','ASIS '
         ISPLINK 'FTCLOSE ',,ZTEMPF

         ISPLINK 'LMINIT ','DATAID ',,,,,,,,ZTEMPN,,'EXCLU '
         ISPLINK 'LMOPEN ',DATAID,'OUTPUT '
         MVC   TEMPREC,BLANKS
         MVC   TEMPREC(8),WRKTABNM
         ISPLINK 'LMPUT',DATAID,'INVAR ','TEMPREC ',80

         MVI   WRKUPDTE,C'N'       Initialize "Update" Flag

         ST    R13,WRKR13          Save WorkArea Address
         ISPLINK 'EDIF ',WRKDSN,'LWAPROF ','F ',8,                     *
               A(EDIFREAD),A(EDIFWRITE),0,WRKR13

         MVC   TEMPREC,BLANKS
         LHI   R3,5                Add 5 Blank Slots For Use By TSUB
EDIT0400 DS    0H
         ISPLINK 'LMPUT',DATAID,'INVAR ','TEMPREC ',80
         BCT   R3,EDIT0400

         ISPLINK 'LMCLOSE ',DATAID Close The ISPTEMP File
         ISPLINK 'LMFREE ',DATAID  Free The ISPTEMP File

         CLI   WRKUPDTE,C'N'       Check If An Update Has Occurred
         BE    EDITEXIT            B. If Not

         MVC   WRKTSRFL,=AL1(0,0,1,1) Set IKJEFTSR Flags
         MVC   WRKTSRC,BLANKS      Clear Command Buffer
         MVC   WRKTSRC(19),=C'LWATMGR BUILD LIST('
         MVI   WRKTSRC+19,C''''    Insert Leading Quote
         MVC   WRKTSRC+20(44),ZTEMPF
         L     R15,=A(FINDBLANK)
         TRT   WRKTSRC+20(45),0(R15)
         MVI   0(R1),C''''         Insert Trailing Quote
         MVI   1(R1),C')'          Close the "LIST" Operand
         LA    R15,2(,R1)          A(End Of DSName)
         MVC   0(6,R15),=C' NOMSG' Don't Issue Messages
         LA    R15,6(,R15)         A(End Of Command)
         LA    R14,WRKTSRC         A(Start Of Command)
         SR    R15,R14
         ST    R15,WRKTSRCL        Save Command Length
         XC    WRKRETCD,WRKRETCD
         XC    WRKRSNCD,WRKRSNCD
         XC    WRKABNCD,WRKABNCD

         L     R15,CVTPTR             A(CVT)
         L     R15,CVTTVT-CVT(,R15)   A(TSVT)
         L     R15,TSVTASF-TSVT(,R15) A(Interface Routine)
         CALL  (15),(WRKTSRFL,     Invoke IKJEFTSR Service Routine     *
               WRKTSRC,            - Command                           *
               WRKTSRCL,           - Command Length                    *
               WRKRETCD,           - Return Code                       *
               WRKRSNCD,           - Reason Code                       *
               WRKABNCD),          - Abend  Code                       *
               VL,MF=(E,WRKTSRPL)

         LTR   R15,R15             Check Return Code
         BZ    EDIT0500            B. If Successful

         ST    R15,WRKR15          Save Return Code

         MVC   WRKINS1(4),=AL2(4+8,#MSG0031)
         UNPK  WRKINS1+4(9),WRKR15(5)
         L     R15,=A(HEXTABLE-C'0')
         TR    WRKINS1+4(8),0(R15)
         MVC   WRKINS2(4),=AL2(4+8,#MSG0032)
         UNPK  WRKINS2+4(9),WRKRETCD(5)
         L     R15,=A(HEXTABLE-C'0')
         TR    WRKINS2+4(8),0(R15)
         MVC   WRKINS3(4),=AL2(4+8,#MSG0033)
         UNPK  WRKINS3+4(9),WRKRSNCD(5)
         L     R15,=A(HEXTABLE-C'0')
         TR    WRKINS3+4(8),0(R15)
         MVC   WRKINS4(4),=AL2(4+8,#MSG0034)
         UNPK  WRKINS4+4(9),WRKABNCD(5)
         L     R15,=A(HEXTABLE-C'0')
         TR    WRKINS4+4(8),0(R15)

         LHI   R0,5                Message Contains 5 Segments
         L     R1,=A(#MSG003)      A(Error Message)
         LA    R2,WRKINS1          A(Insert #1)
         LA    R3,WRKINS2          A(Insert #2)
         LA    R4,WRKINS3          A(Insert #3)
         LA    R5,WRKINS4          A(Insert #4)
         OI    WRKFLAG,$ERROR      Force Message To Be Written
         #CALL PUTLINE             Write Message

         B     EDITEXIT

EDIT0500 DS    0H
         ISPLINK 'SETMSG ','ISRE016 '

EDITEXIT #RESTORE ,                Restore All Registers
         BR    R14                 Return To Caller

         POP   USING

LWATEDIT LOCTR ,

*---------------------------------------------------------------------*
*                                                                     *
*        ISPF EDIF "READ" Routine                                     *
*                                                                     *
*---------------------------------------------------------------------*

SUBRTNS  LOCTR ,

         PUSH  USING
EDIFREAD STM   R14,R12,12(R13)     Save Caller's Registers
         BASR  R11,0               Set Subroutine Base
         USING *,R11

         LR    R10,R13             Save Caller's Save Area Address
         L     R13,12(,R1)         A(Save Area Passed By ISPF)
         L     R13,0(,R13)         A(Mainline Work Area)

         L     R5,8(,R1)
         L     R5,0(,R5)           Request Code (1-1st 0-Next)
         L     R4,0(,R1)           A(Recored Area)

         L     R6,WRKTABE@         Calculate Record Offset
         C     R6,WRKTABX@         Check If Past End Of Table
         BNL   EDIFR200            B. If Yes

         CLC   WRKTABEL,=AL2(8)    Check For Normal Entry
         BE    EDIFR100            B. If Yes
         AHI   R6,2                Skip Record Prefix

EDIFR100 DS    0H
         CLI   0(R6),C' '          Check For Blank Entry
         BE    EDIFR200            B. If Yes (Logical End)
         ST    R6,0(,R4)           Pass Entry Address To ISPF

         AHI   R6,8                A(Next Entry Address)
         ST    R6,WRKTABE@

         LHI   R15,0               Set Return Code
         B     EDIFRXIT

EDIFR200 DS    0H
         LHI   R15,8               Set Return Code
         B     EDIFRXIT

EDIFRXIT DS    0H
         ST    R15,16(,R10)        Save Return Code
         LR    R13,R10             A(Caller's Save Area)
         LM    R14,R12,12(R13)     Restore Caller's Registers
         BR    R14                 Return To Caller

         LTORG ,                   Literal Pool
         #EXEC ,                   Executed Statements
         POP   USING

LWATEDIT LOCTR ,

*---------------------------------------------------------------------*
*                                                                     *
*        ISPF EDIF "WRITE" Routine                                    *
*                                                                     *
*---------------------------------------------------------------------*

SUBRTNS  LOCTR ,

         PUSH  USING
         DROP  ,
EDIFWRITE STM  R14,R12,12(R13)     Save Caller's Registers
         BASR  R11,0               Set Subroutine Base
         USING *,R11

         L     R9,16(,R1)          A(Save Area Passed By ISPF)
         L     R9,0(,R9)           A(Mainline Work Area)
         USING WRKLWAED,R9

         LR    R10,R13             Save Caller's Save Area Address
         LA    R13,WRKSAVE         Point To A New Save Area

         L     R4,0(,R1)           A(Record Data Pointer)
         L     R4,0(,R4)           A(Record Data)

         MVI   WRKUPDTE,C'Y'       Indicate An Update Has Occurred

         L     R6,12(,R1)          A(Request Code)
         CLC   0(4,R6),=A(4)       Check For "No Data Records"
         BE    EDIFWXIT            B. If Yes

         MVC   TEMPREC(8),0(R4)

         ISPLINK 'LMPUT',DATAID,'INVAR ','TEMPREC ',80

EDIFWXIT DS    0H
         LHI   R15,0               Set Return Code

         ST    R15,16(,R10)        Save Return Code
         LR    R13,R10             A(Caller's Save Area)
         LM    R14,R12,12(R13)     Restore Caller's Registers
         BR    R14                 Return To Caller

         LTORG ,                   Literal Pool
         #EXEC ,                   Executed Statements
         POP   USING

LWATEDIT LOCTR ,

*---------------------------------------------------------------------*
*                                                                     *
*        PUTLINE Subroutine                                           *
*                                                                     *
*---------------------------------------------------------------------*

         PUSH  USING
PUTLINE  #SAVE ,                   Save All Registers

         STM   R0,R7,WRKOLD        Save Output Line Descriptors

         L     R3,WRKUPT@          A(UPT)
         L     R4,WRKECT@          A(ECT)

         XC    WRKECB,WRKECB       Clear ECB
         PUTLINE PARM=PUTLINEL,UPT=(R3),ECT=(R4),ECB=WRKECB,           *
               OUTPUT=(WRKOLD,TERM,SINGLE,INFOR),                      *
               MF=(E,WRKIOPL)      Write The Message

PUTLEXIT DS    0H
         NI    WRKFLAG,255-$ERROR

         #RESTORE ,                Restore All Registers

         BR    R14                 Return To Caller
         POP   USING

LWATEDIT LOCTR ,

*---------------------------------------------------------------------*
*                                                                     *
*        Table Length Calculator Routine                              *
*                                                                     *
*---------------------------------------------------------------------*

         PUSH  USING
SETTABL  #SAVE ,                   Save All Registers
         L     R14,WRKTABE@        A(1st Table Entry)

SETT0100 DS    0H
         CLC   WRKTABEL,=AL2(8)    Check For Normal Entry
         BE    SETT0200            B. If Yes

*-------
*        Check "NOTBKGND" Table Entries
*-------
         ICM   R0,3,0(R14)         Check If Entry Length Is Zero
         BZ    SETT0900            B. If Yes (End Of Table)
         CLC   0(2,R14),=X'FFFF'   Check For Terminating Entry
         BE    SETT0900            B. If Yes (End Of Table)
         TM    2(R14),X'BF'        Check If Entry Is Blank Or Zeros
         BZ    SETT0900            B. If Yes (End Of Table)
         B     SETT0300            Else. Advance To Next Entry

*-------
*        Check normal Table Entries
*-------
SETT0200 DS    0H
         TM    0(R14),X'BF'        Check If Entry Is Blank Or Zeros
         BZ    SETT0900            B. If Yes (End Of Table)

SETT0300 DS    0H
         AH    R14,WRKTABEL        A(Next Table Entry)
         B     SETT0100            Loop Till End Of Table

SETT0900 DS    0H
         AH    R14,WRKTABEL        A(End Of Last Slot)
         L     R15,WRKTAB@         A(Start Of Table)
         SR    R14,R15             Calculate Table Length
         STH   R14,WRKTABL         Save Calculated Table Length

         #RESTORE ,                Restore All Registers

         BR    R14                 Return To Caller
         POP   USING

LWATEDIT LOCTR ,

*---------------------------------------------------------------------*
*                                                                     *
*        Dynamic Work Area                                            *
*                                                                     *
*---------------------------------------------------------------------*

FINDBLANK DC   256X'00'
         ORG   FINDBLANK+C' '
         DC    C' '                Find First Blank
         ORG   ,

         #STARTWA PATCH=NO

PUTLINEL PUTLINE MF=L              PUTLINE Parameter List

WRKCALL  CALL  ,(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),VL,MF=L
WRKLINK@ DS    A                   ISPLINK ROUTINE ADDRESS

BLANKS   DS    CL80                Initialized Blanks

WRKDBL   DS    D
WRKECB   DS    F                   ECB
WRKECT@  DS    A                   ECT Address
WRKUPT@  DS    A                   UPT Address

WRKFLAG  DS    X                   General Flag Byte
$MSG_NF  EQU   X'08'               - Issue "Not Found" Message
$MSG_F   EQU   X'04'               - Issue "Found" Message
$ERROR   EQU   X'02'               - This Is An Error Message

WRKSAVE  DS    20F                 Register Save Area

         CNOP  0,4
WRKINS1  DS    AL2,AL2,CL80        PUTLINE Message Insert #1
WRKINS2  DS    AL2,AL2,CL80        PUTLINE Message Insert #2
WRKINS3  DS    AL2,AL2,CL80        PUTLINE Message Insert #3
WRKINS4  DS    AL2,AL2,CL80        PUTLINE Message Insert #4
WRKINS5  DS    AL2,AL2,CL80        PUTLINE Message Insert #5
WRKINS6  DS    AL2,AL2,CL80        PUTLINE Message Insert #6

WRKIOPL  DS    4F                  IOPL
WRKLWA@  DS    A                   LWA Address
WRKOLD   DS    F                   Number Of Message Segments
         DS    A                   A(Message Text)
         DS    A                   A(Message Insert 1)
         DS    A                   A(Message Insert 2)
         DS    A                   A(Message Insert 3)
         DS    A                   A(Message Insert 4)
         DS    A                   A(Message Insert 5)
         DS    A                   A(Message Insert 6)

WRKPPL   DS    7F                  PPL
WRKPDL1  DS    A                   PDL
WRKPDL2  DS    A                   PDL (IKJTSOxx Section Parse)

WRKKW@   DS    A                   Keyword Matching Found Table

WRKDDPDE DS    A,AL2,CL8           DD Name PDE
WRKDDN   EQU   WRKDDPDE+6,8        DD Name
WRKDSPDE DS    A,AL2,CL46          Data Set Name PDE
WRKDSN   EQU   WRKDSPDE+6,46       Data Set Name
WRKMNPDE DS    A,AL2,CL8           Member Name PDE
WRKMEMNM EQU   WRKMNPDE+6,8        Member Name

WRKZDSN  DS    CL44                ISPF Message DSName
WRKUPDTE DS    C                   Edit Performed Update (Y/N)
WRKSEL1  DS    C                   ISPF Selection Option
WRKSEL2  DS    C                   ISPF Selection Option
WRKSEL3  DS    C                   ISPF Selection Option
WRKSEL4  DS    C                   ISPF Selection Option

         CNOP  0,4
WRKCMDNL DS    AL2                 IKJTSOxx Section Command Length
WRKCMDNM DS    CL8                 IKJTSOxx Section Command

WRKCMD@  DS    A                   IKJTSOxx Buffer Section Start
WRKCMDE@ DS    A                   IKJTSOxx Buffer Section End

WRKCBUF@ DS    A                   Command Buffer Address
WRKCBUFL DS    F                   Command Buffer Length

WRKTSRFL DS    0F                  TSO Service Routine Flags
         DC    X'00'               Reserved
         DC    X'00'               Internal Processing Options
         DC    X'01'               Dump If Command Abends
         DC    X'01'               Command Is Being Invoked

         DS    0F
WRKTSRC  DS    C'LWATMGR BUILD LIST(''123456789.123456789.123456789.123*
               456789.1234'')'     Authorized Command
WRKTSRCL DS    A(L'WRKTSRC)        Authorized Command Length
WRKRETCD DS    F                   Command Return Code
WRKRSNCD DS    F                   Command Reason Code
WRKABNCD DS    F                   Command Abend Code
WRKTSRPL DS    8F                  TSO Service Routine Parameters

WRKR13   DS    F                   Register 13 Save Area
WRKR14   DS    F                   Register 14 Save Area
WRKR15   DS    F                   Register 15 Save Area

WRKREASN DS    F                   IEFPRMLB Reason Code
WRKRCODE DS    F                   IEFPRMLB Return Code
WRKBUFF@ DS    A                   IEFPRMLB Return Buffer Address
WRKBUFFL DS    F                   IEFPRMLB Return Buffer Length
WRKMSGB@ DS    A                   IEFPRMLB Returned Message Buffer
WRKMSGBL DS    F                   IEFPRMLB Returned Message Buffer Len
WRKMSGBE DS    A                   End Of Buffer

WRKDATAL DS    AL2                 Current Keyword's Operand Length
WRKDATA  DS    CL80                Current Keyword's Operand
WRKNAMEL DS    AL2                 Current Command/Program Name Length
WRKNAME  DS    CL8                 Current Command/Program Name
WRKNAMEO DS    A                   Current Entry's Offset In Table
WRKNEWNL DS    AL2                 New Command/Program Name Length
WRKNEWN  DS    CL8                 New Command/Program Name
WRKTMPNL DS    AL2                 Save Area For NAME Length
WRKTMPN  DS    CL8                 Save Area For NAME

DATAID   DS    CL8                 LM Data Id
TEMPMSG  DS    CL8                 Temporary ISPF MsgId
TEMPREC  DS    CL80                Temporary Output Record
ZTEMPF   DS    CL44                ISPTEMP Dsname
ZTEMPN   DS    CL8                 ISPTEMP DDName

WRKTABNM DS    CL8                 Current Table Name
WRKTAB@  DS    A                   Current Table Address
WRKTABE@ DS    A                   Current Table End Address
WRKTABPK DS    X                   Current Table PSW Key
WRKTABF  DS    X                   Current Table Flags
WRK$STEP EQU   X'80'   1... ....   Table Was Loaded From //STEPLIB
WRKTABEL DS    AL2                 Current Table Entry Length
WRKTABX@ DS    A                   Current Table End Address
WRKTABL  DS    AL2                 Current Table LWA Length

WRKTAPP@ DS    A                   IKJEFTAP Table Pointer Address
WRKTAPL@ DS    A                   IKJEFTAP Table Length Address
WRKTAPL  DS    AL2                 IKJEFTAP Table Length In LWA
WRKTAPF  DS    C                   IKJEFTAP Flags
         DS    X

WRKTE2P@ DS    A                   IKJEFTE2 Table Pointer Address
WRKTE2L@ DS    A                   IKJEFTE2 Table Length Address
WRKTE2L  DS    AL2                 IKJEFTE2 Table Length In LWA
WRKTE2F  DS    C                   IKJEFTE2 Flags
         DS    X

WRKTE8P@ DS    A                   IKJEFTE8 Table Pointer Address
WRKTE8L@ DS    A                   IKJEFTE8 Table Length Address
WRKTE8L  DS    AL2                 IKJEFTE8 Table Length In LWA
WRKTE8F  DS    C                   IKJEFTE8 Flags
         DS    X

WRKTNSP@ DS    A                   IKJEFTNS Table Pointer Address
WRKTNSL@ DS    A                   IKJEFTNS Table Length Address
WRKTNSL  DS    AL2                 IKJEFTNS Table Length In LWA
WRKTNSF  DS    C                   IKJEFTNS Flags
         DS    X

STACK15  DS    F                   Stack Save Area
STACKNX@ DS    A                   Next Save Area On The Stack
STACKEND DS    A                   End Of Stack Address
STACK    DS    (10*16)F            Register Save Area Stack
STACKLEN EQU   *-STACK             Length Of Save Area Stack
         #STOPWA ,

         IKJEFLWA ,                LOGON Work Area

         IKJEFFDF DFDSECT=YES,DFDSEC2=YES
         IKJTSVT ,                 TSO Service Vector Table

         #DSECTS ASCB,ASXB,CVT,PSA,TSO
         END   ,
